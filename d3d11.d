module aurora.directx.d3d11;

import std.bitmanip;
import aurora.directx.com;
import aurora.directx.dxgi;

//
// Common D3D
//

public enum D3D_CBUFFER_TYPE { 
	D3D_CT_CBUFFER               = 0,
	D3D_CT_TBUFFER               = ( D3D_CT_CBUFFER + 1 ),
	D3D_CT_INTERFACE_POINTERS    = ( D3D_CT_TBUFFER + 1 ),
	D3D_CT_RESOURCE_BIND_INFO    = ( D3D_CT_INTERFACE_POINTERS + 1 ),
	D3D10_CT_CBUFFER             = D3D_CT_CBUFFER,
	D3D10_CT_TBUFFER             = D3D_CT_TBUFFER,
	D3D11_CT_CBUFFER             = D3D_CT_CBUFFER,
	D3D11_CT_TBUFFER             = D3D_CT_TBUFFER,
	D3D11_CT_INTERFACE_POINTERS  = D3D_CT_INTERFACE_POINTERS,
	D3D11_CT_RESOURCE_BIND_INFO  = D3D_CT_RESOURCE_BIND_INFO
}

public enum D3D_DRIVER_TYPE { 
	UNKNOWN    = 0,
	HARDWARE   = ( UNKNOWN + 1 ),
	REFERENCE  = ( HARDWARE + 1 ),
	NULL       = ( REFERENCE + 1 ),
	SOFTWARE   = ( NULL + 1 ),
	WARP       = ( SOFTWARE + 1 )
}

public enum D3D_INCLUDE_TYPE { 
	D3D_INCLUDE_LOCAL        = 0,
	D3D_INCLUDE_SYSTEM       = ( D3D_INCLUDE_LOCAL + 1 ),
	D3D10_INCLUDE_LOCAL      = D3D_INCLUDE_LOCAL,
	D3D10_INCLUDE_SYSTEM     = D3D_INCLUDE_SYSTEM,
	D3D_INCLUDE_FORCE_DWORD  = 0x7fffffff
}

public enum D3D_FEATURE_LEVEL : int { 
	LEVEL_9_1   = 0x9100,
	LEVEL_9_2   = 0x9200,
	LEVEL_9_3   = 0x9300,
	LEVEL_10_0  = 0xa000,
	LEVEL_10_1  = 0xa100,
	LEVEL_11_0  = 0xb000,
	LEVEL_11_1  = 0xb100
}

public enum D3D_INTERPOLATION_MODE : int { 
	UNDEFINED                      = 0,
	CONSTANT                       = 1,
	LINEAR                         = 2,
	LINEAR_CENTROID                = 3,
	LINEAR_NOPERSPECTIVE           = 4,
	LINEAR_NOPERSPECTIVE_CENTROID  = 5,
	LINEAR_SAMPLE                  = 6,
	LINEAR_NOPERSPECTIVE_SAMPLE    = 7
}

public enum D3D_MIN_PRECISION : int { 
	DEFAULT    = 0,
	FLOAT_16   = 1,
	FLOAT_2_8  = 2,
	RESERVED   = 3,
	SINT_16    = 4,
	UINT_16    = 5,
	ANY_16     = 0xf0,
	ANY_10     = 0xf1
}

public enum D3D_NAME : int { 
	D3D_NAME_UNDEFINED                        = 0,
	D3D_NAME_POSITION                         = 1,
	D3D_NAME_CLIP_DISTANCE                    = 2,
	D3D_NAME_CULL_DISTANCE                    = 3,
	D3D_NAME_RENDER_TARGET_ARRAY_INDEX        = 4,
	D3D_NAME_VIEWPORT_ARRAY_INDEX             = 5,
	D3D_NAME_VERTEX_ID                        = 6,
	D3D_NAME_PRIMITIVE_ID                     = 7,
	D3D_NAME_INSTANCE_ID                      = 8,
	D3D_NAME_IS_FRONT_FACE                    = 9,
	D3D_NAME_SAMPLE_INDEX                     = 10,
	D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR       = 11,
	D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR     = 12,
	D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR        = 13,
	D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR      = 14,
	D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR     = 15,
	D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR    = 16,
	D3D_NAME_TARGET                           = 64,
	D3D_NAME_DEPTH                            = 65,
	D3D_NAME_COVERAGE                         = 66,
	D3D_NAME_DEPTH_GREATER_EQUAL              = 67,
	D3D_NAME_DEPTH_LESS_EQUAL                 = 68,
	D3D10_NAME_UNDEFINED                      = D3D_NAME_UNDEFINED,
	D3D10_NAME_POSITION                       = D3D_NAME_POSITION,
	D3D10_NAME_CLIP_DISTANCE                  = D3D_NAME_CLIP_DISTANCE,
	D3D10_NAME_CULL_DISTANCE                  = D3D_NAME_CULL_DISTANCE,
	D3D10_NAME_RENDER_TARGET_ARRAY_INDEX      = D3D_NAME_RENDER_TARGET_ARRAY_INDEX,
	D3D10_NAME_VIEWPORT_ARRAY_INDEX           = D3D_NAME_VIEWPORT_ARRAY_INDEX,
	D3D10_NAME_VERTEX_ID                      = D3D_NAME_VERTEX_ID,
	D3D10_NAME_PRIMITIVE_ID                   = D3D_NAME_PRIMITIVE_ID,
	D3D10_NAME_INSTANCE_ID                    = D3D_NAME_INSTANCE_ID,
	D3D10_NAME_IS_FRONT_FACE                  = D3D_NAME_IS_FRONT_FACE,
	D3D10_NAME_SAMPLE_INDEX                   = D3D_NAME_SAMPLE_INDEX,
	D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR     = D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR,
	D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR   = D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR,
	D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR      = D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR,
	D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR    = D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR,
	D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR   = D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR,
	D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR  = D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR,
	D3D10_NAME_TARGET                         = D3D_NAME_TARGET,
	D3D10_NAME_DEPTH                          = D3D_NAME_DEPTH,
	D3D10_NAME_COVERAGE                       = D3D_NAME_COVERAGE,
	D3D11_NAME_DEPTH_GREATER_EQUAL            = D3D_NAME_DEPTH_GREATER_EQUAL,
	D3D11_NAME_DEPTH_LESS_EQUAL               = D3D_NAME_DEPTH_LESS_EQUAL
}

public enum D3D_PRIMITIVE : int { 
	D3D_PRIMITIVE_UNDEFINED                 = 0,
	D3D_PRIMITIVE_POINT                     = 1,
	D3D_PRIMITIVE_LINE                      = 2,
	D3D_PRIMITIVE_TRIANGLE                  = 3,
	D3D_PRIMITIVE_LINE_ADJ                  = 6,
	D3D_PRIMITIVE_TRIANGLE_ADJ              = 7,
	D3D_PRIMITIVE_1_CONTROL_POINT_PATCH     = 8,
	D3D_PRIMITIVE_2_CONTROL_POINT_PATCH     = 9,
	D3D_PRIMITIVE_3_CONTROL_POINT_PATCH     = 10,
	D3D_PRIMITIVE_4_CONTROL_POINT_PATCH     = 11,
	D3D_PRIMITIVE_5_CONTROL_POINT_PATCH     = 12,
	D3D_PRIMITIVE_6_CONTROL_POINT_PATCH     = 13,
	D3D_PRIMITIVE_7_CONTROL_POINT_PATCH     = 14,
	D3D_PRIMITIVE_8_CONTROL_POINT_PATCH     = 15,
	D3D_PRIMITIVE_9_CONTROL_POINT_PATCH     = 16,
	D3D_PRIMITIVE_10_CONTROL_POINT_PATCH    = 17,
	D3D_PRIMITIVE_11_CONTROL_POINT_PATCH    = 18,
	D3D_PRIMITIVE_12_CONTROL_POINT_PATCH    = 19,
	D3D_PRIMITIVE_13_CONTROL_POINT_PATCH    = 20,
	D3D_PRIMITIVE_14_CONTROL_POINT_PATCH    = 21,
	D3D_PRIMITIVE_15_CONTROL_POINT_PATCH    = 22,
	D3D_PRIMITIVE_16_CONTROL_POINT_PATCH    = 23,
	D3D_PRIMITIVE_17_CONTROL_POINT_PATCH    = 24,
	D3D_PRIMITIVE_18_CONTROL_POINT_PATCH    = 25,
	D3D_PRIMITIVE_19_CONTROL_POINT_PATCH    = 26,
	D3D_PRIMITIVE_20_CONTROL_POINT_PATCH    = 28,
	D3D_PRIMITIVE_21_CONTROL_POINT_PATCH    = 29,
	D3D_PRIMITIVE_22_CONTROL_POINT_PATCH    = 30,
	D3D_PRIMITIVE_23_CONTROL_POINT_PATCH    = 31,
	D3D_PRIMITIVE_24_CONTROL_POINT_PATCH    = 32,
	D3D_PRIMITIVE_25_CONTROL_POINT_PATCH    = 33,
	D3D_PRIMITIVE_26_CONTROL_POINT_PATCH    = 34,
	D3D_PRIMITIVE_27_CONTROL_POINT_PATCH    = 35,
	D3D_PRIMITIVE_28_CONTROL_POINT_PATCH    = 36,
	D3D_PRIMITIVE_29_CONTROL_POINT_PATCH    = 37,
	D3D_PRIMITIVE_30_CONTROL_POINT_PATCH    = 38,
	D3D_PRIMITIVE_31_CONTROL_POINT_PATCH    = 39,
	D3D_PRIMITIVE_32_CONTROL_POINT_PATCH    = 40,
	D3D10_PRIMITIVE_UNDEFINED               = D3D_PRIMITIVE_UNDEFINED,
	D3D10_PRIMITIVE_POINT                   = D3D_PRIMITIVE_POINT,
	D3D10_PRIMITIVE_LINE                    = D3D_PRIMITIVE_LINE,
	D3D10_PRIMITIVE_TRIANGLE                = D3D_PRIMITIVE_TRIANGLE,
	D3D10_PRIMITIVE_LINE_ADJ                = D3D_PRIMITIVE_LINE_ADJ,
	D3D10_PRIMITIVE_TRIANGLE_ADJ            = D3D_PRIMITIVE_TRIANGLE_ADJ,
	D3D11_PRIMITIVE_UNDEFINED               = D3D_PRIMITIVE_UNDEFINED,
	D3D11_PRIMITIVE_POINT                   = D3D_PRIMITIVE_POINT,
	D3D11_PRIMITIVE_LINE                    = D3D_PRIMITIVE_LINE,
	D3D11_PRIMITIVE_TRIANGLE                = D3D_PRIMITIVE_TRIANGLE,
	D3D11_PRIMITIVE_LINE_ADJ                = D3D_PRIMITIVE_LINE_ADJ,
	D3D11_PRIMITIVE_TRIANGLE_ADJ            = D3D_PRIMITIVE_TRIANGLE_ADJ,
	D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH   = D3D_PRIMITIVE_1_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH   = D3D_PRIMITIVE_2_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH   = D3D_PRIMITIVE_3_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH   = D3D_PRIMITIVE_4_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH   = D3D_PRIMITIVE_5_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH   = D3D_PRIMITIVE_6_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH   = D3D_PRIMITIVE_7_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH   = D3D_PRIMITIVE_8_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH   = D3D_PRIMITIVE_9_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_10_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_11_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_12_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_13_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_14_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_15_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_16_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_17_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_18_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_19_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_20_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_21_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_22_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_23_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_24_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_25_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_26_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_27_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_28_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_29_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_30_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_31_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_32_CONTROL_POINT_PATCH
}

public enum D3D_PRIMITIVE_TOPOLOGY : int { 
	D3D_PRIMITIVE_TOPOLOGY_UNDEFINED                     = 0,
	D3D_PRIMITIVE_TOPOLOGY_POINTLIST                     = 1,
	D3D_PRIMITIVE_TOPOLOGY_LINELIST                      = 2,
	D3D_PRIMITIVE_TOPOLOGY_LINESTRIP                     = 3,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST                  = 4,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP                 = 5,
	D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ                  = 10,
	D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ                 = 11,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ              = 12,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ             = 13,
	D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST     = 33,
	D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST     = 34,
	D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST     = 35,
	D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST     = 36,
	D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST     = 37,
	D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST     = 38,
	D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST     = 39,
	D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST     = 40,
	D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST     = 41,
	D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST    = 42,
	D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST    = 43,
	D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST    = 44,
	D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST    = 45,
	D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST    = 46,
	D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST    = 47,
	D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST    = 48,
	D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST    = 49,
	D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST    = 50,
	D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST    = 51,
	D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST    = 52,
	D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST    = 53,
	D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST    = 54,
	D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST    = 55,
	D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST    = 56,
	D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST    = 57,
	D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST    = 58,
	D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST    = 59,
	D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST    = 60,
	D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST    = 61,
	D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST    = 62,
	D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST    = 63,
	D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST    = 64,
	D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED                   = D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
	D3D10_PRIMITIVE_TOPOLOGY_POINTLIST                   = D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
	D3D10_PRIMITIVE_TOPOLOGY_LINELIST                    = D3D_PRIMITIVE_TOPOLOGY_LINELIST,
	D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP                   = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST                = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP               = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
	D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ                = D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ               = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ            = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ           = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED                   = D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
	D3D11_PRIMITIVE_TOPOLOGY_POINTLIST                   = D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST                    = D3D_PRIMITIVE_TOPOLOGY_LINELIST,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP                   = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST                = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP               = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ                = D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ               = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ            = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ           = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST   = D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST   = D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST   = D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST   = D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST   = D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST   = D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST   = D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST   = D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST   = D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST  = D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST
}

public enum D3D_REGISTER_COMPONENT_TYPE : int { 
	D3D_REGISTER_COMPONENT_UNKNOWN    = 0,
	D3D_REGISTER_COMPONENT_UINT32     = 1,
	D3D_REGISTER_COMPONENT_SINT32     = 2,
	D3D_REGISTER_COMPONENT_FLOAT32    = 3,
	D3D10_REGISTER_COMPONENT_UNKNOWN  = D3D_REGISTER_COMPONENT_UNKNOWN,
	D3D10_REGISTER_COMPONENT_UINT32   = D3D_REGISTER_COMPONENT_UINT32,
	D3D10_REGISTER_COMPONENT_SINT32   = D3D_REGISTER_COMPONENT_SINT32,
	D3D10_REGISTER_COMPONENT_FLOAT32  = D3D_REGISTER_COMPONENT_FLOAT32
}

public enum D3D_RESOURCE_RETURN_TYPE : int  { 
	D3D_RETURN_TYPE_UNORM        = 1,
	D3D_RETURN_TYPE_SNORM        = 2,
	D3D_RETURN_TYPE_SINT         = 3,
	D3D_RETURN_TYPE_UINT         = 4,
	D3D_RETURN_TYPE_FLOAT        = 5,
	D3D_RETURN_TYPE_MIXED        = 6,
	D3D_RETURN_TYPE_DOUBLE       = 7,
	D3D_RETURN_TYPE_CONTINUED    = 8,
	D3D10_RETURN_TYPE_UNORM      = D3D_RETURN_TYPE_UNORM,
	D3D10_RETURN_TYPE_SNORM      = D3D_RETURN_TYPE_SNORM,
	D3D10_RETURN_TYPE_SINT       = D3D_RETURN_TYPE_SINT,
	D3D10_RETURN_TYPE_UINT       = D3D_RETURN_TYPE_UINT,
	D3D10_RETURN_TYPE_FLOAT      = D3D_RETURN_TYPE_FLOAT,
	D3D10_RETURN_TYPE_MIXED      = D3D_RETURN_TYPE_MIXED,
	D3D11_RETURN_TYPE_UNORM      = D3D_RETURN_TYPE_UNORM,
	D3D11_RETURN_TYPE_SNORM      = D3D_RETURN_TYPE_SNORM,
	D3D11_RETURN_TYPE_SINT       = D3D_RETURN_TYPE_SINT,
	D3D11_RETURN_TYPE_UINT       = D3D_RETURN_TYPE_UINT,
	D3D11_RETURN_TYPE_FLOAT      = D3D_RETURN_TYPE_FLOAT,
	D3D11_RETURN_TYPE_MIXED      = D3D_RETURN_TYPE_MIXED,
	D3D11_RETURN_TYPE_DOUBLE     = D3D_RETURN_TYPE_DOUBLE,
	D3D11_RETURN_TYPE_CONTINUED  = D3D_RETURN_TYPE_CONTINUED
}

public enum D3D_SHADER_CBUFFER_FLAGS : int { 
	D3D_CBF_USERPACKED    = 1,
	D3D10_CBF_USERPACKED  = D3D_CBF_USERPACKED,
	D3D_CBF_FORCE_DWORD   = 0x7fffffff
}

public enum D3D_SHADER_INPUT_FLAGS : int { 
	D3D_SIF_USERPACKED             = 0x1,
	D3D_SIF_COMPARISON_SAMPLER     = 0x2,
	D3D_SIF_TEXTURE_COMPONENT_0    = 0x4,
	D3D_SIF_TEXTURE_COMPONENT_1    = 0x8,
	D3D_SIF_TEXTURE_COMPONENTS     = 0xc,
	D3D_SIF_UNUSED                 = 0x10,
	D3D10_SIF_USERPACKED           = D3D_SIF_USERPACKED,
	D3D10_SIF_COMPARISON_SAMPLER   = D3D_SIF_COMPARISON_SAMPLER,
	D3D10_SIF_TEXTURE_COMPONENT_0  = D3D_SIF_TEXTURE_COMPONENT_0,
	D3D10_SIF_TEXTURE_COMPONENT_1  = D3D_SIF_TEXTURE_COMPONENT_1,
	D3D10_SIF_TEXTURE_COMPONENTS   = D3D_SIF_TEXTURE_COMPONENTS,
	D3D_SIF_FORCE_DWORD            = 0x7fffffff
}

public enum D3D_SHADER_INPUT_TYPE : int { 
	D3D_SIT_CBUFFER                          = 0,
	D3D_SIT_TBUFFER                          = ( D3D_SIT_CBUFFER + 1 ),
	D3D_SIT_TEXTURE                          = ( D3D_SIT_TBUFFER + 1 ),
	D3D_SIT_SAMPLER                          = ( D3D_SIT_TEXTURE + 1 ),
	D3D_SIT_UAV_RWTYPED                      = ( D3D_SIT_SAMPLER + 1 ),
	D3D_SIT_STRUCTURED                       = ( D3D_SIT_UAV_RWTYPED + 1 ),
	D3D_SIT_UAV_RWSTRUCTURED                 = ( D3D_SIT_STRUCTURED + 1 ),
	D3D_SIT_BYTEADDRESS                      = ( D3D_SIT_UAV_RWSTRUCTURED + 1 ),
	D3D_SIT_UAV_RWBYTEADDRESS                = ( D3D_SIT_BYTEADDRESS + 1 ),
	D3D_SIT_UAV_APPEND_STRUCTURED            = ( D3D_SIT_UAV_RWBYTEADDRESS + 1 ),
	D3D_SIT_UAV_CONSUME_STRUCTURED           = ( D3D_SIT_UAV_APPEND_STRUCTURED + 1 ),
	D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER    = ( D3D_SIT_UAV_CONSUME_STRUCTURED + 1 ),
	D3D10_SIT_CBUFFER                        = D3D_SIT_CBUFFER,
	D3D10_SIT_TBUFFER                        = D3D_SIT_TBUFFER,
	D3D10_SIT_TEXTURE                        = D3D_SIT_TEXTURE,
	D3D10_SIT_SAMPLER                        = D3D_SIT_SAMPLER,
	D3D11_SIT_UAV_RWTYPED                    = D3D_SIT_UAV_RWTYPED,
	D3D11_SIT_STRUCTURED                     = D3D_SIT_STRUCTURED,
	D3D11_SIT_UAV_RWSTRUCTURED               = D3D_SIT_UAV_RWSTRUCTURED,
	D3D11_SIT_BYTEADDRESS                    = D3D_SIT_BYTEADDRESS,
	D3D11_SIT_UAV_RWBYTEADDRESS              = D3D_SIT_UAV_RWBYTEADDRESS,
	D3D11_SIT_UAV_APPEND_STRUCTURED          = D3D_SIT_UAV_APPEND_STRUCTURED,
	D3D11_SIT_UAV_CONSUME_STRUCTURED         = D3D_SIT_UAV_CONSUME_STRUCTURED,
	D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER  = D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER
}

public enum D3D_SHADER_VARIABLE_CLASS : int { 
	D3D_SVC_SCALAR               = 0,
	D3D_SVC_VECTOR               = ( D3D_SVC_SCALAR + 1 ),
	D3D_SVC_MATRIX_ROWS          = ( D3D_SVC_VECTOR + 1 ),
	D3D_SVC_MATRIX_COLUMNS       = ( D3D_SVC_MATRIX_ROWS + 1 ),
	D3D_SVC_OBJECT               = ( D3D_SVC_MATRIX_COLUMNS + 1 ),
	D3D_SVC_STRUCT               = ( D3D_SVC_OBJECT + 1 ),
	D3D_SVC_INTERFACE_CLASS      = ( D3D_SVC_STRUCT + 1 ),
	D3D_SVC_INTERFACE_POINTER    = ( D3D_SVC_INTERFACE_CLASS + 1 ),
	D3D10_SVC_SCALAR             = D3D_SVC_SCALAR,
	D3D10_SVC_VECTOR             = D3D_SVC_VECTOR,
	D3D10_SVC_MATRIX_ROWS        = D3D_SVC_MATRIX_ROWS,
	D3D10_SVC_MATRIX_COLUMNS     = D3D_SVC_MATRIX_COLUMNS,
	D3D10_SVC_OBJECT             = D3D_SVC_OBJECT,
	D3D10_SVC_STRUCT             = D3D_SVC_STRUCT,
	D3D11_SVC_INTERFACE_CLASS    = D3D_SVC_INTERFACE_CLASS,
	D3D11_SVC_INTERFACE_POINTER  = D3D_SVC_INTERFACE_POINTER,
	D3D_SVC_FORCE_DWORD          = 0x7fffffff
}

public enum D3D_SHADER_VARIABLE_FLAGS : int { 
	D3D_SVF_USERPACKED             = 1,
	D3D_SVF_USED                   = 2,
	D3D_SVF_INTERFACE_POINTER      = 4,
	D3D_SVF_INTERFACE_PARAMETER    = 8,
	D3D10_SVF_USERPACKED           = D3D_SVF_USERPACKED,
	D3D10_SVF_USED                 = D3D_SVF_USED,
	D3D11_SVF_INTERFACE_POINTER    = D3D_SVF_INTERFACE_POINTER,
	D3D11_SVF_INTERFACE_PARAMETER  = D3D_SVF_INTERFACE_PARAMETER,
	D3D_SVF_FORCE_DWORD            = 0x7fffffff
}

public enum D3D_SHADER_VARIABLE_TYPE : int { 
	D3D_SVT_VOID                         = 0,
	D3D_SVT_BOOL                         = 1,
	D3D_SVT_INT                          = 2,
	D3D_SVT_FLOAT                        = 3,
	D3D_SVT_STRING                       = 4,
	D3D_SVT_TEXTURE                      = 5,
	D3D_SVT_TEXTURE1D                    = 6,
	D3D_SVT_TEXTURE2D                    = 7,
	D3D_SVT_TEXTURE3D                    = 8,
	D3D_SVT_TEXTURECUBE                  = 9,
	D3D_SVT_SAMPLER                      = 10,
	D3D_SVT_PIXELSHADER                  = 15,
	D3D_SVT_VERTEXSHADER                 = 16,
	D3D_SVT_UINT                         = 19,
	D3D_SVT_UINT8                        = 20,
	D3D_SVT_GEOMETRYSHADER               = 21,
	D3D_SVT_RASTERIZER                   = 22,
	D3D_SVT_DEPTHSTENCIL                 = 23,
	D3D_SVT_BLEND                        = 24,
	D3D_SVT_BUFFER                       = 25,
	D3D_SVT_CBUFFER                      = 26,
	D3D_SVT_TBUFFER                      = 27,
	D3D_SVT_TEXTURE1DARRAY               = 28,
	D3D_SVT_TEXTURE2DARRAY               = 29,
	D3D_SVT_RENDERTARGETVIEW             = 30,
	D3D_SVT_DEPTHSTENCILVIEW             = 31,
	D3D_SVT_TEXTURE2DMS                  = 32,
	D3D_SVT_TEXTURE2DMSARRAY             = 33,
	D3D_SVT_TEXTURECUBEARRAY             = 34,
	D3D_SVT_HULLSHADER                   = 35,
	D3D_SVT_DOMAINSHADER                 = 36,
	D3D_SVT_INTERFACE_POINTER            = 37,
	D3D_SVT_COMPUTESHADER                = 38,
	D3D_SVT_DOUBLE                       = 39,
	D3D_SVT_RWTEXTURE1D                  = 40,
	D3D_SVT_RWTEXTURE1DARRAY             = 41,
	D3D_SVT_RWTEXTURE2D                  = 42,
	D3D_SVT_RWTEXTURE2DARRAY             = 43,
	D3D_SVT_RWTEXTURE3D                  = 44,
	D3D_SVT_RWBUFFER                     = 45,
	D3D_SVT_BYTEADDRESS_BUFFER           = 46,
	D3D_SVT_RWBYTEADDRESS_BUFFER         = 47,
	D3D_SVT_STRUCTURED_BUFFER            = 48,
	D3D_SVT_RWSTRUCTURED_BUFFER          = 49,
	D3D_SVT_APPEND_STRUCTURED_BUFFER     = 50,
	D3D_SVT_CONSUME_STRUCTURED_BUFFER    = 51,
	D3D10_SVT_VOID                       = D3D_SVT_VOID,
	D3D10_SVT_BOOL                       = D3D_SVT_BOOL,
	D3D10_SVT_INT                        = D3D_SVT_INT,
	D3D10_SVT_FLOAT                      = D3D_SVT_FLOAT,
	D3D10_SVT_STRING                     = D3D_SVT_STRING,
	D3D10_SVT_TEXTURE                    = D3D_SVT_TEXTURE,
	D3D10_SVT_TEXTURE1D                  = D3D_SVT_TEXTURE1D,
	D3D10_SVT_TEXTURE2D                  = D3D_SVT_TEXTURE2D,
	D3D10_SVT_TEXTURE3D                  = D3D_SVT_TEXTURE3D,
	D3D10_SVT_TEXTURECUBE                = D3D_SVT_TEXTURECUBE,
	D3D10_SVT_SAMPLER                    = D3D_SVT_SAMPLER,
	D3D10_SVT_PIXELSHADER                = D3D_SVT_PIXELSHADER,
	D3D10_SVT_VERTEXSHADER               = D3D_SVT_VERTEXSHADER,
	D3D10_SVT_UINT                       = D3D_SVT_UINT,
	D3D10_SVT_UINT8                      = D3D_SVT_UINT8,
	D3D10_SVT_GEOMETRYSHADER             = D3D_SVT_GEOMETRYSHADER,
	D3D10_SVT_RASTERIZER                 = D3D_SVT_RASTERIZER,
	D3D10_SVT_DEPTHSTENCIL               = D3D_SVT_DEPTHSTENCIL,
	D3D10_SVT_BLEND                      = D3D_SVT_BLEND,
	D3D10_SVT_BUFFER                     = D3D_SVT_BUFFER,
	D3D10_SVT_CBUFFER                    = D3D_SVT_CBUFFER,
	D3D10_SVT_TBUFFER                    = D3D_SVT_TBUFFER,
	D3D10_SVT_TEXTURE1DARRAY             = D3D_SVT_TEXTURE1DARRAY,
	D3D10_SVT_TEXTURE2DARRAY             = D3D_SVT_TEXTURE2DARRAY,
	D3D10_SVT_RENDERTARGETVIEW           = D3D_SVT_RENDERTARGETVIEW,
	D3D10_SVT_DEPTHSTENCILVIEW           = D3D_SVT_DEPTHSTENCILVIEW,
	D3D10_SVT_TEXTURE2DMS                = D3D_SVT_TEXTURE2DMS,
	D3D10_SVT_TEXTURE2DMSARRAY           = D3D_SVT_TEXTURE2DMSARRAY,
	D3D10_SVT_TEXTURECUBEARRAY           = D3D_SVT_TEXTURECUBEARRAY,
	D3D11_SVT_HULLSHADER                 = D3D_SVT_HULLSHADER,
	D3D11_SVT_DOMAINSHADER               = D3D_SVT_DOMAINSHADER,
	D3D11_SVT_INTERFACE_POINTER          = D3D_SVT_INTERFACE_POINTER,
	D3D11_SVT_COMPUTESHADER              = D3D_SVT_COMPUTESHADER,
	D3D11_SVT_DOUBLE                     = D3D_SVT_DOUBLE,
	D3D11_SVT_RWTEXTURE1D                = D3D_SVT_RWTEXTURE1D,
	D3D11_SVT_RWTEXTURE1DARRAY           = D3D_SVT_RWTEXTURE1DARRAY,
	D3D11_SVT_RWTEXTURE2D                = D3D_SVT_RWTEXTURE2D,
	D3D11_SVT_RWTEXTURE2DARRAY           = D3D_SVT_RWTEXTURE2DARRAY,
	D3D11_SVT_RWTEXTURE3D                = D3D_SVT_RWTEXTURE3D,
	D3D11_SVT_RWBUFFER                   = D3D_SVT_RWBUFFER,
	D3D11_SVT_BYTEADDRESS_BUFFER         = D3D_SVT_BYTEADDRESS_BUFFER,
	D3D11_SVT_RWBYTEADDRESS_BUFFER       = D3D_SVT_RWBYTEADDRESS_BUFFER,
	D3D11_SVT_STRUCTURED_BUFFER          = D3D_SVT_STRUCTURED_BUFFER,
	D3D11_SVT_RWSTRUCTURED_BUFFER        = D3D_SVT_RWSTRUCTURED_BUFFER,
	D3D11_SVT_APPEND_STRUCTURED_BUFFER   = D3D_SVT_APPEND_STRUCTURED_BUFFER,
	D3D11_SVT_CONSUME_STRUCTURED_BUFFER  = D3D_SVT_CONSUME_STRUCTURED_BUFFER,
	D3D_SVT_FORCE_DWORD                  = 0x7fffffff
}

public enum D3D_SRV_DIMENSION : int { 
	D3D_SRV_DIMENSION_UNKNOWN               = 0,
	D3D_SRV_DIMENSION_BUFFER                = 1,
	D3D_SRV_DIMENSION_TEXTURE1D             = 2,
	D3D_SRV_DIMENSION_TEXTURE1DARRAY        = 3,
	D3D_SRV_DIMENSION_TEXTURE2D             = 4,
	D3D_SRV_DIMENSION_TEXTURE2DARRAY        = 5,
	D3D_SRV_DIMENSION_TEXTURE2DMS           = 6,
	D3D_SRV_DIMENSION_TEXTURE2DMSARRAY      = 7,
	D3D_SRV_DIMENSION_TEXTURE3D             = 8,
	D3D_SRV_DIMENSION_TEXTURECUBE           = 9,
	D3D_SRV_DIMENSION_TEXTURECUBEARRAY      = 10,
	D3D_SRV_DIMENSION_BUFFEREX              = 11,
	D3D10_SRV_DIMENSION_UNKNOWN             = D3D_SRV_DIMENSION_UNKNOWN,
	D3D10_SRV_DIMENSION_BUFFER              = D3D_SRV_DIMENSION_BUFFER,
	D3D10_SRV_DIMENSION_TEXTURE1D           = D3D_SRV_DIMENSION_TEXTURE1D,
	D3D10_SRV_DIMENSION_TEXTURE1DARRAY      = D3D_SRV_DIMENSION_TEXTURE1DARRAY,
	D3D10_SRV_DIMENSION_TEXTURE2D           = D3D_SRV_DIMENSION_TEXTURE2D,
	D3D10_SRV_DIMENSION_TEXTURE2DARRAY      = D3D_SRV_DIMENSION_TEXTURE2DARRAY,
	D3D10_SRV_DIMENSION_TEXTURE2DMS         = D3D_SRV_DIMENSION_TEXTURE2DMS,
	D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY    = D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
	D3D10_SRV_DIMENSION_TEXTURE3D           = D3D_SRV_DIMENSION_TEXTURE3D,
	D3D10_SRV_DIMENSION_TEXTURECUBE         = D3D_SRV_DIMENSION_TEXTURECUBE,
	D3D10_1_SRV_DIMENSION_UNKNOWN           = D3D_SRV_DIMENSION_UNKNOWN,
	D3D10_1_SRV_DIMENSION_BUFFER            = D3D_SRV_DIMENSION_BUFFER,
	D3D10_1_SRV_DIMENSION_TEXTURE1D         = D3D_SRV_DIMENSION_TEXTURE1D,
	D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY    = D3D_SRV_DIMENSION_TEXTURE1DARRAY,
	D3D10_1_SRV_DIMENSION_TEXTURE2D         = D3D_SRV_DIMENSION_TEXTURE2D,
	D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY    = D3D_SRV_DIMENSION_TEXTURE2DARRAY,
	D3D10_1_SRV_DIMENSION_TEXTURE2DMS       = D3D_SRV_DIMENSION_TEXTURE2DMS,
	D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY  = D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
	D3D10_1_SRV_DIMENSION_TEXTURE3D         = D3D_SRV_DIMENSION_TEXTURE3D,
	D3D10_1_SRV_DIMENSION_TEXTURECUBE       = D3D_SRV_DIMENSION_TEXTURECUBE,
	D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY  = D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
	D3D11_SRV_DIMENSION_UNKNOWN             = D3D_SRV_DIMENSION_UNKNOWN,
	D3D11_SRV_DIMENSION_BUFFER              = D3D_SRV_DIMENSION_BUFFER,
	D3D11_SRV_DIMENSION_TEXTURE1D           = D3D_SRV_DIMENSION_TEXTURE1D,
	D3D11_SRV_DIMENSION_TEXTURE1DARRAY      = D3D_SRV_DIMENSION_TEXTURE1DARRAY,
	D3D11_SRV_DIMENSION_TEXTURE2D           = D3D_SRV_DIMENSION_TEXTURE2D,
	D3D11_SRV_DIMENSION_TEXTURE2DARRAY      = D3D_SRV_DIMENSION_TEXTURE2DARRAY,
	D3D11_SRV_DIMENSION_TEXTURE2DMS         = D3D_SRV_DIMENSION_TEXTURE2DMS,
	D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY    = D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
	D3D11_SRV_DIMENSION_TEXTURE3D           = D3D_SRV_DIMENSION_TEXTURE3D,
	D3D11_SRV_DIMENSION_TEXTURECUBE         = D3D_SRV_DIMENSION_TEXTURECUBE,
	D3D11_SRV_DIMENSION_TEXTURECUBEARRAY    = D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
	D3D11_SRV_DIMENSION_BUFFEREX            = D3D_SRV_DIMENSION_BUFFEREX
}

public enum D3D_TESSELLATOR_DOMAIN : int { 
	D3D_TESSELLATOR_DOMAIN_UNDEFINED    = 0,
	D3D_TESSELLATOR_DOMAIN_ISOLINE      = 1,
	D3D_TESSELLATOR_DOMAIN_TRI          = 2,
	D3D_TESSELLATOR_DOMAIN_QUAD         = 3,
	D3D11_TESSELLATOR_DOMAIN_UNDEFINED  = D3D_TESSELLATOR_DOMAIN_UNDEFINED,
	D3D11_TESSELLATOR_DOMAIN_ISOLINE    = D3D_TESSELLATOR_DOMAIN_ISOLINE,
	D3D11_TESSELLATOR_DOMAIN_TRI        = D3D_TESSELLATOR_DOMAIN_TRI,
	D3D11_TESSELLATOR_DOMAIN_QUAD       = D3D_TESSELLATOR_DOMAIN_QUAD
}

public enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE : int { 
	D3D_TESSELLATOR_OUTPUT_UNDEFINED       = 0,
	D3D_TESSELLATOR_OUTPUT_POINT           = 1,
	D3D_TESSELLATOR_OUTPUT_LINE            = 2,
	D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW     = 3,
	D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW    = 4,
	D3D11_TESSELLATOR_OUTPUT_UNDEFINED     = D3D_TESSELLATOR_OUTPUT_UNDEFINED,
	D3D11_TESSELLATOR_OUTPUT_POINT         = D3D_TESSELLATOR_OUTPUT_POINT,
	D3D11_TESSELLATOR_OUTPUT_LINE          = D3D_TESSELLATOR_OUTPUT_LINE,
	D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW   = D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW,
	D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW  = D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW
}

public enum D3D_TESSELLATOR_PARTITIONING : int { 
	D3D_TESSELLATOR_PARTITIONING_UNDEFINED          = 0,
	D3D_TESSELLATOR_PARTITIONING_INTEGER            = 1,
	D3D_TESSELLATOR_PARTITIONING_POW2               = 2,
	D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD     = 3,
	D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN    = 4,
	D3D11_TESSELLATOR_PARTITIONING_UNDEFINED        = D3D_TESSELLATOR_PARTITIONING_UNDEFINED,
	D3D11_TESSELLATOR_PARTITIONING_INTEGER          = D3D_TESSELLATOR_PARTITIONING_INTEGER,
	D3D11_TESSELLATOR_PARTITIONING_POW2             = D3D_TESSELLATOR_PARTITIONING_POW2,
	D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD   = D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD,
	D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN  = D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN
}

public struct D3D_SHADER_MACRO {
	LPCSTR Name;
	LPCSTR Definition;
}

mixin(uuid!(ID3D10Blob, "8BA5FB08-5195-40e2-AC58-0D989C3A0102"));
public interface ID3D10Blob : IUnknown
{
extern(Windows):
	void* GetBufferPointer();
	SIZE_T GetBufferSize();
}
alias ID3D10Blob ID3DBlob;

public interface ID3DInclude : IUnknown
{
extern(Windows):
	HRESULT Close(const(void)* Data);
	HRESULT Open(D3D_INCLUDE_TYPE IncludeType, const(char)* pFileName, const(void)* pParentData, const(void)** ppData, uint *pBytes);
}



//
// Core D3D11
//

HRESULT D3D11CreateDevice(IDXGIAdapter *pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, const D3D_FEATURE_LEVEL *pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, ID3D11Device **ppDevice, D3D_FEATURE_LEVEL *pFeatureLevel, ID3D11DeviceContext **ppImmediateContext);
HRESULT D3D11CreateDeviceAndSwapChain(IDXGIAdapter *pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, const D3D_FEATURE_LEVEL *pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, const DXGI_SWAP_CHAIN_DESC *pSwapChainDesc, IDXGISwapChain **ppSwapChain, ID3D11Device **ppDevice, D3D_FEATURE_LEVEL *pFeatureLevel, ID3D11DeviceContext **ppImmediateContext);

//
// Enumerations
//

public enum D3D11_ASYNC_GETDATA_FLAG : int { 
	DONOTFLUSH  = 0x1
}

public enum D3D11_BLEND : int { 
	ZERO              = 1,
	ONE               = 2,
	SRC_COLOR         = 3,
	INV_SRC_COLOR     = 4,
	SRC_ALPHA         = 5,
	INV_SRC_ALPHA     = 6,
	DEST_ALPHA        = 7,
	INV_DEST_ALPHA    = 8,
	DEST_COLOR        = 9,
	INV_DEST_COLOR    = 10,
	SRC_ALPHA_SAT     = 11,
	BLEND_FACTOR      = 14,
	INV_BLEND_FACTOR  = 15,
	SRC1_COLOR        = 16,
	INV_SRC1_COLOR    = 17,
	SRC1_ALPHA        = 18,
	INV_SRC1_ALPHA    = 19
}

public enum D3D11_BLEND_OP : int { 
	ADD           = 1,
	SUBTRACT      = 2,
	REV_SUBTRACT  = 3,
	MIN           = 4,
	MAX           = 5
}

public enum D3D11_CLEAR_FLAG : int { 
	DEPTH    = 0x1L,
	STENCIL  = 0x2L
}

public enum D3D11_COLOR_WRITE_ENABLE : int { 
	RED    = 1,
	GREEN  = 2,
	BLUE   = 4,
	ALPHA  = 8,
	ALL    = ( RED | GREEN | BLUE | ALPHA )
}

public enum D3D11_COPY_FLAGS : int { 
	NO_OVERWRITE  = 0x1,
	DISCARD       = 0x2
}

public enum D3D11_COUNTER : int { 
	DEVICE_DEPENDENT_0  = 0x40000000
}

public enum D3D11_COUNTER_TYPE : int  { 
	FLOAT32  = 0,
	UINT16   = ( FLOAT32 + 1 ),
	UINT32   = ( UINT16 + 1 ),
	UINT64   = ( UINT32 + 1 )
}

public enum D3D11_CREATE_DEVICE_FLAG : int { 
	SINGLETHREADED                                 = 0x1,
	DEBUG                                          = 0x2,
	SWITCH_TO_REF                                  = 0x4,
	PREVENT_INTERNAL_THREADING_OPTIMIZATIONS       = 0x8,
	BGRA_SUPPORT                                   = 0x20,
	DEBUGGABLE                                     = 0x40,
	PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY  = 0x80,
	DISABLE_GPU_TIMEOUT                            = 0x100,
	VIDEO_SUPPORT                                  = 0x800
}

public enum D3D11_COMPARISON_FUNC : int { 
	D3D11_COMPARISON_NEVER          = 1,
	D3D11_COMPARISON_LESS           = 2,
	D3D11_COMPARISON_EQUAL          = 3,
	D3D11_COMPARISON_LESS_EQUAL     = 4,
	D3D11_COMPARISON_GREATER        = 5,
	D3D11_COMPARISON_NOT_EQUAL      = 6,
	D3D11_COMPARISON_GREATER_EQUAL  = 7,
	D3D11_COMPARISON_ALWAYS         = 8
}

public enum D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG : int { 
	SINGLETHREADED  = 0x1
} 

public enum D3D11_CULL_MODE : int { 
	NONE   = 1,
	FRONT  = 2,
	BACK   = 3
}

public enum D3D11_DEPTH_WRITE_MASK : int { 
	ZERO  = 0,
	ALL   = 1
}

public enum D3D11_DEVICE_CONTEXT_TYPE : int { 
	IMMEDIATE  = 0,
	DEFERRED   = ( IMMEDIATE + 1 )
}

public enum D3D11_FEATURE : int { 
	THREADING                       = 0,
	DOUBLES                         = ( THREADING + 1 ),
	FORMAT_SUPPORT                  = ( DOUBLES + 1 ),
	FORMAT_SUPPORT2                 = ( FORMAT_SUPPORT + 1 ),
	D3D10_X_HARDWARE_OPTIONS        = ( FORMAT_SUPPORT2 + 1 ),
	D3D11_OPTIONS                   = ( D3D10_X_HARDWARE_OPTIONS + 1 ),
	ARCHITECTURE_INFO               = ( D3D11_OPTIONS + 1 ),
	D3D9_OPTIONS                    = ( ARCHITECTURE_INFO + 1 ),
	SHADER_MIN_PRECISION_SUPPORT    = ( D3D9_OPTIONS + 1 ),
	D3D9_SHADOW_SUPPORT             = ( SHADER_MIN_PRECISION_SUPPORT + 1 ),
	D3D11_OPTIONS1                  = ( D3D9_SHADOW_SUPPORT + 1 ),
	D3D9_SIMPLE_INSTANCING_SUPPORT  = ( D3D11_OPTIONS1 + 1 ),
	MARKER_SUPPORT                  = ( D3D9_SIMPLE_INSTANCING_SUPPORT + 1 ),
	D3D9_OPTIONS1                   = ( MARKER_SUPPORT + 1 )
}

public enum D3D11_FILL_MODE : int { 
	WIREFRAME  = 2,
	SOLID      = 3
}

public enum D3D11_FILTER : int { 
	MIN_MAG_MIP_POINT                           = 0,
	MIN_MAG_POINT_MIP_LINEAR                    = 0x1,
	MIN_POINT_MAG_LINEAR_MIP_POINT              = 0x4,
	MIN_POINT_MAG_MIP_LINEAR                    = 0x5,
	MIN_LINEAR_MAG_MIP_POINT                    = 0x10,
	MIN_LINEAR_MAG_POINT_MIP_LINEAR             = 0x11,
	MIN_MAG_LINEAR_MIP_POINT                    = 0x14,
	MIN_MAG_MIP_LINEAR                          = 0x15,
	ANISOTROPIC                                 = 0x55,
	COMPARISON_MIN_MAG_MIP_POINT                = 0x80,
	COMPARISON_MIN_MAG_POINT_MIP_LINEAR         = 0x81,
	COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT   = 0x84,
	COMPARISON_MIN_POINT_MAG_MIP_LINEAR         = 0x85,
	COMPARISON_MIN_LINEAR_MAG_MIP_POINT         = 0x90,
	COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR  = 0x91,
	COMPARISON_MIN_MAG_LINEAR_MIP_POINT         = 0x94,
	COMPARISON_MIN_MAG_MIP_LINEAR               = 0x95,
	COMPARISON_ANISOTROPIC                      = 0xd5,
	MINIMUM_MIN_MAG_MIP_POINT                   = 0x100,
	MINIMUM_MIN_MAG_POINT_MIP_LINEAR            = 0x101,
	MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT      = 0x104,
	MINIMUM_MIN_POINT_MAG_MIP_LINEAR            = 0x105,
	MINIMUM_MIN_LINEAR_MAG_MIP_POINT            = 0x110,
	MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR     = 0x111,
	MINIMUM_MIN_MAG_LINEAR_MIP_POINT            = 0x114,
	MINIMUM_MIN_MAG_MIP_LINEAR                  = 0x115,
	MINIMUM_ANISOTROPIC                         = 0x155,
	MAXIMUM_MIN_MAG_MIP_POINT                   = 0x180,
	MAXIMUM_MIN_MAG_POINT_MIP_LINEAR            = 0x181,
	MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT      = 0x184,
	MAXIMUM_MIN_POINT_MAG_MIP_LINEAR            = 0x185,
	MAXIMUM_MIN_LINEAR_MAG_MIP_POINT            = 0x190,
	MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR     = 0x191,
	MAXIMUM_MIN_MAG_LINEAR_MIP_POINT            = 0x194,
	MAXIMUM_MIN_MAG_MIP_LINEAR                  = 0x195,
	MAXIMUM_ANISOTROPIC                         = 0x1d5
}

public enum D3D11_FILTER_TYPE : int { 
	POINT   = 0,
	LINEAR  = 1
}

public enum D3D11_FORMAT_SUPPORT : int { 
	BUFFER                       = 0x1,
	IA_VERTEX_BUFFER             = 0x2,
	IA_INDEX_BUFFER              = 0x4,
	SO_BUFFER                    = 0x8,
	TEXTURE1D                    = 0x10,
	TEXTURE2D                    = 0x20,
	TEXTURE3D                    = 0x40,
	TEXTURECUBE                  = 0x80,
	SHADER_LOAD                  = 0x100,
	SHADER_SAMPLE                = 0x200,
	SHADER_SAMPLE_COMPARISON     = 0x400,
	SHADER_SAMPLE_MONO_TEXT      = 0x800,
	MIP                          = 0x1000,
	MIP_AUTOGEN                  = 0x2000,
	RENDER_TARGET                = 0x4000,
	BLENDABLE                    = 0x8000,
	DEPTH_STENCIL                = 0x10000,
	CPU_LOCKABLE                 = 0x20000,
	MULTISAMPLE_RESOLVE          = 0x40000,
	DISPLAY                      = 0x80000,
	CAST_WITHIN_BIT_LAYOUT       = 0x100000,
	MULTISAMPLE_RENDERTARGET     = 0x200000,
	MULTISAMPLE_LOAD             = 0x400000,
	SHADER_GATHER                = 0x800000,
	BACK_BUFFER_CAST             = 0x1000000,
	TYPED_UNORDERED_ACCESS_VIEW  = 0x2000000,
	SHADER_GATHER_COMPARISON     = 0x4000000,
	DECODER_OUTPUT               = 0x8000000,
	VIDEO_PROCESSOR_OUTPUT       = 0x10000000,
	VIDEO_PROCESSOR_INPUT        = 0x20000000,
	VIDEO_ENCODER                = 0x40000000
}

public enum D3D11_FORMAT_SUPPORT2 : int { 
	UAV_ATOMIC_ADD                                = 0x1,
	UAV_ATOMIC_BITWISE_OPS                        = 0x2,
	UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE  = 0x4,
	UAV_ATOMIC_EXCHANGE                           = 0x8,
	UAV_ATOMIC_SIGNED_MIN_OR_MAX                  = 0x10,
	UAV_ATOMIC_UNSIGNED_MIN_OR_MAX                = 0x20,
	UAV_TYPED_LOAD                                = 0x40,
	UAV_TYPED_STORE                               = 0x80,
	OUTPUT_MERGER_LOGIC_OP                        = 0x100,
	TILED                                         = 0x200,
	SHAREABLE                                     = 0x400
}

public enum D3D11_INPUT_CLASSIFICATION : int { 
	VERTEX_DATA    = 0,
	INSTANCE_DATA  = 1
}

public enum D3D11_LOGIC_OP : int { 
	CLEAR          = 0,
	SET            = ( CLEAR + 1 ),
	COPY           = ( SET + 1 ),
	COPY_INVERTED  = ( COPY + 1 ),
	NOOP           = ( COPY_INVERTED + 1 ),
	INVERT         = ( NOOP + 1 ),
	AND            = ( INVERT + 1 ),
	NAND           = ( AND + 1 ),
	OR             = ( NAND + 1 ),
	NOR            = ( OR + 1 ),
	XOR            = ( NOR + 1 ),
	EQUIV          = ( XOR + 1 ),
	AND_REVERSE    = ( EQUIV + 1 ),
	AND_INVERTED   = ( AND_REVERSE + 1 ),
	OR_REVERSE     = ( AND_INVERTED + 1 ),
	OR_INVERTED    = ( OR_REVERSE + 1 )
}

public enum D3D11_PRIMITIVE : int { 
	_UNDEFINED               = 0,
	_POINT                   = 1,
	_LINE                    = 2,
	_TRIANGLE                = 3,
	_LINE_ADJ                = 6,
	_TRIANGLE_ADJ            = 7,
	_1_CONTROL_POINT_PATCH   = 8,
	_2_CONTROL_POINT_PATCH   = 9,
	_3_CONTROL_POINT_PATCH   = 10,
	_4_CONTROL_POINT_PATCH   = 11,
	_5_CONTROL_POINT_PATCH   = 12,
	_6_CONTROL_POINT_PATCH   = 13,
	_7_CONTROL_POINT_PATCH   = 14,
	_8_CONTROL_POINT_PATCH   = 15,
	_9_CONTROL_POINT_PATCH   = 16,
	_10_CONTROL_POINT_PATCH  = 17,
	_11_CONTROL_POINT_PATCH  = 18,
	_12_CONTROL_POINT_PATCH  = 19,
	_13_CONTROL_POINT_PATCH  = 20,
	_14_CONTROL_POINT_PATCH  = 21,
	_15_CONTROL_POINT_PATCH  = 22,
	_16_CONTROL_POINT_PATCH  = 23,
	_17_CONTROL_POINT_PATCH  = 24,
	_18_CONTROL_POINT_PATCH  = 25,
	_19_CONTROL_POINT_PATCH  = 26,
	_20_CONTROL_POINT_PATCH  = 27,
	_21_CONTROL_POINT_PATCH  = 28,
	_22_CONTROL_POINT_PATCH  = 29,
	_23_CONTROL_POINT_PATCH  = 30,
	_24_CONTROL_POINT_PATCH  = 31,
	_25_CONTROL_POINT_PATCH  = 32,
	_26_CONTROL_POINT_PATCH  = 33,
	_27_CONTROL_POINT_PATCH  = 34,
	_28_CONTROL_POINT_PATCH  = 35,
	_29_CONTROL_POINT_PATCH  = 36,
	_30_CONTROL_POINT_PATCH  = 37,
	_31_CONTROL_POINT_PATCH  = 38,
	_32_CONTROL_POINT_PATCH  = 39
}

public enum D3D11_PRIMITIVE_TOPOLOGY { 
	_UNDEFINED                   = 0,
	_POINTLIST                   = 1,
	_LINELIST                    = 2,
	_LINESTRIP                   = 3,
	_TRIANGLELIST                = 4,
	_TRIANGLESTRIP               = 5,
	_LINELIST_ADJ                = 10,
	_LINESTRIP_ADJ               = 11,
	_TRIANGLELIST_ADJ            = 12,
	_TRIANGLESTRIP_ADJ           = 13,
	_1_CONTROL_POINT_PATCHLIST   = 33,
	_2_CONTROL_POINT_PATCHLIST   = 34,
	_3_CONTROL_POINT_PATCHLIST   = 35,
	_4_CONTROL_POINT_PATCHLIST   = 36,
	_5_CONTROL_POINT_PATCHLIST   = 37,
	_6_CONTROL_POINT_PATCHLIST   = 38,
	_7_CONTROL_POINT_PATCHLIST   = 39,
	_8_CONTROL_POINT_PATCHLIST   = 40,
	_9_CONTROL_POINT_PATCHLIST   = 41,
	_10_CONTROL_POINT_PATCHLIST  = 42,
	_11_CONTROL_POINT_PATCHLIST  = 43,
	_12_CONTROL_POINT_PATCHLIST  = 44,
	_13_CONTROL_POINT_PATCHLIST  = 45,
	_14_CONTROL_POINT_PATCHLIST  = 46,
	_15_CONTROL_POINT_PATCHLIST  = 47,
	_16_CONTROL_POINT_PATCHLIST  = 48,
	_17_CONTROL_POINT_PATCHLIST  = 49,
	_18_CONTROL_POINT_PATCHLIST  = 50,
	_19_CONTROL_POINT_PATCHLIST  = 51,
	_20_CONTROL_POINT_PATCHLIST  = 52,
	_21_CONTROL_POINT_PATCHLIST  = 53,
	_22_CONTROL_POINT_PATCHLIST  = 54,
	_23_CONTROL_POINT_PATCHLIST  = 55,
	_24_CONTROL_POINT_PATCHLIST  = 56,
	_25_CONTROL_POINT_PATCHLIST  = 57,
	_26_CONTROL_POINT_PATCHLIST  = 58,
	_27_CONTROL_POINT_PATCHLIST  = 59,
	_28_CONTROL_POINT_PATCHLIST  = 60,
	_29_CONTROL_POINT_PATCHLIST  = 61,
	_30_CONTROL_POINT_PATCHLIST  = 62,
	_31_CONTROL_POINT_PATCHLIST  = 63,
	_32_CONTROL_POINT_PATCHLIST  = 64
}

public enum D3D11_QUERY : int { 
	EVENT                          = 0,
	OCCLUSION                      = ( EVENT + 1 ),
	TIMESTAMP                      = ( OCCLUSION + 1 ),
	TIMESTAMP_DISJOINT             = ( TIMESTAMP + 1 ),
	PIPELINE_STATISTICS            = ( TIMESTAMP_DISJOINT + 1 ),
	OCCLUSION_PREDICATE            = ( PIPELINE_STATISTICS + 1 ),
	SO_STATISTICS                  = ( OCCLUSION_PREDICATE + 1 ),
	SO_OVERFLOW_PREDICATE          = ( SO_STATISTICS + 1 ),
	SO_STATISTICS_STREAM0          = ( SO_OVERFLOW_PREDICATE + 1 ),
	SO_OVERFLOW_PREDICATE_STREAM0  = ( SO_STATISTICS_STREAM0 + 1 ),
	SO_STATISTICS_STREAM1          = ( SO_OVERFLOW_PREDICATE_STREAM0 + 1 ),
	SO_OVERFLOW_PREDICATE_STREAM1  = ( SO_STATISTICS_STREAM1 + 1 ),
	SO_STATISTICS_STREAM2          = ( SO_OVERFLOW_PREDICATE_STREAM1 + 1 ),
	SO_OVERFLOW_PREDICATE_STREAM2  = ( SO_STATISTICS_STREAM2 + 1 ),
	SO_STATISTICS_STREAM3          = ( SO_OVERFLOW_PREDICATE_STREAM2 + 1 ),
	SO_OVERFLOW_PREDICATE_STREAM3  = ( SO_STATISTICS_STREAM3 + 1 )
}

public enum D3D11_QUERY_MISC_FLAG : int { 
	PREDICATEHINT  = 0x1
}

public enum D3D11_RAISE_FLAG : int { 
	D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR  = 0x1L
}

public enum D3D11_SHADER_MIN_PRECISION_SUPPORT : int { 
	PRECISION_10_BIT  = 0x1,
	PRECISION_16_BIT  = 0x2
}

public enum D3D11_STENCIL_OP : int { 
	KEEP      = 1,
	ZERO      = 2,
	REPLACE   = 3,
	INCR_SAT  = 4,
	DECR_SAT  = 5,
	INVERT    = 6,
	INCR      = 7,
	DECR      = 8
}

public enum D3D11_TEXTURE_ADDRESS_MODE { 
	WRAP         = 1,
	MIRROR       = 2,
	CLAMP        = 3,
	BORDER       = 4,
	MIRROR_ONCE  = 5
}

public enum D3D11_TEXTURECUBE_FACE : int { 
	POSITIVE_X  = 0,
	NEGATIVE_X  = 1,
	POSITIVE_Y  = 2,
	NEGATIVE_Y  = 3,
	POSITIVE_Z  = 4,
	NEGATIVE_Z  = 5
}

public enum D3D11_TILED_RESOURCES_TIER { 
	NOT_SUPPORTED  = 0,
	TIER_1         = 1,
	TIER_2         = 2
}

//
// Structures
//

alias RECT D3D11_RECT;

public struct D3D11_BLEND_DESC {
	bool AlphaToCoverageEnable;
	bool IndependentBlendEnable;
	D3D11_RENDER_TARGET_BLEND_DESC[8] RenderTarget;
}

public struct D3D11_BOX {
	uint left;
	uint top;
	uint front;
	uint right;
	uint bottom;
	uint back;
}

public struct D3D11_COUNTER_DESC {
	D3D11_COUNTER Counter;
	uint MiscFlags;
}

public struct D3D11_COUNTER_INFO {
	D3D11_COUNTER LastDeviceDependentCounter;
	uint          NumSimultaneousCounters;
	ubyte         NumDetectableParallelUnits;
}

public struct D3D11_DEPTH_STENCIL_DESC {
	bool                       DepthEnable;
	D3D11_DEPTH_WRITE_MASK     DepthWriteMask;
	D3D11_COMPARISON_FUNC      DepthFunc;
	bool                       StencilEnable;
	ubyte                      StencilReadMask;
	ubyte                      StencilWriteMask;
	D3D11_DEPTH_STENCILOP_DESC FrontFace;
	D3D11_DEPTH_STENCILOP_DESC BackFace;
}

public struct D3D11_DEPTH_STENCILOP_DESC {
	D3D11_STENCIL_OP      StencilFailOp;
	D3D11_STENCIL_OP      StencilDepthFailOp;
	D3D11_STENCIL_OP      StencilPassOp;
	D3D11_COMPARISON_FUNC StencilFunc;
}

public struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS {
	bool ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}

public struct D3D11_FEATURE_DATA_DOUBLES {
	bool DoublePrecisionFloatShaderOps;
}

public struct D3D11_FEATURE_DATA_FORMAT_SUPPORT {
	DXGI_FORMAT InFormat;
	uint OutFormatSupport;
}

public struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2 {
	DXGI_FORMAT InFormat;
	uint OutFormatSupport2;
}

public struct D3D11_FEATURE_DATA_THREADING {
	bool DriverConcurrentCreates;
	bool DriverCommandLists;
}

public struct D3D11_INPUT_ELEMENT_DESC {
	const(char)*			   SemanticName;
	uint                       SemanticIndex;
	DXGI_FORMAT                Format;
	uint                       InputSlot;
	uint                       AlignedByteOffset;
	D3D11_INPUT_CLASSIFICATION InputSlotClass;
	uint                       InstanceDataStepRate;
}

public struct D3D11_QUERY_DATA_PIPELINE_STATISTICS {
	ulong IAVertices;
	ulong IAPrimitives;
	ulong VSInvocations;
	ulong GSInvocations;
	ulong GSPrimitives;
	ulong CInvocations;
	ulong CPrimitives;
	ulong PSInvocations;
	ulong HSInvocations;
	ulong DSInvocations;
	ulong CSInvocations;
}

public struct D3D11_QUERY_DATA_SO_STATISTICS {
	ulong NumPrimitivesWritten;
	ulong PrimitivesStorageNeeded;
}

public struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT {
	ulong Frequency;
	bool Disjoint;
}

public struct D3D11_QUERY_DESC {
	D3D11_QUERY Query;
	uint MiscFlags;
}

public struct D3D11_RASTERIZER_DESC {
	D3D11_FILL_MODE FillMode;
	D3D11_CULL_MODE CullMode;
	bool            FrontCounterClockwise;
	int             DepthBias;
	float           DepthBiasClamp;
	float           SlopeScaledDepthBias;
	bool            DepthClipEnable;
	bool            ScissorEnable;
	bool            MultisampleEnable;
	bool            AntialiasedLineEnable;
}

public struct D3D11_RENDER_TARGET_BLEND_DESC {
	bool           BlendEnable;
	D3D11_BLEND    SrcBlend;
	D3D11_BLEND    DestBlend;
	D3D11_BLEND_OP BlendOp;
	D3D11_BLEND    SrcBlendAlpha;
	D3D11_BLEND    DestBlendAlpha;
	D3D11_BLEND_OP BlendOpAlpha;
	ubyte          RenderTargetWriteMask;
}

public struct D3D11_SAMPLER_DESC {
	D3D11_FILTER               Filter;
	D3D11_TEXTURE_ADDRESS_MODE AddressU;
	D3D11_TEXTURE_ADDRESS_MODE AddressV;
	D3D11_TEXTURE_ADDRESS_MODE AddressW;
	float                      MipLODBias;
	uint                       MaxAnisotropy;
	D3D11_COMPARISON_FUNC      ComparisonFunc;
	float[4]                   BorderColor;
	float                      MinLOD;
	float                      MaxLOD;
}

public struct D3D11_SO_DECLARATION_ENTRY {
	uint   Stream;
	const(char)* SemanticName;
	uint   SemanticIndex;
	ubyte   StartComponent;
	ubyte   ComponentCount;
	ubyte   OutputSlot;
}

public struct D3D11_VIEWPORT {
	float TopLeftX;
	float TopLeftY;
	float Width;
	float Height;
	float MinDepth;
	float MaxDepth;
}

public struct D3D11_BLEND_DESC1 {
	bool AlphaToCoverageEnable;
	bool IndependentBlendEnable;
	D3D11_RENDER_TARGET_BLEND_DESC1[8] RenderTarget;
}

public struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO {
	bool TileBasedDeferredRenderer;
}

public struct D3D11_FEATURE_DATA_D3D9_OPTIONS {
	bool FullNonPow2TextureSupport;
}

public struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT {
	bool SupportsDepthAsTextureWithLessEqualComparisonFilter;
}

public struct D3D11_FEATURE_DATA_D3D11_OPTIONS {
	bool OutputMergerLogicOp;
	bool UAVOnlyRenderingForcedSampleCount;
	bool DiscardAPIsSeenByDriver;
	bool FlagsForUpdateAndCopySeenByDriver;
	bool ClearView;
	bool CopyWithOverlap;
	bool ConstantBufferPartialUpdate;
	bool ConstantBufferOffsetting;
	bool MapNoOverwriteOnDynamicConstantBuffer;
	bool MapNoOverwriteOnDynamicBufferSRV;
	bool MultisampleRTVWithForcedSampleCountOne;
	bool SAD4ShaderInstructions;
	bool ExtendedDoublesShaderInstructions;
	bool ExtendedResourceSharing;
}

public struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT {
	uint PixelShaderMinPrecision;
	uint AllOtherShaderStagesMinPrecision;
}

public struct D3D11_RASTERIZER_DESC1 {
	D3D11_FILL_MODE FillMode;
	D3D11_CULL_MODE CullMode;
	bool            FrontCounterClockwise;
	int             DepthBias;
	float           DepthBiasClamp;
	float           SlopeScaledDepthBias;
	bool            DepthClipEnable;
	bool            ScissorEnable;
	bool            MultisampleEnable;
	bool            AntialiasedLineEnable;
	uint            ForcedSampleCount;
}

public struct D3D11_RENDER_TARGET_BLEND_DESC1 {
	bool           BlendEnable;
	bool           LogicOpEnable;
	D3D11_BLEND    SrcBlend;
	D3D11_BLEND    DestBlend;
	D3D11_BLEND_OP BlendOp;
	D3D11_BLEND    SrcBlendAlpha;
	D3D11_BLEND    DestBlendAlpha;
	D3D11_BLEND_OP BlendOpAlpha;
	D3D11_LOGIC_OP LogicOp;
	ubyte          RenderTargetWriteMask;
}

public struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT {
	bool SimpleInstancingSupported;
}

public struct D3D11_FEATURE_DATA_D3D11_OPTIONS1 {
	D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
	bool MinMaxFiltering;
	bool ClearViewAlsoSupportsDepthOnlyFormats;
	bool MapOnDefaultBuffers;
}

public struct D3D11_FEATURE_DATA_MARKER_SUPPORT {
	bool Profile;
}

//
// Interfaces
//

mixin(uuid!(ID3D11Asynchronous, "4b35d0cd-1e15-4258-9c98-1b1333f6dd3b"));
public interface ID3D11Asynchronous : ID3D11DeviceChild
{
extern(Windows):
	uint GetDataSize();
}

mixin(uuid!(ID3D11BlendState, "75b68faa-347d-4159-8f45-a0640f01cd9a"));
public interface ID3D11BlendState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_BLEND_DESC *pDesc);
}

mixin(uuid!(ID3D11Counter, "6e8c49fb-a371-4770-b440-29086022b741"));
public interface ID3D11Counter : ID3D11Asynchronous
{
extern(Windows):
	void GetDesc(D3D11_COUNTER_DESC *pDesc);
}

mixin(uuid!(ID3D11CommandList, "a24bc4d1-769e-43f7-8013-98ff566c18e2"));
public interface ID3D11CommandList : ID3D11DeviceChild
{
extern(Windows):
	uint GetContextFlags();
}

mixin(uuid!(ID3D11DepthStencilState, "03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1"));
public interface ID3D11DepthStencilState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_DEPTH_STENCIL_DESC *pDesc);
}

mixin(uuid!(ID3D11Device, "db6f6ddb-ac77-4e88-8253-819df9bbf140"));
public interface ID3D11Device : IUnknown
{
extern(Windows):
	void GetDesc(D3D11_DEPTH_STENCIL_DESC *pDesc);
	HRESULT CheckCounter(const D3D11_COUNTER_DESC *pDesc, D3D11_COUNTER_TYPE *pType, uint *pActiveCounters, char* szName, uint* pNameLength, char* szUnits, uint* pUnitsLength, char* szDescription, uint* pDescriptionLength);
	void CheckCounterInfo(D3D11_COUNTER_INFO *pCounterInfo);
	HRESULT CheckFeatureSupport(D3D11_FEATURE Feature, void *pFeatureSupportData, uint FeatureSupportDataSize);
	HRESULT CheckFormatSupport(DXGI_FORMAT Format, uint* pFormatSupport);
	HRESULT CheckMultisampleQualityLevels(DXGI_FORMAT Format, uint SampleCount, uint *pNumQualityLevels);
	HRESULT CreateBlendState(const D3D11_BLEND_DESC *pBlendStateDesc, ID3D11BlendState *ppBlendState);
	HRESULT CreateBuffer(const D3D11_BUFFER_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Buffer *ppBuffer);
	HRESULT CreateClassLinkage(ID3D11ClassLinkage *ppLinkage);
	HRESULT CreateComputeShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader *ppComputeShader);
	HRESULT CreateCounter(const D3D11_COUNTER_DESC *pCounterDesc, ID3D11Counter *ppCounter);
	HRESULT CreateDeferredContext(uint ContextFlags, ID3D11DeviceContext *ppDeferredContext);
	HRESULT CreateDepthStencilState(const D3D11_DEPTH_STENCIL_DESC *pDepthStencilDesc, ID3D11DepthStencilState *ppDepthStencilState);
	HRESULT CreateDepthStencilView(ID3D11Resource pResource, const D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc, ID3D11DepthStencilView *ppDepthStencilView);
	HRESULT CreateDomainShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader *ppDomainShader);
	HRESULT CreateGeometryShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader *ppGeometryShader);
	HRESULT CreateGeometryShaderWithStreamOutput(const void *pShaderBytecode, SIZE_T BytecodeLength, const D3D11_SO_DECLARATION_ENTRY *pSODeclaration, UINT NumEntries, const UINT *pBufferStrides, UINT NumStrides, UINT RasterizedStream, ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader *ppGeometryShader);
	HRESULT CreateHullShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11HullShader *ppHullShader);
	HRESULT CreateInputLayout(const D3D11_INPUT_ELEMENT_DESC *pInputElementDescs, UINT NumElements, const void *pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, ID3D11InputLayout *ppInputLayout);
	HRESULT CreatePixelShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader *ppPixelShader);
	HRESULT CreatePredicate(const D3D11_QUERY_DESC *pPredicateDesc, ID3D11Predicate *ppPredicate);
	HRESULT CreateQuery(const D3D11_QUERY_DESC *pQueryDesc, ID3D11Query *ppQuery);
	HRESULT CreateRasterizerState(const D3D11_RASTERIZER_DESC *pRasterizerDesc, ID3D11RasterizerState *ppRasterizerState);
	HRESULT CreateRenderTargetView(ID3D11Resource pResource, const D3D11_RENDER_TARGET_VIEW_DESC *pDesc, ID3D11RenderTargetView *ppRTView);
	HRESULT CreateSamplerState(const D3D11_SAMPLER_DESC *pSamplerDesc, ID3D11SamplerState *ppSamplerState);
	HRESULT CreateShaderResourceView(ID3D11Resource pResource, const D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc, ID3D11ShaderResourceView **ppSRView);
	HRESULT CreateTexture1D(const D3D11_TEXTURE1D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture1D *ppTexture1D);
	HRESULT CreateTexture2D(const D3D11_TEXTURE2D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture2D *ppTexture2D);
	HRESULT CreateTexture3D(const D3D11_TEXTURE3D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture3D *ppTexture3D);
	HRESULT CreateUnorderedAccessView(ID3D11Resource *pResource, const D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc, ID3D11UnorderedAccessView **ppUAView);
	HRESULT CreateVertexShader(const void *pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader *ppVertexShader);
	uint GetCreationFlags();
	HRESULT GetDeviceRemovedReason();
	uint GetExceptionMode();
	D3D_FEATURE_LEVEL GetFeatureLevel();
	void GetImmediateContext(ID3D11DeviceContext *ppImmediateContext);
	HRESULT GetPrivateData(GUID* guid, uint* pDataSize, void* pData);
	HRESULT OpenSharedResource(HANDLE hResource, IID* ReturnedInterface, void **ppResource);
	HRESULT SetExceptionMode(uint RaiseFlags);
	HRESULT SetPrivateData(GUID* guid, uint DataSize, const void *pData);
	HRESULT SetPrivateDataInterface(GUID* guid, const IUnknown *pData);
}

mixin(uuid!(ID3D11DeviceChild, "1841e5c8-16b0-489b-bcc8-44cfb0d5deae"));
public interface ID3D11DeviceChild : IUnknown
{
extern(Windows):
	void GetDevice(ID3D11Device **ppDevice);
	HRESULT GetPrivateData(GUID* guid, uint* pDataSize, void *pData);
	HRESULT SetPrivateData(GUID* guid, uint DataSize, const void *pData);
	HRESULT SetPrivateDataInterface(GUID* guid, const IUnknown pData);
}

mixin(uuid!(ID3D11DeviceContext, "c0bfa96c-e089-44fb-8eaf-26f8796190da"));
public interface ID3D11DeviceContext : ID3D11DeviceChild
{
extern(Windows):
	void Begin(ID3D11Asynchronous *pAsync);
	void ClearDepthStencilView(ID3D11DepthStencilView pDepthStencilView, uint ClearFlags, float Depth, ubyte Stencil);
	void ClearRenderTargetView(ID3D11RenderTargetView pRenderTargetView, const float[4] ColorRGBA);
	void ClearState();
	void ClearUnorderedAccessViewFloat(ID3D11UnorderedAccessView pUnorderedAccessView, const float[4] Values);
	void ClearUnorderedAccessViewUint(ID3D11UnorderedAccessView pUnorderedAccessView, const uint[4] Values);
	void CopyResource(ID3D11Resource pDstResource, ID3D11Resource pSrcResource);
	void CopyStructureCount(ID3D11Buffer pDstBuffer, uint DstAlignedByteOffset, ID3D11UnorderedAccessView pSrcView);
	void CopySubresourceRegion(ID3D11Resource pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, ID3D11Resource pSrcResource, uint SrcSubresource, const D3D11_BOX *pSrcBox);
	void CSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void CSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void CSGetShader(ID3D11ComputeShader *ppComputeShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void CSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void CSGetUnorderedAccessViews(uint StartSlot, uint NumUAVs, const(ID3D11UnorderedAccessView) *ppUnorderedAccessViews);
	void CSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void CSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void CSSetShader(ID3D11ComputeShader pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void CSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
	void CSSetUnorderedAccessViews(uint StartSlot, uint NumUAVs, const(ID3D11UnorderedAccessView) *ppUnorderedAccessViews, const(uint) *pUAVInitialCounts);
	void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);
	void DispatchIndirect(ID3D11Buffer pBufferForArgs, uint AlignedOffsetForArgs);
	void Draw(uint VertexCount, uint StartVertexLocation);
	void DrawAuto();
	void DrawIndexed(uint IndexCount, uint StartIndexLocation, int BaseVertexLocation);
	void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);
	void DrawIndexedInstancedIndirect(ID3D11Buffer pBufferForArgs, uint AlignedByteOffsetForArgs);
	void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);
	void DrawInstancedIndirect(ID3D11Buffer pBufferForArgs, uint AlignedByteOffsetForArgs);
	void DSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void DSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void DSGetShader(ID3D11DomainShader *ppDomainShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void DSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void DSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void DSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void DSSetShader(ID3D11DomainShader *pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void DSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
	void End(ID3D11Asynchronous *pAsync);
	void ExecuteCommandList(ID3D11CommandList pCommandList, bool RestoreContextState);
	HRESULT FinishCommandList(bool RestoreDeferredContextState, ID3D11CommandList *ppCommandList);
	void Flush();
	void GenerateMips(ID3D11ShaderResourceView pShaderResourceView);
	uint GetContextFlags();
	HRESULT GetData(ID3D11Asynchronous *pAsync, void *pData, uint DataSize, uint GetDataFlags);
	void GetPredication(ID3D11Predicate *ppPredicate, bool* pPredicateValue);
	float GetResourceMinLOD(ID3D11Resource pResource);
	D3D11_DEVICE_CONTEXT_TYPE GetType();
	void GSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void GSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void GSGetShader(ID3D11GeometryShader *ppGeometryShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void GSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void GSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void GSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void GSSetShader(ID3D11GeometryShader *pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void GSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
	void HSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void HSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void HSGetShader(ID3D11HullShader *ppHullShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void HSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void HSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void HSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void HSSetShader(ID3D11HullShader *pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void HSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
	void IAGetIndexBuffer(ID3D11Buffer *pIndexBuffer, DXGI_FORMAT *Format, uint* Offset);
	void IAGetInputLayout(ID3D11InputLayout *ppInputLayout);
	void IAGetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY *pTopology);
	void IAGetVertexBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppVertexBuffers, uint *pStrides, uint *pOffsets);
	void IASetIndexBuffer(ID3D11Buffer pIndexBuffer, DXGI_FORMAT Format, uint Offset);
	void IASetInputLayout(ID3D11InputLayout pInputLayout);
	void IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY Topology);
	void IASetVertexBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppVertexBuffers, const(uint) *pStrides, const(uint) *pOffsets);
	HRESULT Map(ID3D11Resource pResource, uint Subresource, D3D11_MAP MapType, uint MapFlags, D3D11_MAPPED_SUBRESOURCE *pMappedResource);
	void OMGetBlendState(ID3D11BlendState *ppBlendState, float[4] BlendFactor, uint* pSampleMask);
	void OMGetDepthStencilState(ID3D11DepthStencilState *ppDepthStencilState, uint* pStencilRef);
	void OMGetRenderTargets(uint NumViews, ID3D11RenderTargetView *ppRenderTargetViews, ID3D11DepthStencilView *ppDepthStencilView);
	void OMGetRenderTargetsAndUnorderedAccessViews(uint NumViews, ID3D11RenderTargetView *ppRenderTargetViews, ID3D11DepthStencilView *ppDepthStencilView, uint UAVStartSlot, uint NumUAVs, ID3D11UnorderedAccessView *ppUnorderedAccessViews);
	void OMSetBlendState(ID3D11BlendState pBlendState, const float[4] BlendFactor, uint SampleMask);
	void OMSetDepthStencilState(ID3D11DepthStencilState pDepthStencilState, uint StencilRef);
	void OMSetRenderTargets(uint NumViews, const(ID3D11RenderTargetView) *ppRenderTargetViews, ID3D11DepthStencilView pDepthStencilView);
	void OMSetRenderTargetsAndUnorderedAccessViews(uint NumViews, const(ID3D11RenderTargetView) *ppRenderTargetViews, ID3D11DepthStencilView pDepthStencilView, uint UAVStartSlot, uint NumUAVs, const(ID3D11UnorderedAccessView) *ppUnorderedAccessView, const(uint) *pUAVInitialCounts);
	void PSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void PSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void PSGetShader(ID3D11PixelShader *ppPixelShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void PSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void PSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void PSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void PSSetShader(ID3D11PixelShader *pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void PSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
	void ResolveSubresource(ID3D11Resource pDstResource, uint DstSubresource, ID3D11Resource pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);
	void RSGetScissorRects(uint* pNumRects, D3D11_RECT *pRects);
	void RSGetState(ID3D11RasterizerState *ppRasterizerState);
	void RSGetViewports(uint* pNumViewports, D3D11_VIEWPORT *pViewports);
	void RSSetScissorRects(uint NumRects, const D3D11_RECT *pRects);
	void RSSetState(ID3D11RasterizerState pRasterizerState);
	void RSSetViewports(uint NumViewports, const D3D11_VIEWPORT *pViewports);
	void SetPredication(ID3D11Predicate pPredicate, bool PredicateValue);
	void SetResourceMinLOD(ID3D11Resource pResource, float MinLOD);
	void SOGetTargets(uint NumBuffers, ID3D11Buffer *ppSOTargets);
	void SOSetTargets(uint NumBuffers, const(ID3D11Buffer) *ppSOTargets, const(uint) *pOffsets);
	void Unmap(ID3D11Resource pResource, uint Subresource);
	void UpdateSubresource(ID3D11Resource pDstResource, uint DstSubresource, const(D3D11_BOX) *pDstBox, const(void) *pSrcData, uint SrcRowPitch, uint SrcDepthPitch);
	void VSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void VSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void VSGetShader(ID3D11VertexShader *ppVertexShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void VSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void VSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void VSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void VSSetShader(ID3D11VertexShader *pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void VSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
}

mixin(uuid!(ID3D11InputLayout, "e4819ddc-4cf0-4025-bd26-5de82a3e07b7"));
public interface ID3D11InputLayout : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11Predicate, "9eb576dd-9f77-4d86-81aa-8bab5fe490e2"));
public interface ID3D11Predicate : ID3D11Query
{
extern(Windows):
}

mixin(uuid!(ID3D11Query, "d6c00747-87b7-425e-b84d-44d108560afd"));
public interface ID3D11Query : ID3D11Asynchronous
{
extern(Windows):
	void GetDesc(D3D11_QUERY_DESC *pDesc);
}

mixin(uuid!(ID3D11RasterizerState, "9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7"));
public interface ID3D11RasterizerState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_RASTERIZER_DESC *pDesc);
}

mixin(uuid!(ID3D11SamplerState, "da6fea51-564c-4487-9810-f0d0f9b4e3a5"));
public interface ID3D11SamplerState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_SAMPLER_DESC *pDesc);
}

mixin(uuid!(ID3D11BlendState1, "cc86fabe-da55-401d-85e7-e3c9de2877e9"));
public interface ID3D11BlendState1 : ID3D11BlendState
{
extern(Windows):
	void GetDesc1(D3D11_BLEND_DESC1 *pDesc);
}

mixin(uuid!(ID3D11Device1, "a04bfb29-08ef-43d6-a49c-a9bdbdcbe686"));
public interface ID3D11Device1 : ID3D11Device
{
extern(Windows):
	HRESULT CreateBlendState1(const D3D11_BLEND_DESC1 *pBlendStateDesc, ID3D11BlendState1 *ppBlendState);
	HRESULT CreateDeferredContext1(uint ContextFlags, ID3D11DeviceContext1 *ppDeferredContext);
	HRESULT CreateDeviceContextState(uint Flags, const D3D_FEATURE_LEVEL *pFeatureLevels, uint FeatureLevels, uint SDKVersion, IID* EmulatedInterface, D3D_FEATURE_LEVEL *pChosenFeatureLevel, ID3DDeviceContextState *ppContextState);
	HRESULT CreateRasterizerState1(const D3D11_RASTERIZER_DESC1 *pRasterizerDesc, ID3D11RasterizerState1 *ppRasterizerState);
	void GetImmediateContext1(ID3D11DeviceContext1 *ppImmediateContext);
	HRESULT OpenSharedResource1(HANDLE hResource, IID* returnedInterface, void **ppResource);
	HRESULT OpenSharedResourceByName(const(wchar)* lpName, uint dwDesiredAccess, IID* returnedInterface, void **ppResource);
}

mixin(uuid!(ID3D11DeviceContext1, "bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1"));
public interface ID3D11DeviceContext1 : ID3D11DeviceContext
{
extern(Windows):
	void ClearView(ID3D11View pView, const(float[4]) Color, const(D3D11_RECT) *pRect, uint NumRects);
	void CopySubresourceRegion1(ID3D11Resource pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, ID3D11Resource pSrcResource, uint SrcSubresource, const(D3D11_BOX) *pSrcBox, uint CopyFlags);
	void CSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void CSSetConstantBuffers1(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers, const(uint)*pFirstConstant, const(uint)*pNumConstants);
	void DiscardResource(ID3D11Resource pResource);
	void DiscardView(ID3D11View pResourceView);
	void DiscardView1(ID3D11View pResourceView, const(D3D11_RECT) *pRects, uint NumRects);
	void DSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void DSSetConstantBuffers1(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers, const(uint) *pFirstConstant, const(uint) *pNumConstants);
	void GSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void GSSetConstantBuffers1(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers, const(uint) *pFirstConstant, const(uint) *pNumConstants);
	void HSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void HSSetConstantBuffers1(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers, const(uint) *pFirstConstant, const(uint) *pNumConstants);
	void PSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void PSSetConstantBuffers1(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers, const(uint) *pFirstConstant, const(uint) *pNumConstants);
	void SwapDeviceContextState(ID3DDeviceContextState pState, ID3DDeviceContextState *ppPreviousState);
	void UpdateSubresource1(ID3D11Resource pDstResource, uint DstSubresource, const(D3D11_BOX) *pDstBox, const(void) *pSrcData, uint SrcRowPitch, uint SrcDepthPitch, uint CopyFlags);
	void VSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void VSSetConstantBuffers1(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers, const(uint) *pFirstConstant, const(uint) *pNumConstants);
}

mixin(uuid!(ID3DDeviceContextState, "5c1e0d8a-7c23-48f9-8c59-a92958ceff11"));
public interface ID3DDeviceContextState : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11RasterizerState1, "1217d7a6-5039-418c-b042-9cbe256afd6e"));
public interface ID3D11RasterizerState1 : ID3D11RasterizerState
{
extern(Windows):
	void GetDesc1(D3D11_RASTERIZER_DESC1 *pDesc);
}

mixin(uuid!(ID3D11Device2, "9d06dffa-d1e5-4d07-83a8-1bb123f2f841"));
public interface ID3D11Device2 : ID3D11Device1
{
extern(Windows):
	HRESULT CheckMultisampleQualityLevels1(DXGI_FORMAT Format, uint SampleCount, uint Flags, uint* pNumQualityLevels);
	HRESULT CreateDeferredContext2(uint ContextFlags, ID3D11DeviceContext2 *ppDeferredContext);
	void GetImmediateContext2(ID3D11DeviceContext2 *ppImmediateContext);
	void GetResourceTiling(ID3D11Resource pTiledResource, uint *pNumTilesForEntireResource, D3D11_PACKED_MIP_DESC *pPackedMipDesc, D3D11_TILE_SHAPE *pStandardTileShapeForNonPackedMips, uint *pNumSubresourceTilings, uint FirstSubresourceTilingToGet, D3D11_SUBRESOURCE_TILING *pSubresourceTilingsForNonPackedMips);
}

mixin(uuid!(ID3D11DeviceContext2, "420d5b32-b90c-4da4-bef0-359f6a24a83a"));
public interface ID3D11DeviceContext2 : ID3D11DeviceContext1
{
extern(Windows):
	void UpdateTiles(ID3D11Resource pDestTiledResource, const(D3D11_TILED_RESOURCE_COORDINATE) *pDestTileRegionStartCoordinate, const(D3D11_TILE_REGION_SIZE) *pDestTileRegionSize, const(void) *pSourceTileData, uint Flags);
	HRESULT CopyTileMappings(ID3D11Resource pDestTiledResource, const(D3D11_TILED_RESOURCE_COORDINATE) *pDestRegionStartCoord, ID3D11Resource pSourceTiledResource, const(D3D11_TILED_RESOURCE_COORDINATE) *pSourceRegionStartCoord, const(D3D11_TILE_REGION_SIZE) *pTileRegionSize, uint Flags);
	void CopyTiles(ID3D11Resource TiledResource, const(D3D11_TILED_RESOURCE_COORDINATE) *pTileRegionStartCoord, const D3D11_TILE_REGION_SIZE *pTileRegionSize, ID3D11Buffer pBuffer, ulong BufferStartOffsetInBytes, uint Flags);
	HRESULT ResizeTilePool(ID3D11Buffer pTilePool, ulong NewSizeInBytes);
	void TiledResourceBarrier(ID3D11DeviceChild pTiledResourceOrViewAccessBeforeBarrier, ID3D11DeviceChild pTiledResourceOrViewAccessAfterBarrier);
	HRESULT UpdateTileMappings(ID3D11Resource pTiledResource, uint NumTiledResourceRegions, const(D3D11_TILED_RESOURCE_COORDINATE) *pTiledResourceRegionStartCoordinates, const(D3D11_TILE_REGION_SIZE) *pTiledResourceRegionSizes, ID3D11Buffer pTilePool, uint NumRanges, const(uint) *pRangeFlags, const(uint) *pTilePoolStartOffsets, const(uint) *pRangeTileCounts, uint Flags);
}

//
// Resources D3D11
//

uint D3D11CalcSubresource(uint MipSlice, uint ArraySlice, uint MipLevels ) { return MipSlice + ArraySlice * MipLevels; }

//
// Enumerations
//

public enum D3D11_BIND_FLAG : int { 
	VERTEX_BUFFER     = 0x1L,
	INDEX_BUFFER      = 0x2L,
	CONSTANT_BUFFER   = 0x4L,
	SHADER_RESOURCE   = 0x8L,
	STREAM_OUTPUT     = 0x10L,
	RENDER_TARGET     = 0x20L,
	DEPTH_STENCIL     = 0x40L,
	UNORDERED_ACCESS  = 0x80L,
	DECODER           = 0x200L,
	VIDEO_ENCODER     = 0x400L
}

public enum D3D11_BUFFEREX_SRV_FLAG : int { 
	RAW  = 0x1
}

public enum D3D11_BUFFER_UAV_FLAG : int { 
	RAW      = 0x1,
	APPEND   = 0x2,
	COUNTER  = 0x4
}

public enum D3D11_CPU_ACCESS_FLAG : int { 
	WRITE  = 0x10000L,
	READ   = 0x20000L
}

public enum D3D11_DSV_DIMENSION : int{ 
	UNKNOWN           = 0,
	TEXTURE1D         = 1,
	TEXTURE1DARRAY    = 2,
	TEXTURE2D         = 3,
	TEXTURE2DARRAY    = 4,
	TEXTURE2DMS       = 5,
	TEXTURE2DMSARRAY  = 6
}

public enum D3D11_DSV_FLAG : int { 
	DEPTH    = 0x1L,
	STENCIL  = 0x2L
}

public enum D3D11_MAP : int { 
	READ                = 1,
	WRITE               = 2,
	READ_WRITE          = 3,
	WRITE_DISCARD       = 4,
	WRITE_NO_OVERWRITE  = 5
}

public enum D3D11_MAP_FLAG : int { 
	D3D11_MAP_FLAG_DO_NOT_WAIT  = 0x100000L
}

public enum D3D11_RESOURCE_DIMENSION : int { 
	UNKNOWN    = 0,
	BUFFER     = 1,
	TEXTURE1D  = 2,
	TEXTURE2D  = 3,
	TEXTURE3D  = 4
}

public enum D3D11_RESOURCE_MISC_FLAG : int { 
	GENERATE_MIPS                    = 0x1L,
	SHARED                           = 0x2L,
	TEXTURECUBE                      = 0x4L,
	DRAWINDIRECT_ARGS                = 0x10L,
	BUFFER_ALLOW_RAW_VIEWS           = 0x20L,
	BUFFER_STRUCTURED                = 0x40L,
	RESOURCE_CLAMP                   = 0x80L,
	SHARED_KEYEDMUTEX                = 0x100L,
	GDI_COMPATIBLE                   = 0x200L,
	SHARED_NTHANDLE                  = 0x800L,
	RESTRICTED_CONTENT               = 0x1000L,
	RESTRICT_SHARED_RESOURCE         = 0x2000L,
	RESTRICT_SHARED_RESOURCE_DRIVER  = 0x4000L,
	GUARDED                          = 0x8000L,
	TILE_POOL                        = 0x20000L,
	TILED                            = 0x40000L
}

public enum D3D11_RTV_DIMENSION : int { 
	UNKNOWN           = 0,
	BUFFER            = 1,
	TEXTURE1D         = 2,
	TEXTURE1DARRAY    = 3,
	TEXTURE2D         = 4,
	TEXTURE2DARRAY    = 5,
	TEXTURE2DMS       = 6,
	TEXTURE2DMSARRAY  = 7,
	TEXTURE3D         = 8
}

public enum D3D11_SRV_DIMENSION : int { 
	UNKNOWN           = 0,
	BUFFER            = 1,
	TEXTURE1D         = 2,
	TEXTURE1DARRAY    = 3,
	TEXTURE2D         = 4,
	TEXTURE2DARRAY    = 5,
	TEXTURE2DMS       = 6,
	TEXTURE2DMSARRAY  = 7,
	TEXTURE3D         = 8,
	TEXTURECUBE       = 9,
	TEXTURECUBEARRAY  = 10,
	BUFFEREX          = 11
}

public enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS : int { 
	STANDARD_MULTISAMPLE_PATTERN  = 0xffffffff,
	CENTER_MULTISAMPLE_PATTERN    = 0xfffffffe
}

public enum D3D11_UAV_DIMENSION : int { 
	UNKNOWN         = 0,
	BUFFER          = 1,
	TEXTURE1D       = 2,
	TEXTURE1DARRAY  = 3,
	TEXTURE2D       = 4,
	TEXTURE2DARRAY  = 5,
	TEXTURE3D       = 8
}

public enum D3D11_USAGE : int { 
	DEFAULT    = 0,
	IMMUTABLE  = 1,
	DYNAMIC    = 2,
	STAGING    = 3
}

public enum D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG : int{ 
	TILED_RESOURCE  = 0x1
}

public enum D3D11_TILE_COPY_FLAG : int { 
	NO_OVERWRITE                              = 0x1,
	LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE  = 0x2,
	SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER  = 0x4
}

public enum D3D11_TILE_MAPPING_FLAG : int { 
	NO_OVERWRITE  = 0x1
}

public enum D3D11_TILE_RANGE_FLAG : int { 
	NULL               = 0x1,
	SKIP               = 0x2,
	REUSE_SINGLE_TILE  = 0x4
}

//
// Structures
//

public struct D3D11_BUFFER_DESC {
	uint ByteWidth;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
	uint StructureByteStride;
}

public struct D3D11_BUFFER_RTV {
	union {
		uint FirstElement;
		uint ElementOffset;
	};
	union {
		uint NumElements;
		uint ElementWidth;
	};
}

public struct D3D11_BUFFER_SRV {
	union {
		uint FirstElement;
		uint ElementOffset;
	};
	union {
		uint NumElements;
		uint ElementWidth;
	};
}

public struct D3D11_BUFFER_UAV {
	uint FirstElement;
	uint NumElements;
	uint Flags;
}

public struct D3D11_BUFFEREX_SRV {
	uint FirstElement;
	uint NumElements;
	uint Flags;
}

public struct D3D11_DEPTH_STENCIL_VIEW_DESC {
	DXGI_FORMAT         Format;
	D3D11_DSV_DIMENSION ViewDimension;
	uint                Flags;
	union {
		D3D11_TEX1D_DSV         Texture1D;
		D3D11_TEX1D_ARRAY_DSV   Texture1DArray;
		D3D11_TEX2D_DSV         Texture2D;
		D3D11_TEX2D_ARRAY_DSV   Texture2DArray;
		D3D11_TEX2DMS_DSV       Texture2DMS;
		D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
	};
}

public struct D3D11_MAPPED_SUBRESOURCE {
	void *pData;
	uint RowPitch;
	uint DepthPitch;
}

public struct D3D11_RENDER_TARGET_VIEW_DESC {
	DXGI_FORMAT         Format;
	D3D11_RTV_DIMENSION ViewDimension;
	union {
		D3D11_BUFFER_RTV        Buffer;
		D3D11_TEX1D_RTV         Texture1D;
		D3D11_TEX1D_ARRAY_RTV   Texture1DArray;
		D3D11_TEX2D_RTV         Texture2D;
		D3D11_TEX2D_ARRAY_RTV   Texture2DArray;
		D3D11_TEX2DMS_RTV       Texture2DMS;
		D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
		D3D11_TEX3D_RTV         Texture3D;
	};
}

public struct D3D11_SHADER_RESOURCE_VIEW_DESC {
	DXGI_FORMAT         Format;
	D3D11_SRV_DIMENSION ViewDimension;
	union {
		D3D11_BUFFER_SRV        Buffer;
		D3D11_TEX1D_SRV         Texture1D;
		D3D11_TEX1D_ARRAY_SRV   Texture1DArray;
		D3D11_TEX2D_SRV         Texture2D;
		D3D11_TEX2D_ARRAY_SRV   Texture2DArray;
		D3D11_TEX2DMS_SRV       Texture2DMS;
		D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
		D3D11_TEX3D_SRV         Texture3D;
		D3D11_TEXCUBE_SRV       TextureCube;
		D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
		D3D11_BUFFEREX_SRV      BufferEx;
	};
}

public struct D3D11_SUBRESOURCE_DATA {
	const void *pSysMem;
	uint SysMemPitch;
	uint SysMemSlicePitch;
}

public struct D3D11_TEX1D_ARRAY_DSV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX1D_ARRAY_RTV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX1D_ARRAY_SRV {
	uint MostDetailedMip;
	uint MipLevels;
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX1D_ARRAY_UAV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX1D_DSV {
	uint MipSlice;
}

public struct D3D11_TEX1D_RTV {
	uint MipSlice;
}

public struct D3D11_TEX1D_SRV {
	uint MostDetailedMip;
	uint MipLevels;
}

public struct D3D11_TEX1D_UAV {
	uint MipSlice;
}

public struct D3D11_TEX2D_ARRAY_DSV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX2D_ARRAY_RTV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX2D_ARRAY_SRV {
	uint MostDetailedMip;
	uint MipLevels;
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX2D_ARRAY_UAV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX2D_DSV {
	uint MipSlice;
}

public struct D3D11_TEX2D_RTV {
	uint MipSlice;
}

public struct D3D11_TEX2D_SRV {
	uint MostDetailedMip;
	uint MipLevels;
}

public struct D3D11_TEX2D_UAV {
	uint MipSlice;
}

public struct D3D11_TEX2DMS_ARRAY_DSV {
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX2DMS_ARRAY_RTV {
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX2DMS_ARRAY_SRV {
	uint FirstArraySlice;
	uint ArraySize;
}

public struct D3D11_TEX2DMS_DSV {
	uint UnusedField_NothingToDefine;
}

public struct D3D11_TEX2DMS_RTV {
	uint UnusedField_NothingToDefine;
}

public struct D3D11_TEX2DMS_SRV {
	uint UnusedField_NothingToDefine;
}

public struct D3D11_TEX3D_RTV {
	uint MipSlice;
	uint FirstWSlice;
	uint WSize;
}

public struct D3D11_TEX3D_SRV {
	uint MostDetailedMip;
	uint MipLevels;
}

public struct D3D11_TEX3D_UAV {
	uint MipSlice;
	uint FirstWSlice;
	uint WSize;
}

public struct D3D11_TEXCUBE_ARRAY_SRV {
	uint MostDetailedMip;
	uint MipLevels;
	uint First2DArrayFace;
	uint NumCubes;
}

public struct D3D11_TEXCUBE_SRV {
	uint MostDetailedMip;
	uint MipLevels;
}

public struct D3D11_TEXTURE1D_DESC {
	uint Width;
	uint MipLevels;
	uint ArraySize;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
}

public struct D3D11_TEXTURE2D_DESC {
	uint Width;
	uint Height;
	uint MipLevels;
	uint ArraySize;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
}

public struct D3D11_TEXTURE3D_DESC {
	uint Width;
	uint Height;
	uint Depth;
	uint MipLevels;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
}

public struct D3D11_PACKED_MIP_DESC {
	ubyte NumStandardMips;
	ubyte NumPackedMips;
	uint NumTilesForPackedMips;
	uint StartTileIndexInOverallResource;
}

public struct D3D11_SUBRESOURCE_TILING {
	uint WidthInTiles;
	ushort HeightInTiles;
	ushort DepthInTiles;
	uint StartTileIndexInOverallResource;
}

public struct D3D11_TILE_REGION_SIZE {
	uint NumTiles;
	bool bUseBox;
	uint Width;
	ushort Height;
	ushort Depth;
}

public struct D3D11_TILED_RESOURCE_COORDINATE {
	uint X;
	uint Y;
	uint Z;
	uint Subresource;
}

public struct D3D11_TILE_SHAPE {
	uint WidthInTexels;
	uint HeightInTexels;
	uint DepthInTexels;
}

public struct D3D11_UNORDERED_ACCESS_VIEW_DESC {
	DXGI_FORMAT         Format;
	D3D11_UAV_DIMENSION ViewDimension;
	union {
		D3D11_BUFFER_UAV      Buffer;
		D3D11_TEX1D_UAV       Texture1D;
		D3D11_TEX1D_ARRAY_UAV Texture1DArray;
		D3D11_TEX2D_UAV       Texture2D;
		D3D11_TEX2D_ARRAY_UAV Texture2DArray;
		D3D11_TEX3D_UAV       Texture3D;
	};
}

//
// Interfaces
//

mixin(uuid!(ID3D11Buffer, "48570b85-d1ee-4fcd-a250-eb350722b037"));
public interface ID3D11Buffer : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_BUFFER_DESC *pDesc);
}

mixin(uuid!(ID3D11Resource, "dc8e63f3-d12b-4952-b47b-5e45026a862d"));
public interface ID3D11Resource : ID3D11DeviceChild
{
extern(Windows):
	uint GetEvictionPriority();
	void GetType(D3D11_RESOURCE_DIMENSION *rType);
	void SetEvictionPriority(uint EvictionPriority);
}

mixin(uuid!(ID3D11Texture1D, "f8fb5c27-c6b3-4f75-a4c8-439af2ef564c"));
public interface ID3D11Texture1D : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_TEXTURE1D_DESC *pDesc);
}

mixin(uuid!(ID3D11Texture2D, "6f15aaf2-d208-4e89-9ab4-489535d34f9c"));
public interface ID3D11Texture2D : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_TEXTURE2D_DESC *pDesc);
}

mixin(uuid!(ID3D11Texture3D, "037e866e-f56d-4357-a8af-9dabbe6e250e"));
public interface ID3D11Texture3D : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_TEXTURE3D_DESC *pDesc);
}

mixin(uuid!(ID3D11DepthStencilView, "9fdac92a-1876-48c3-afad-25b94f84a9b6"));
public interface ID3D11DepthStencilView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11RenderTargetView, "dfdba067-0b8d-4865-875b-d7b4516cc164"));
public interface ID3D11RenderTargetView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_RENDER_TARGET_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11ShaderResourceView, "b0e06fe0-8192-4e1a-b1ca-36d7414710b2"));
public interface ID3D11ShaderResourceView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11UnorderedAccessView, "28acf509-7f5c-48f6-8611-f316010a6380"));
public interface ID3D11UnorderedAccessView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11View, "839d1216-bb2e-412b-b7f4-a9dbebe08ed1"));
public interface ID3D11View : ID3D11DeviceChild
{
extern(Windows):
	void GetResource(ID3D11Resource **ppResource);
}

//
// Shaders D3D11
//

//
// Enumerations
//

public enum D3D11_CBUFFER_TYPE : int { 
	CBUFFER,
	TBUFFER,
	INTERFACE_POINTERS,
	RESOURCE_BIND_INFO
}

public enum D3D_PARAMETER_FLAGS : int { 
	NONE         = 0x00000000,
	IN           = 0x00000001,
	OUT          = 0x00000002,
	FORCE_DWORD  = 0x7fffffff
}

public enum D3D11_RESOURCE_RETURN_TYPE : int { 
	UNORM      = 1,
	SNORM      = 2,
	SINT       = 3,
	UINT       = 4,
	FLOAT      = 5,
	MIXED      = 6,
	DOUBLE     = 7,
	CONTINUED  = 8
}

public enum D3D11_SHADER_VERSION_TYPE : int { 
	PIXEL_SHADER     = 0,
	VERTEX_SHADER    = 1,
	GEOMETRY_SHADER  = 2,
	HULL_SHADER      = 3,
	DOMAIN_SHADER    = 4,
	COMPUTE_SHADER   = 5
}

public enum D3D11_TESSELLATOR_DOMAIN : int { 
	UNDEFINED  = 0,
	ISOLINE    = 1,
	TRI        = 2,
	QUAD       = 3
}

public enum D3D11_TESSELLATOR_PARTITIONING : int { 
	UNDEFINED        = 0,
	INTEGER          = 1,
	POW2             = 2,
	FRACTIONAL_ODD   = 3,
	FRACTIONAL_EVEN  = 4
}

public enum D3D11_TESSELLATOR_OUTPUT_PRIMITIVE : int { 
	UNDEFINED     = 0,
	POINT         = 1,
	LINE          = 2,
	TRIANGLE_CW   = 3,
	TRIANGLE_CCW  = 4
}

public enum D3D11_SHADER_TYPE : int { 
	VERTEX_SHADER    = 1,
	HULL_SHADER      = 2,
	DOMAIN_SHADER    = 3,
	GEOMETRY_SHADER  = 4,
	PIXEL_SHADER     = 5,
	COMPUTE_SHADER   = 6
}

public enum D3D11_TRACE_GS_INPUT_PRIMITIVE { 
	UNDEFINED     = 0,
	POINT         = 1,
	LINE          = 2,
	TRIANGLE      = 3,
	LINE_ADJ      = 6,
	TRIANGLE_ADJ  = 7
}

public enum D3D11_TRACE_REGISTER_TYPE { 
	OUTPUT_NULL_REGISTER                         = 0,
	INPUT_REGISTER                               = ( OUTPUT_NULL_REGISTER + 1 ),
	INPUT_PRIMITIVE_ID_REGISTER                  = ( INPUT_REGISTER + 1 ),
	IMMEDIATE_CONSTANT_BUFFER                    = ( INPUT_PRIMITIVE_ID_REGISTER + 1 ),
	TEMP_REGISTER                                = ( IMMEDIATE_CONSTANT_BUFFER + 1 ),
	INDEXABLE_TEMP_REGISTER                      = ( TEMP_REGISTER + 1 ),
	OUTPUT_REGISTER                              = ( INDEXABLE_TEMP_REGISTER + 1 ),
	OUTPUT_DEPTH_REGISTER                        = ( OUTPUT_REGISTER + 1 ),
	CONSTANT_BUFFER                              = ( OUTPUT_DEPTH_REGISTER + 1 ),
	IMMEDIATE32                                  = ( CONSTANT_BUFFER + 1 ),
	SAMPLER                                      = ( IMMEDIATE32 + 1 ),
	RESOURCE                                     = ( SAMPLER + 1 ),
	RASTERIZER                                   = ( RESOURCE + 1 ),
	OUTPUT_COVERAGE_MASK                         = ( RASTERIZER + 1 ),
	STREAM                                       = ( OUTPUT_COVERAGE_MASK + 1 ),
	THIS_POINTER                                 = ( STREAM + 1 ),
	OUTPUT_CONTROL_POINT_ID_REGISTER             = ( THIS_POINTER + 1 ),
	INPUT_FORK_INSTANCE_ID_REGISTER              = ( OUTPUT_CONTROL_POINT_ID_REGISTER + 1 ),
	INPUT_JOIN_INSTANCE_ID_REGISTER              = ( INPUT_FORK_INSTANCE_ID_REGISTER + 1 ),
	INPUT_CONTROL_POINT_REGISTER                 = ( INPUT_JOIN_INSTANCE_ID_REGISTER + 1 ),
	OUTPUT_CONTROL_POINT_REGISTER                = ( INPUT_CONTROL_POINT_REGISTER + 1 ),
	INPUT_PATCH_CONSTANT_REGISTER                = ( OUTPUT_CONTROL_POINT_REGISTER + 1 ),
	INPUT_DOMAIN_POINT_REGISTER                  = ( INPUT_PATCH_CONSTANT_REGISTER + 1 ),
	UNORDERED_ACCESS_VIEW                        = ( INPUT_DOMAIN_POINT_REGISTER + 1 ),
	THREAD_GROUP_SHARED_MEMORY                   = ( UNORDERED_ACCESS_VIEW + 1 ),
	INPUT_THREAD_ID_REGISTER                     = ( THREAD_GROUP_SHARED_MEMORY + 1 ),
	INPUT_THREAD_GROUP_ID_REGISTER               = ( INPUT_THREAD_ID_REGISTER + 1 ),
	INPUT_THREAD_ID_IN_GROUP_REGISTER            = ( INPUT_THREAD_GROUP_ID_REGISTER + 1 ),
	INPUT_COVERAGE_MASK_REGISTER                 = ( INPUT_THREAD_ID_IN_GROUP_REGISTER + 1 ),
	INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER  = ( INPUT_COVERAGE_MASK_REGISTER + 1 ),
	INPUT_GS_INSTANCE_ID_REGISTER                = ( INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER + 1 ),
	OUTPUT_DEPTH_GREATER_EQUAL_REGISTER          = ( INPUT_GS_INSTANCE_ID_REGISTER + 1 ),
	OUTPUT_DEPTH_LESS_EQUAL_REGISTER             = ( OUTPUT_DEPTH_GREATER_EQUAL_REGISTER + 1 ),
	IMMEDIATE64                                  = ( OUTPUT_DEPTH_LESS_EQUAL_REGISTER + 1 ),
	INPUT_CYCLE_COUNTER_REGISTER                 = ( IMMEDIATE64 + 1 ),
	INTERFACE_POINTER                            = ( INPUT_CYCLE_COUNTER_REGISTER + 1 )
}

//
// Structures
//

public struct D3D11_CLASS_INSTANCE_DESC {
	uint InstanceId;
	uint InstanceIndex;
	uint TypeId;
	uint ConstantBuffer;
	uint BaseConstantBufferOffset;
	uint BaseTexture;
	uint BaseSampler;
	bool Created;
}

public struct D3D11_FUNCTION_DESC {
	uint Version;
	const(char)* Creator;
	uint Flags;
	uint ConstantBuffers;
	uint BoundResources;
	uint InstructionCount;
	uint TempRegisterCount;
	uint TempArrayCount;
	uint DefCount;
	uint DclCount;
	uint TextureNormalInstructions;
	uint TextureLoadInstructions;
	uint TextureCompInstructions;
	uint TextureBiasInstructions;
	uint TextureGradientInstructions;
	uint FloatInstructionCount;
	uint IntInstructionCount;
	uint UintInstructionCount;
	uint StaticFlowControlCount;
	uint DynamicFlowControlCount;
	uint MacroInstructionCount;
	uint ArrayInstructionCount;
	uint MovInstructionCount;
	uint MovcInstructionCount;
	uint ConversionInstructionCount;
	uint BitwiseInstructionCount;
	D3D_FEATURE_LEVEL MinFeatureLevel;
	ulong RequiredFeatureFlags;
	const(char)* Name;
	int FunctionParameterCount;
	bool HasReturn;
	bool Has10Level9VertexShader;
	bool Has10Level9PixelShader;
}

public struct D3D11_LIBRARY_DESC {
	const(char)* Creator;
	uint Flags;
	uint FunctionCount;
}

public struct D3D11_PARAMETER_DESC {
	const(char*) Name;
	const(char*) SemanticName;
	D3D_SHADER_VARIABLE_TYPE Type;
	D3D_SHADER_VARIABLE_CLASS Class;
	uint Rows;
	uint Columns;
	D3D_INTERPOLATION_MODE InterpolationMode;
	D3D_PARAMETER_FLAGS Flags;
	uint FirstInRegister;
	uint FirstInComponent;
	uint FirstOutRegister;
	uint FirstOutComponent;
}

public struct D3D11_SHADER_BUFFER_DESC {
	const(char)* Name;
	D3D_CBUFFER_TYPE Type;
	uint Variables;
	uint Size;
	uint uFlags;
}

public struct D3D11_SHADER_DESC {
	uint Version;
	const(char)* Creator;
	uint Flags;
	uint ConstantBuffers;
	uint BoundResources;
	uint InputParameters;
	uint OutputParameters;
	uint InstructionCount;
	uint TempRegisterCount;
	uint TempArrayCount;
	uint DefCount;
	uint DclCount;
	uint TextureNormalInstructions;
	uint TextureLoadInstructions;
	uint TextureCompInstructions;
	uint TextureBiasInstructions;
	uint TextureGradientInstructions;
	uint FloatInstructionCount;
	uint IntInstructionCount;
	uint UintInstructionCount;
	uint StaticFlowControlCount;
	uint DynamicFlowControlCount;
	uint MacroInstructionCount;
	uint ArrayInstructionCount;
	uint CutInstructionCount;
	uint EmitInstructionCount;
	uint GSOutputTopology;
	uint GSMaxOutputVertexCount;
	D3D_PRIMITIVE InputPrimitive;
	uint PatchConstantParameters;
	uint cGSInstanceCount;
	uint cControlPoints;
	D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
	D3D_TESSELLATOR_PARTITIONING HSPartitioning;
	D3D_TESSELLATOR_DOMAIN TessellatorDomain;
	uint cBarrierInstructions;
	uint cInterlockedInstructions;
	uint cTextureStoreInstructions;
}

public struct D3D11_SHADER_INPUT_BIND_DESC {
	const(char)* Name;
	D3D_SHADER_INPUT_TYPE Type;
	uint BindPoint;
	uint BindCount;
	uint uFlags;
	D3D_RESOURCE_RETURN_TYPE ReturnType;
	D3D_SRV_DIMENSION Dimension;
	uint NumSamples;
}

public struct D3D11_SHADER_TYPE_DESC {
	D3D_SHADER_VARIABLE_CLASS Class;
	D3D_SHADER_VARIABLE_TYPE Type;
	uint Rows;
	uint Columns;
	uint Elements;
	uint Members;
	uint Offset;
	const(char)* Name;
}

public struct D3D11_SHADER_VARIABLE_DESC {
	const(char)* Name;
	uint StartOffset;
	uint Size;
	uint uFlags;
	void* DefaultValue;
}

public struct D3D11_SIGNATURE_PARAMETER_DESC {
	const(char)* SemanticName;
	uint SemanticIndex;
	uint Register;
	D3D_NAME SystemValueType;
	D3D_REGISTER_COMPONENT_TYPE ComponentType;
	ubyte Mask;
	ubyte ReadWriteMask;
	uint Stream;
	D3D_MIN_PRECISION MinPrecision;
}

alias ubyte D3D11_TRACE_COMPONENT_MASK;
alias ushort D3D11_TRACE_MISC_OPERATIONS_MASK;

public struct D3D11_COMPUTE_SHADER_TRACE_DESC {
	ulong Invocation;
	uint[3] ThreadIDInGroup;
	uint[3] ThreadGroupID;
}

public struct D3D11_DOMAIN_SHADER_TRACE_DESC {
	ulong Invocation;
}

public struct D3D11_GEOMETRY_SHADER_TRACE_DESC {
	ulong Invocation;
}

public struct D3D11_HULL_SHADER_TRACE_DESC {
	ulong Invocation;
}

public struct D3D11_PIXEL_SHADER_TRACE_DESC {
	ulong Invocation;
	int X;
	int Y;
	ulong SampleMask;
}

public struct D3D11_SHADER_TRACE_DESC {
	D3D11_SHADER_TYPE Type;
	uint Flags;
	union {
		D3D11_VERTEX_SHADER_TRACE_DESC   VertexShaderTraceDesc;
		D3D11_HULL_SHADER_TRACE_DESC     HullShaderTraceDesc;
		D3D11_DOMAIN_SHADER_TRACE_DESC   DomainShaderTraceDesc;
		D3D11_GEOMETRY_SHADER_TRACE_DESC GeometryShaderTraceDesc;
		D3D11_PIXEL_SHADER_TRACE_DESC    PixelShaderTraceDesc;
		D3D11_COMPUTE_SHADER_TRACE_DESC  ComputeShaderTraceDesc;
	};
}

public struct D3D11_TRACE_REGISTER {
	D3D11_TRACE_REGISTER_TYPE RegType;
	union {		
		ushort Index1D;		
		ushort[2] Index2D;
	};
	ubyte OperandIndex;
	ubyte Flags;
}

public struct D3D11_TRACE_STATS {
	D3D11_SHADER_TRACE_DESC TraceDesc;
	ubyte NumInvocationsInStamp;
	ubyte TargetStampIndex;
	uint NumTraceSteps;
	D3D11_TRACE_COMPONENT_MASK[32] InputMask;
	D3D11_TRACE_COMPONENT_MASK[32] OutputMask;
	ushort NumTemps;
	ushort MaxIndexableTempIndex;
	ushort[4096] IndexableTempSize;
	ushort ImmediateConstantBufferSize;
	uint[4][2] PixelPosition;
	ulong[4] PixelCoverageMask;
	ulong[4] PixelDiscardedMask;
	ulong[4] PixelCoverageMaskAfterShader;
	ulong[4] PixelCoverageMaskAfterA2CSampleMask;
	ulong[4] PixelCoverageMaskAfterA2CSampleMaskDepth;
	ulong[4] PixelCoverageMaskAfterA2CSampleMaskDepthStencil;
	bool PSOutputsDepth;
	bool PSOutputsMask;
	D3D11_TRACE_GS_INPUT_PRIMITIVE GSInputPrimitive;
	bool GSInputsPrimitiveID;
	D3D11_TRACE_COMPONENT_MASK[32] HSOutputPatchConstantMask;
	D3D11_TRACE_COMPONENT_MASK[32] DSInputPatchConstantMask;
}

public struct D3D11_TRACE_STEP {
	uint ID;
	bool InstructionActive;
	ubyte NumRegistersWritten;
	ubyte NumRegistersRead;
	D3D11_TRACE_MISC_OPERATIONS_MASK MiscOperations;
	uint OpcodeType;
	uint CurrentGlobalCycle;
}

public struct D3D11_TRACE_VALUE {
	uint[4] Bits;
	D3D11_TRACE_COMPONENT_MASK ValidMask;
}

public struct D3D11_VERTEX_SHADER_TRACE_DESC {
	ulong Invocation;
}

//
// Interfaces
//

mixin(uuid!(ID3D11ClassInstance, "a6cd7faa-b0b7-4a2f-9436-8662a65797cb"));
public interface ID3D11ClassInstance : ID3D11DeviceChild
{
extern(Windows):
	void GetClassLinkage(ID3D11ClassLinkage *ppLinkage);
	void GetDesc(D3D11_CLASS_INSTANCE_DESC *pDesc);
	void GetInstanceName(wchar* pInstanceName, uint *pBufferLength);
	void GetTypeName(const(char)* pTypeName, uint *pBufferLength);
}

mixin(uuid!(ID3D11ClassLinkage, "ddf57cba-9543-46e4-a12b-f207a0fe7fed"));
public interface ID3D11ClassLinkage : ID3D11DeviceChild
{
extern(Windows):
	HRESULT CreateClassInstance(const(char)* pszClassTypeName, uint ConstantBufferOffset, uint ConstantVectorOffset, uint TextureOffset, uint SamplerOffset, ID3D11ClassInstance *ppInstance);
	HRESULT GetClassInstance(const(wchar)* pClassInstanceName, uint InstanceIndex, ID3D11ClassInstance *ppInstance);
}

mixin(uuid!(ID3D11ComputeShader, "4f5b196e-c2bd-495e-bd01-1fded38e4969"));
public interface ID3D11ComputeShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11DomainShader, "f582c508-0f36-490c-9977-31eece268cfa"));
public interface ID3D11DomainShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11FunctionLinkingGraph, "54133220-1CE8-43D3-8236-9855C5CEECFF"));
public interface ID3D11FunctionLinkingGraph : IUnknown
{
extern(Windows):
	HRESULT CallFunction(const(char)* pModuleInstanceNamespace, ID3D11ModuleInstance pModuleWithFunctionPrototype, const(char)* pFunctionName, ID3D11LinkingNode *ppCallNode);
	HRESULT CreateModuleInstance(ID3D11ModuleInstance *ppModuleInstance, ID3DBlob *ppErrorBuffer);
	HRESULT GenerateHlsl(uint uFlags, ID3DBlob *ppBuffer);
	HRESULT GetLastError(ID3DBlob *ppErrorBuffer);
	HRESULT PassValue(ID3D11LinkingNode pSrcNode, int SrcParameterIndex, ID3D11LinkingNode pDstNode, int DstParameterIndex);
	HRESULT PassValueWithSwizzle(ID3D11LinkingNode pSrcNode, int SrcParameterIndex, const(char)* pSrcSwizzle, ID3D11LinkingNode pDstNode, int DstParameterIndex, const(char)* pDstSwizzle);
	HRESULT SetInputSignature(const D3D11_PARAMETER_DESC *pInputParameters, uint cInputParameters, ID3D11LinkingNode *ppInputNode);
	HRESULT SetOutputSignature(const D3D11_PARAMETER_DESC *pOutputParameters, uint cOutputParameters, ID3D11LinkingNode *ppOutputNode);
}
extern(Windows) HRESULT D3DCreateFunctionLinkingGraph(uint uFlags, ID3D11FunctionLinkingGraph *ppFunctionLinkingGraph);


mixin(uuid!(ID3D11FunctionReflection, "207BCECB-D683-4A06-A8A3-9B149B9F73A4"));
public interface ID3D11FunctionReflection
{
extern(Windows):
	ID3D11ShaderReflectionConstantBuffer GetConstantBufferByIndex(uint BufferIndex);
	ID3D11ShaderReflectionConstantBuffer GetConstantBufferByName(const(char*) Name);
	HRESULT GetDesc(D3D11_FUNCTION_DESC *pDesc);
	ID3D11FunctionParameterReflection GetFunctionParameter(int ParameterIndex);
	HRESULT GetResourceBindingDesc(uint ResourceIndex, D3D11_SHADER_INPUT_BIND_DESC *pDesc);
	HRESULT GetResourceBindingDescByName(const(char)* Name, D3D11_SHADER_INPUT_BIND_DESC *pDesc);
	ID3D11ShaderReflectionVariable* GetVariableByName(const(char)** Name);
}

mixin(uuid!(ID3D11FunctionParameterReflection, "42757488-334F-47FE-982E-1A65D08CC462"));
public interface ID3D11FunctionParameterReflection
{
extern(Windows):
	HRESULT GetDesc(D3D11_PARAMETER_DESC *pDesc);
}

mixin(uuid!(ID3D11GeometryShader, "38325b96-effb-4022-ba02-2e795b70275c"));
public interface ID3D11GeometryShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11HullShader, "8e5c6061-628a-4c8e-8264-bbe45cb3d5dd"));
public interface ID3D11HullShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11LibraryReflection, "54384F1B-5B3E-4BB7-AE01-60BA3097CBB6"));
public interface ID3D11LibraryReflection : IUnknown
{
extern(Windows):
	HRESULT GetDesc(D3D11_LIBRARY_DESC *pDesc);
	ID3D11FunctionReflection GetFunctionByIndex(int FunctionIndex);
}
extern(Windows) HRESULT D3DReflectLibrary(const(void)* pSrcData, uint SrcDataSize, IID* riid, void** ppReflector);

mixin(uuid!(ID3D11Linker, "59A6CD0E-E10D-4C1F-88C0-63ABA1DAF30E"));
public interface ID3D11Linker : IUnknown
{
extern(Windows):
	HRESULT AddClipPlaneFromCBuffer(uint uCBufferSlot, uint uCBufferEntry);
	HRESULT Link(ID3D11ModuleInstance pEntry, const(char)* pEntryName, const(char)* pNpTargetNameame, uint uFlags, ID3DBlob *ppShaderBlob, ID3DBlob *ppErrorBuffer);
	HRESULT UseLibrary(ID3D11ModuleInstance pLibraryMI);
}
extern(Windows) HRESULT D3DCreateLinker(ID3D11Linker *ppLinker);

mixin(uuid!(ID3D11LinkingNode, "D80DD70C-8D2F-4751-94A1-03C79B3556DB"));
public interface ID3D11LinkingNode : IUnknown
{
extern(Windows):
}

mixin(uuid!(ID3D11Module, "CAC701EE-80FC-4122-8242-10B39C8CEC34"));
public interface ID3D11Module : IUnknown
{
extern(Windows):
	HRESULT CreateInstance(const(char)* pNamespace, ID3D11ModuleInstance *ppModuleInstance);
}
extern(Windows) HRESULT D3DLoadModule(const(void)* pSrcData, uint cbSrcDataSize, ID3D11Module *ppModule);

mixin(uuid!(ID3D11ModuleInstance, "469E07F7-045A-48D5-AA12-68A478CDF75D"));
public interface ID3D11ModuleInstance : IUnknown
{
extern(Windows):
	HRESULT BindConstantBuffer(uint uSrcSlot, uint uDstSlot, uint cbDstOffset);
	HRESULT BindConstantBufferByName(const(char)* pName, uint uDstSlot, uint cbDstOffset);
	HRESULT BindResource(uint uSrcSlot, uint uDstSlot, uint uCount);
	HRESULT BindResourceAsUnorderedAccessView(uint uSrcSrvSlot, uint uDstUavSlot, uint uCount);
	HRESULT BindResourceAsUnorderedAccessViewByName(const(char)* pSrvName, uint uDstUavSlot, uint uCount);
	HRESULT BindResourceByName(const(char)* pName, uint uDstSlot, uint uCount);
	HRESULT BindSampler(uint uSrcSlot, uint  uDstSlot, uint uCount);
	HRESULT BindSamplerByName(const(char)* pName, uint uDstSlot, uint uCount);
	HRESULT BindUnorderedAccessView(uint uSrcSlot, uint uDstSlot, uint uCount);
	HRESULT BindUnorderedAccessViewByName(const(char)* pName, uint uDstSlot, uint uCount);
}

mixin(uuid!(ID3D11PixelShader, "ea82e40d-51dc-4f33-93d4-db7c9125ae8c"));
public interface ID3D11PixelShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11ShaderReflection, "8d536ca1-0cca-4956-a837-786963755584"));
public interface ID3D11ShaderReflection : IUnknown
{
extern(Windows):
	uint GetBitwiseInstructionCount();
	ID3D11ShaderReflectionConstantBuffer GetConstantBufferByIndex(uint Index);
	ID3D11ShaderReflectionConstantBuffer GetConstantBufferByName(const(char)* Name);
	uint GetConversionInstructionCount();
	HRESULT GetDesc(D3D11_SHADER_DESC *pDesc);
	D3D_PRIMITIVE GetGSInputPrimitive();
	HRESULT GetInputParameterDesc(uint ParameterIndex, D3D11_SIGNATURE_PARAMETER_DESC *pDesc);
	HRESULT GetMinFeatureLevel(D3D_FEATURE_LEVEL *pLevel);
	uint GetMovcInstructionCount();
	uint GetMovInstructionCount();
	uint GetNumInterfaceSlots();
	HRESULT GetOutputParameterDesc(uint ParameterIndex, D3D11_SIGNATURE_PARAMETER_DESC *pDesc);
	HRESULT GetPatchConstantParameterDesc(uint ParameterIndex, D3D11_SIGNATURE_PARAMETER_DESC *pDesc);
	ulong GetRequiresFlags();
	HRESULT GetResourceBindingDesc(uint ResourceIndex, D3D11_SHADER_INPUT_BIND_DESC *pDesc);
	HRESULT GetResourceBindingDescByName(const(char)* Name, D3D11_SHADER_INPUT_BIND_DESC *pDesc);
	uint GetThreadGroupSize(uint *pSizeX, uint *pSizeY, uint *pSizeZ);
	ID3D11ShaderReflectionVariable GetVariableByName(const(char)* *Name);
	BOOL IsSampleFrequencyShader();
}
extern(Windows) HRESULT D3DReflect(const(void)* pSrcData, uint SrcDataSize, IID* pInterface,void **ppReflector);

mixin(uuid!(ID3D11ShaderReflectionConstantBuffer, "EB62D63D-93DD-4318-8AE8-C6F83AD371B8"));
public interface ID3D11ShaderReflectionConstantBuffer
{
extern(Windows):
	HRESULT GetDesc(D3D11_SHADER_BUFFER_DESC *pDesc);
	ID3D11ShaderReflectionVariable GetVariableByIndex(uint Index);
	ID3D11ShaderReflectionVariable GetVariableByName(const(char)* Name);
}

mixin(uuid!(ID3D11ShaderReflectionType, "6E6FFA6A-9BAE-4613-A51E-91652D508C21"));
public interface ID3D11ShaderReflectionType
{
extern(Windows):
	HRESULT GetDesc(D3D11_SHADER_VARIABLE_DESC *pDesc);
	uint GetInterfaceSlot(uint uArrayIndex);
	ID3D11ShaderReflectionType GetType();
}

mixin(uuid!(ID3D11ShaderReflectionVariable, "51F23923-F3E5-4BD1-91CB-606177D8DB4C"));
public interface ID3D11ShaderReflectionVariable
{
extern(Windows):
	HRESULT GetDesc(D3D11_SHADER_BUFFER_DESC *pDesc);
	ID3D11ShaderReflectionVariable GetVariableByIndex(uint Index);
	ID3D11ShaderReflectionVariable GetVariableByName(const(char)* Name);
}

mixin(uuid!(ID3D11VertexShader, "3b301d64-d678-4289-8897-22f8928b72f3"));
public interface ID3D11VertexShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11ShaderTrace, "36b013e6-2811-4845-baa7-d623fe0df104"));
public interface ID3D11ShaderTrace : IUnknown
{
extern(Windows):
	HRESULT GetInitialRegisterContents(D3D11_TRACE_REGISTER *pRegister, D3D11_TRACE_VALUE *pValue);
	HRESULT GetReadRegister(uint stepIndex, uint readRegisterIndex, D3D11_TRACE_REGISTER *pRegister, D3D11_TRACE_VALUE *pValue);
	HRESULT GetStep(uint stepIndex, D3D11_TRACE_STEP *pTraceStep);
	HRESULT GetTraceStats(D3D11_TRACE_STATS *pTraceStats);
	HRESULT GetWrittenRegister(uint stepIndex, uint writtenRegisterIndex, D3D11_TRACE_REGISTER *pRegister, D3D11_TRACE_VALUE *pValue);
	HRESULT PSSelectStamp(uint stampIndex);
	void ResetTrace();
	HRESULT TraceReady(ulong *pTestCount);
}

mixin(uuid!(ID3D11ShaderTraceFactory, "1fbad429-66ab-41cc-9617-667ac10e4459"));
public interface ID3D11ShaderTraceFactory : IUnknown
{
extern(Windows):
	HRESULT CreateShaderTrace(IUnknown *pShader, D3D11_SHADER_TRACE_DESC *pTraceDesc, ID3D11ShaderTrace *ppShaderTrace);
}

//
// Layer D3D11
//

//
// Enumerations
//

public enum D3D11_MESSAGE_CATEGORY : int { 
	APPLICATION_DEFINED    = 0,
	MISCELLANEOUS          = ( APPLICATION_DEFINED + 1 ),
	INITIALIZATION         = ( MISCELLANEOUS + 1 ),
	CLEANUP                = ( INITIALIZATION + 1 ),
	COMPILATION            = ( CLEANUP + 1 ),
	STATE_CREATION         = ( COMPILATION + 1 ),
	STATE_SETTING          = ( STATE_CREATION + 1 ),
	STATE_GETTING          = ( STATE_SETTING + 1 ),
	RESOURCE_MANIPULATION  = ( STATE_GETTING + 1 ),
	EXECUTION              = ( RESOURCE_MANIPULATION + 1 ),
	SHADER                 = ( EXECUTION + 1 )
}

public enum D3D11_MESSAGE_ID : int { 
  UNKNOWN                                                                      = 0,
  DEVICE_IASETVERTEXBUFFERS_HAZARD                                             =  (UNKNOWN + 1 ) ,
  DEVICE_IASETINDEXBUFFER_HAZARD                                               =  (DEVICE_IASETVERTEXBUFFERS_HAZARD + 1 ) ,
  DEVICE_VSSETSHADERRESOURCES_HAZARD                                           =  (DEVICE_IASETINDEXBUFFER_HAZARD + 1 ) ,
  DEVICE_VSSETCONSTANTBUFFERS_HAZARD                                           =  (DEVICE_VSSETSHADERRESOURCES_HAZARD + 1 ) ,
  DEVICE_GSSETSHADERRESOURCES_HAZARD                                           =  (DEVICE_VSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
  DEVICE_GSSETCONSTANTBUFFERS_HAZARD                                           =  (DEVICE_GSSETSHADERRESOURCES_HAZARD + 1 ) ,
  DEVICE_PSSETSHADERRESOURCES_HAZARD                                           =  (DEVICE_GSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
  DEVICE_PSSETCONSTANTBUFFERS_HAZARD                                           =  (DEVICE_PSSETSHADERRESOURCES_HAZARD + 1 ) ,
  DEVICE_OMSETRENDERTARGETS_HAZARD                                             =  (DEVICE_PSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
  DEVICE_SOSETTARGETS_HAZARD                                                   =  (DEVICE_OMSETRENDERTARGETS_HAZARD + 1 ) ,
  STRING_FROM_APPLICATION                                                      =  (DEVICE_SOSETTARGETS_HAZARD + 1 ) ,
  CORRUPTED_THIS                                                               =  (STRING_FROM_APPLICATION + 1 ) ,
  CORRUPTED_PARAMETER1                                                         =  (CORRUPTED_THIS + 1 ) ,
  CORRUPTED_PARAMETER2                                                         =  (CORRUPTED_PARAMETER1 + 1 ) ,
  CORRUPTED_PARAMETER3                                                         =  (CORRUPTED_PARAMETER2 + 1 ) ,
  CORRUPTED_PARAMETER4                                                         =  (CORRUPTED_PARAMETER3 + 1 ) ,
  CORRUPTED_PARAMETER5                                                         =  (CORRUPTED_PARAMETER4 + 1 ) ,
  CORRUPTED_PARAMETER6                                                         =  (CORRUPTED_PARAMETER5 + 1 ) ,
  CORRUPTED_PARAMETER7                                                         =  (CORRUPTED_PARAMETER6 + 1 ) ,
  CORRUPTED_PARAMETER8                                                         =  (CORRUPTED_PARAMETER7 + 1 ) ,
  CORRUPTED_PARAMETER9                                                         =  (CORRUPTED_PARAMETER8 + 1 ) ,
  CORRUPTED_PARAMETER10                                                        =  (CORRUPTED_PARAMETER9 + 1 ) ,
  CORRUPTED_PARAMETER11                                                        =  (CORRUPTED_PARAMETER10 + 1 ) ,
  CORRUPTED_PARAMETER12                                                        =  (CORRUPTED_PARAMETER11 + 1 ) ,
  CORRUPTED_PARAMETER13                                                        =  (CORRUPTED_PARAMETER12 + 1 ) ,
  CORRUPTED_PARAMETER14                                                        =  (CORRUPTED_PARAMETER13 + 1 ) ,
  CORRUPTED_PARAMETER15                                                        =  (CORRUPTED_PARAMETER14 + 1 ) ,
  CORRUPTED_MULTITHREADING                                                     =  (CORRUPTED_PARAMETER15 + 1 ) ,
  MESSAGE_REPORTING_OUTOFMEMORY                                                =  (CORRUPTED_MULTITHREADING + 1 ) ,
  IASETINPUTLAYOUT_UNBINDDELETINGOBJECT                                        =  (MESSAGE_REPORTING_OUTOFMEMORY + 1 ) ,
  IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT                                      =  (IASETINPUTLAYOUT_UNBINDDELETINGOBJECT + 1 ) ,
  IASETINDEXBUFFER_UNBINDDELETINGOBJECT                                        =  (IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
  VSSETSHADER_UNBINDDELETINGOBJECT                                             =  (IASETINDEXBUFFER_UNBINDDELETINGOBJECT + 1 ) ,
  VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT                                    =  (VSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
  VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT                                    =  (VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
  VSSETSAMPLERS_UNBINDDELETINGOBJECT                                           =  (VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
  GSSETSHADER_UNBINDDELETINGOBJECT                                             =  (VSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
  GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT                                    =  (GSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
  GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT                                    =  (GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
  GSSETSAMPLERS_UNBINDDELETINGOBJECT                                           =  (GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
  SOSETTARGETS_UNBINDDELETINGOBJECT                                            =  (GSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
  PSSETSHADER_UNBINDDELETINGOBJECT                                             =  (SOSETTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
  PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT                                    =  (PSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
  PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT                                    =  (PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
  PSSETSAMPLERS_UNBINDDELETINGOBJECT                                           =  (PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
  RSSETSTATE_UNBINDDELETINGOBJECT                                              =  (PSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
  OMSETBLENDSTATE_UNBINDDELETINGOBJECT                                         =  (RSSETSTATE_UNBINDDELETINGOBJECT + 1 ) ,
  OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT                                  =  (OMSETBLENDSTATE_UNBINDDELETINGOBJECT + 1 ) ,
  OMSETRENDERTARGETS_UNBINDDELETINGOBJECT                                      =  (OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT + 1 ) ,
  SETPREDICATION_UNBINDDELETINGOBJECT                                          =  (OMSETRENDERTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
  GETPRIVATEDATA_MOREDATA                                                      =  (SETPREDICATION_UNBINDDELETINGOBJECT + 1 ) ,
  SETPRIVATEDATA_INVALIDFREEDATA                                               =  (GETPRIVATEDATA_MOREDATA + 1 ) ,
  SETPRIVATEDATA_INVALIDIUNKNOWN                                               =  (SETPRIVATEDATA_INVALIDFREEDATA + 1 ) ,
  SETPRIVATEDATA_INVALIDFLAGS                                                  =  (SETPRIVATEDATA_INVALIDIUNKNOWN + 1 ) ,
  SETPRIVATEDATA_CHANGINGPARAMS                                                =  (SETPRIVATEDATA_INVALIDFLAGS + 1 ) ,
  SETPRIVATEDATA_OUTOFMEMORY                                                   =  (SETPRIVATEDATA_CHANGINGPARAMS + 1 ) ,
  CREATEBUFFER_UNRECOGNIZEDFORMAT                                              =  (SETPRIVATEDATA_OUTOFMEMORY + 1 ) ,
  CREATEBUFFER_INVALIDSAMPLES                                                  =  (CREATEBUFFER_UNRECOGNIZEDFORMAT + 1 ) ,
  CREATEBUFFER_UNRECOGNIZEDUSAGE                                               =  (CREATEBUFFER_INVALIDSAMPLES + 1 ) ,
  CREATEBUFFER_UNRECOGNIZEDBINDFLAGS                                           =  (CREATEBUFFER_UNRECOGNIZEDUSAGE + 1 ) ,
  CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS                                      =  (CREATEBUFFER_UNRECOGNIZEDBINDFLAGS + 1 ) ,
  CREATEBUFFER_UNRECOGNIZEDMISCFLAGS                                           =  (CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
  CREATEBUFFER_INVALIDCPUACCESSFLAGS                                           =  (CREATEBUFFER_UNRECOGNIZEDMISCFLAGS + 1 ) ,
  CREATEBUFFER_INVALIDBINDFLAGS                                                =  (CREATEBUFFER_INVALIDCPUACCESSFLAGS + 1 ) ,
  CREATEBUFFER_INVALIDINITIALDATA                                              =  (CREATEBUFFER_INVALIDBINDFLAGS + 1 ) ,
  CREATEBUFFER_INVALIDDIMENSIONS                                               =  (CREATEBUFFER_INVALIDINITIALDATA + 1 ) ,
  CREATEBUFFER_INVALIDMIPLEVELS                                                =  (CREATEBUFFER_INVALIDDIMENSIONS + 1 ) ,
  CREATEBUFFER_INVALIDMISCFLAGS                                                =  (CREATEBUFFER_INVALIDMIPLEVELS + 1 ) ,
  CREATEBUFFER_INVALIDARG_RETURN                                               =  (CREATEBUFFER_INVALIDMISCFLAGS + 1 ) ,
  CREATEBUFFER_OUTOFMEMORY_RETURN                                              =  (CREATEBUFFER_INVALIDARG_RETURN + 1 ) ,
  CREATEBUFFER_NULLDESC                                                        =  (CREATEBUFFER_OUTOFMEMORY_RETURN + 1 ) ,
  CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS                                   =  (CREATEBUFFER_NULLDESC + 1 ) ,
  CREATEBUFFER_LARGEALLOCATION                                                 =  (CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS + 1 ) ,
  CREATETEXTURE1D_UNRECOGNIZEDFORMAT                                           =  (CREATEBUFFER_LARGEALLOCATION + 1 ) ,
  CREATETEXTURE1D_UNSUPPORTEDFORMAT                                            =  (CREATETEXTURE1D_UNRECOGNIZEDFORMAT + 1 ) ,
  CREATETEXTURE1D_INVALIDSAMPLES                                               =  (CREATETEXTURE1D_UNSUPPORTEDFORMAT + 1 ) ,
  CREATETEXTURE1D_UNRECOGNIZEDUSAGE                                            =  (CREATETEXTURE1D_INVALIDSAMPLES + 1 ) ,
  CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS                                        =  (CREATETEXTURE1D_UNRECOGNIZEDUSAGE + 1 ) ,
  CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS                                   =  (CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
  CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS                                        =  (CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
  CREATETEXTURE1D_INVALIDCPUACCESSFLAGS                                        =  (CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
  CREATETEXTURE1D_INVALIDBINDFLAGS                                             =  (CREATETEXTURE1D_INVALIDCPUACCESSFLAGS + 1 ) ,
  CREATETEXTURE1D_INVALIDINITIALDATA                                           =  (CREATETEXTURE1D_INVALIDBINDFLAGS + 1 ) ,
  CREATETEXTURE1D_INVALIDDIMENSIONS                                            =  (CREATETEXTURE1D_INVALIDINITIALDATA + 1 ) ,
  CREATETEXTURE1D_INVALIDMIPLEVELS                                             =  (CREATETEXTURE1D_INVALIDDIMENSIONS + 1 ) ,
  CREATETEXTURE1D_INVALIDMISCFLAGS                                             =  (CREATETEXTURE1D_INVALIDMIPLEVELS + 1 ) ,
  CREATETEXTURE1D_INVALIDARG_RETURN                                            =  (CREATETEXTURE1D_INVALIDMISCFLAGS + 1 ) ,
  CREATETEXTURE1D_OUTOFMEMORY_RETURN                                           =  (CREATETEXTURE1D_INVALIDARG_RETURN + 1 ) ,
  CREATETEXTURE1D_NULLDESC                                                     =  (CREATETEXTURE1D_OUTOFMEMORY_RETURN + 1 ) ,
  CREATETEXTURE1D_LARGEALLOCATION                                              =  (CREATETEXTURE1D_NULLDESC + 1 ) ,
  CREATETEXTURE2D_UNRECOGNIZEDFORMAT                                           =  (CREATETEXTURE1D_LARGEALLOCATION + 1 ) ,
  CREATETEXTURE2D_UNSUPPORTEDFORMAT                                            =  (CREATETEXTURE2D_UNRECOGNIZEDFORMAT + 1 ) ,
  CREATETEXTURE2D_INVALIDSAMPLES                                               =  (CREATETEXTURE2D_UNSUPPORTEDFORMAT + 1 ) ,
  CREATETEXTURE2D_UNRECOGNIZEDUSAGE                                            =  (CREATETEXTURE2D_INVALIDSAMPLES + 1 ) ,
  CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS                                        =  (CREATETEXTURE2D_UNRECOGNIZEDUSAGE + 1 ) ,
  CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS                                   =  (CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
  CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS                                        =  (CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
  CREATETEXTURE2D_INVALIDCPUACCESSFLAGS                                        =  (CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
  CREATETEXTURE2D_INVALIDBINDFLAGS                                             =  (CREATETEXTURE2D_INVALIDCPUACCESSFLAGS + 1 ) ,
  CREATETEXTURE2D_INVALIDINITIALDATA                                           =  (CREATETEXTURE2D_INVALIDBINDFLAGS + 1 ) ,
  CREATETEXTURE2D_INVALIDDIMENSIONS                                            =  (CREATETEXTURE2D_INVALIDINITIALDATA + 1 ) ,
  CREATETEXTURE2D_INVALIDMIPLEVELS                                             =  (CREATETEXTURE2D_INVALIDDIMENSIONS + 1 ) ,
  CREATETEXTURE2D_INVALIDMISCFLAGS                                             =  (CREATETEXTURE2D_INVALIDMIPLEVELS + 1 ) ,
  CREATETEXTURE2D_INVALIDARG_RETURN                                            =  (CREATETEXTURE2D_INVALIDMISCFLAGS + 1 ) ,
  CREATETEXTURE2D_OUTOFMEMORY_RETURN                                           =  (CREATETEXTURE2D_INVALIDARG_RETURN + 1 ) ,
  CREATETEXTURE2D_NULLDESC                                                     =  (CREATETEXTURE2D_OUTOFMEMORY_RETURN + 1 ) ,
  CREATETEXTURE2D_LARGEALLOCATION                                              =  (CREATETEXTURE2D_NULLDESC + 1 ) ,
  CREATETEXTURE3D_UNRECOGNIZEDFORMAT                                           =  (CREATETEXTURE2D_LARGEALLOCATION + 1 ) ,
  CREATETEXTURE3D_UNSUPPORTEDFORMAT                                            =  (CREATETEXTURE3D_UNRECOGNIZEDFORMAT + 1 ) ,
  CREATETEXTURE3D_INVALIDSAMPLES                                               =  (CREATETEXTURE3D_UNSUPPORTEDFORMAT + 1 ) ,
  CREATETEXTURE3D_UNRECOGNIZEDUSAGE                                            =  (CREATETEXTURE3D_INVALIDSAMPLES + 1 ) ,
  CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS                                        =  (CREATETEXTURE3D_UNRECOGNIZEDUSAGE + 1 ) ,
  CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS                                   =  (CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
  CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS                                        =  (CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
  CREATETEXTURE3D_INVALIDCPUACCESSFLAGS                                        =  (CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
  CREATETEXTURE3D_INVALIDBINDFLAGS                                             =  (CREATETEXTURE3D_INVALIDCPUACCESSFLAGS + 1 ) ,
  CREATETEXTURE3D_INVALIDINITIALDATA                                           =  (CREATETEXTURE3D_INVALIDBINDFLAGS + 1 ) ,
  CREATETEXTURE3D_INVALIDDIMENSIONS                                            =  (CREATETEXTURE3D_INVALIDINITIALDATA + 1 ) ,
  CREATETEXTURE3D_INVALIDMIPLEVELS                                             =  (CREATETEXTURE3D_INVALIDDIMENSIONS + 1 ) ,
  CREATETEXTURE3D_INVALIDMISCFLAGS                                             =  (CREATETEXTURE3D_INVALIDMIPLEVELS + 1 ) ,
  CREATETEXTURE3D_INVALIDARG_RETURN                                            =  (CREATETEXTURE3D_INVALIDMISCFLAGS + 1 ) ,
  CREATETEXTURE3D_OUTOFMEMORY_RETURN                                           =  (CREATETEXTURE3D_INVALIDARG_RETURN + 1 ) ,
  CREATETEXTURE3D_NULLDESC                                                     =  (CREATETEXTURE3D_OUTOFMEMORY_RETURN + 1 ) ,
  CREATETEXTURE3D_LARGEALLOCATION                                              =  (CREATETEXTURE3D_NULLDESC + 1 ) ,
  CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT                                  =  (CREATETEXTURE3D_LARGEALLOCATION + 1 ) ,
  CREATESHADERRESOURCEVIEW_INVALIDDESC                                         =  (CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
  CREATESHADERRESOURCEVIEW_INVALIDFORMAT                                       =  (CREATESHADERRESOURCEVIEW_INVALIDDESC + 1 ) ,
  CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS                                   =  (CREATESHADERRESOURCEVIEW_INVALIDFORMAT + 1 ) ,
  CREATESHADERRESOURCEVIEW_INVALIDRESOURCE                                     =  (CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS + 1 ) ,
  CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS                                      =  (CREATESHADERRESOURCEVIEW_INVALIDRESOURCE + 1 ) ,
  CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN                                   =  (CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
  CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN                                  =  (CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN + 1 ) ,
  CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT                                    =  (CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN + 1 ) ,
  CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT                                     =  (CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
  CREATERENDERTARGETVIEW_INVALIDDESC                                           =  (CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT + 1 ) ,
  CREATERENDERTARGETVIEW_INVALIDFORMAT                                         =  (CREATERENDERTARGETVIEW_INVALIDDESC + 1 ) ,
  CREATERENDERTARGETVIEW_INVALIDDIMENSIONS                                     =  (CREATERENDERTARGETVIEW_INVALIDFORMAT + 1 ) ,
  CREATERENDERTARGETVIEW_INVALIDRESOURCE                                       =  (CREATERENDERTARGETVIEW_INVALIDDIMENSIONS + 1 ) ,
  CREATERENDERTARGETVIEW_TOOMANYOBJECTS                                        =  (CREATERENDERTARGETVIEW_INVALIDRESOURCE + 1 ) ,
  CREATERENDERTARGETVIEW_INVALIDARG_RETURN                                     =  (CREATERENDERTARGETVIEW_TOOMANYOBJECTS + 1 ) ,
  CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN                                    =  (CREATERENDERTARGETVIEW_INVALIDARG_RETURN + 1 ) ,
  CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT                                    =  (CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN + 1 ) ,
  CREATEDEPTHSTENCILVIEW_INVALIDDESC                                           =  (CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
  CREATEDEPTHSTENCILVIEW_INVALIDFORMAT                                         =  (CREATEDEPTHSTENCILVIEW_INVALIDDESC + 1 ) ,
  CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS                                     =  (CREATEDEPTHSTENCILVIEW_INVALIDFORMAT + 1 ) ,
  CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE                                       =  (CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS + 1 ) ,
  CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS                                        =  (CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE + 1 ) ,
  CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN                                     =  (CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS + 1 ) ,
  CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN                                    =  (CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN + 1 ) ,
  CREATEINPUTLAYOUT_OUTOFMEMORY                                                =  (CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN + 1 ) ,
  CREATEINPUTLAYOUT_TOOMANYELEMENTS                                            =  (CREATEINPUTLAYOUT_OUTOFMEMORY + 1 ) ,
  CREATEINPUTLAYOUT_INVALIDFORMAT                                              =  (CREATEINPUTLAYOUT_TOOMANYELEMENTS + 1 ) ,
  CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT                                         =  (CREATEINPUTLAYOUT_INVALIDFORMAT + 1 ) ,
  CREATEINPUTLAYOUT_INVALIDSLOT                                                =  (CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT + 1 ) ,
  CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS                                      =  (CREATEINPUTLAYOUT_INVALIDSLOT + 1 ) ,
  CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH                                  =  (CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS + 1 ) ,
  CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE                                     =  (CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH + 1 ) ,
  CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE                                      =  (CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE + 1 ) ,
  CREATEINPUTLAYOUT_INVALIDALIGNMENT                                           =  (CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE + 1 ) ,
  CREATEINPUTLAYOUT_DUPLICATESEMANTIC                                          =  (CREATEINPUTLAYOUT_INVALIDALIGNMENT + 1 ) ,
  CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE                                 =  (CREATEINPUTLAYOUT_DUPLICATESEMANTIC + 1 ) ,
  CREATEINPUTLAYOUT_NULLSEMANTIC                                               =  (CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE + 1 ) ,
  CREATEINPUTLAYOUT_MISSINGELEMENT                                             =  (CREATEINPUTLAYOUT_NULLSEMANTIC + 1 ) ,
  CREATEINPUTLAYOUT_NULLDESC                                                   =  (CREATEINPUTLAYOUT_MISSINGELEMENT + 1 ) ,
  CREATEVERTEXSHADER_OUTOFMEMORY                                               =  (CREATEINPUTLAYOUT_NULLDESC + 1 ) ,
  CREATEVERTEXSHADER_INVALIDSHADERBYTECODE                                     =  (CREATEVERTEXSHADER_OUTOFMEMORY + 1 ) ,
  CREATEVERTEXSHADER_INVALIDSHADERTYPE                                         =  (CREATEVERTEXSHADER_INVALIDSHADERBYTECODE + 1 ) ,
  CREATEGEOMETRYSHADER_OUTOFMEMORY                                             =  (CREATEVERTEXSHADER_INVALIDSHADERTYPE + 1 ) ,
  CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE                                   =  (CREATEGEOMETRYSHADER_OUTOFMEMORY + 1 ) ,
  CREATEGEOMETRYSHADER_INVALIDSHADERTYPE                                       =  (CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY                             =  (CREATEGEOMETRYSHADER_INVALIDSHADERTYPE + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE                   =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE                       =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES                       =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED                =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL                          =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL                            =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED                     =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT                       =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT                   =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT                   =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT  =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION                    =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT                          =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE               =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC                         =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH                            =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS                        =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX                          =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE                  =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX + 1 ) ,
  CREATEPIXELSHADER_OUTOFMEMORY                                                =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE + 1 ) ,
  CREATEPIXELSHADER_INVALIDSHADERBYTECODE                                      =  (CREATEPIXELSHADER_OUTOFMEMORY + 1 ) ,
  CREATEPIXELSHADER_INVALIDSHADERTYPE                                          =  (CREATEPIXELSHADER_INVALIDSHADERBYTECODE + 1 ) ,
  CREATERASTERIZERSTATE_INVALIDFILLMODE                                        =  (CREATEPIXELSHADER_INVALIDSHADERTYPE + 1 ) ,
  CREATERASTERIZERSTATE_INVALIDCULLMODE                                        =  (CREATERASTERIZERSTATE_INVALIDFILLMODE + 1 ) ,
  CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP                                  =  (CREATERASTERIZERSTATE_INVALIDCULLMODE + 1 ) ,
  CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS                            =  (CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP + 1 ) ,
  CREATERASTERIZERSTATE_TOOMANYOBJECTS                                         =  (CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS + 1 ) ,
  CREATERASTERIZERSTATE_NULLDESC                                               =  (CREATERASTERIZERSTATE_TOOMANYOBJECTS + 1 ) ,
  CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK                                =  (CREATERASTERIZERSTATE_NULLDESC + 1 ) ,
  CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC                                     =  (CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK + 1 ) ,
  CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP                        =  (CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC + 1 ) ,
  CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP                       =  (CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP + 1 ) ,
  CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP                        =  (CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP + 1 ) ,
  CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC                          =  (CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP + 1 ) ,
  CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP                         =  (CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC + 1 ) ,
  CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP                        =  (CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP + 1 ) ,
  CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP                         =  (CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP + 1 ) ,
  CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC                           =  (CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP + 1 ) ,
  CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS                                       =  (CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC + 1 ) ,
  CREATEDEPTHSTENCILSTATE_NULLDESC                                             =  (CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS + 1 ) ,
  CREATEBLENDSTATE_INVALIDSRCBLEND                                             =  (CREATEDEPTHSTENCILSTATE_NULLDESC + 1 ) ,
  CREATEBLENDSTATE_INVALIDDESTBLEND                                            =  (CREATEBLENDSTATE_INVALIDSRCBLEND + 1 ) ,
  CREATEBLENDSTATE_INVALIDBLENDOP                                              =  (CREATEBLENDSTATE_INVALIDDESTBLEND + 1 ) ,
  CREATEBLENDSTATE_INVALIDSRCBLENDALPHA                                        =  (CREATEBLENDSTATE_INVALIDBLENDOP + 1 ) ,
  CREATEBLENDSTATE_INVALIDDESTBLENDALPHA                                       =  (CREATEBLENDSTATE_INVALIDSRCBLENDALPHA + 1 ) ,
  CREATEBLENDSTATE_INVALIDBLENDOPALPHA                                         =  (CREATEBLENDSTATE_INVALIDDESTBLENDALPHA + 1 ) ,
  CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK                                =  (CREATEBLENDSTATE_INVALIDBLENDOPALPHA + 1 ) ,
  CREATEBLENDSTATE_TOOMANYOBJECTS                                              =  (CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK + 1 ) ,
  CREATEBLENDSTATE_NULLDESC                                                    =  (CREATEBLENDSTATE_TOOMANYOBJECTS + 1 ) ,
  CREATESAMPLERSTATE_INVALIDFILTER                                             =  (CREATEBLENDSTATE_NULLDESC + 1 ) ,
  CREATESAMPLERSTATE_INVALIDADDRESSU                                           =  (CREATESAMPLERSTATE_INVALIDFILTER + 1 ) ,
  CREATESAMPLERSTATE_INVALIDADDRESSV                                           =  (CREATESAMPLERSTATE_INVALIDADDRESSU + 1 ) ,
  CREATESAMPLERSTATE_INVALIDADDRESSW                                           =  (CREATESAMPLERSTATE_INVALIDADDRESSV + 1 ) ,
  CREATESAMPLERSTATE_INVALIDMIPLODBIAS                                         =  (CREATESAMPLERSTATE_INVALIDADDRESSW + 1 ) ,
  CREATESAMPLERSTATE_INVALIDMAXANISOTROPY                                      =  (CREATESAMPLERSTATE_INVALIDMIPLODBIAS + 1 ) ,
  CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC                                     =  (CREATESAMPLERSTATE_INVALIDMAXANISOTROPY + 1 ) ,
  CREATESAMPLERSTATE_INVALIDMINLOD                                             =  (CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC + 1 ) ,
  CREATESAMPLERSTATE_INVALIDMAXLOD                                             =  (CREATESAMPLERSTATE_INVALIDMINLOD + 1 ) ,
  CREATESAMPLERSTATE_TOOMANYOBJECTS                                            =  (CREATESAMPLERSTATE_INVALIDMAXLOD + 1 ) ,
  CREATESAMPLERSTATE_NULLDESC                                                  =  (CREATESAMPLERSTATE_TOOMANYOBJECTS + 1 ) ,
  CREATEQUERYORPREDICATE_INVALIDQUERY                                          =  (CREATESAMPLERSTATE_NULLDESC + 1 ) ,
  CREATEQUERYORPREDICATE_INVALIDMISCFLAGS                                      =  (CREATEQUERYORPREDICATE_INVALIDQUERY + 1 ) ,
  CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG                                    =  (CREATEQUERYORPREDICATE_INVALIDMISCFLAGS + 1 ) ,
  CREATEQUERYORPREDICATE_NULLDESC                                              =  (CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG + 1 ) ,
  DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED                          =  (CREATEQUERYORPREDICATE_NULLDESC + 1 ) ,
  DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED                             =  (DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED + 1 ) ,
  IASETVERTEXBUFFERS_INVALIDBUFFER                                             =  (DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED + 1 ) ,
  DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE                                   =  (IASETVERTEXBUFFERS_INVALIDBUFFER + 1 ) ,
  DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY                                      =  (DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE + 1 ) ,
  IASETINDEXBUFFER_INVALIDBUFFER                                               =  (DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_IASETINDEXBUFFER_FORMAT_INVALID                                       =  (IASETINDEXBUFFER_INVALIDBUFFER + 1 ) ,
  DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE                                     =  (DEVICE_IASETINDEXBUFFER_FORMAT_INVALID + 1 ) ,
  DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED                                     =  (DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE + 1 ) ,
  DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY                                      =  (DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED + 1 ) ,
  VSSETCONSTANTBUFFERS_INVALIDBUFFER                                           =  (DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (VSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
  DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY                                      =  (DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  GSSETCONSTANTBUFFERS_INVALIDBUFFER                                           =  (DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (GSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
  DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  SOSETTARGETS_INVALIDBUFFER                                                   =  (DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEVICE_SOSETTARGETS_OFFSET_UNALIGNED                                         =  (SOSETTARGETS_INVALIDBUFFER + 1 ) ,
  DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY                                      =  (DEVICE_SOSETTARGETS_OFFSET_UNALIGNED + 1 ) ,
  PSSETCONSTANTBUFFERS_INVALIDBUFFER                                           =  (DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (PSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
  DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT                                        =  (DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR                                      =  (DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT + 1 ) ,
  CLEARRENDERTARGETVIEW_DENORMFLUSH                                            =  (DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR + 1 ) ,
  CLEARDEPTHSTENCILVIEW_DENORMFLUSH                                            =  (CLEARRENDERTARGETVIEW_DENORMFLUSH + 1 ) ,
  CLEARDEPTHSTENCILVIEW_INVALID                                                =  (CLEARDEPTHSTENCILVIEW_DENORMFLUSH + 1 ) ,
  DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY                                      =  (CLEARDEPTHSTENCILVIEW_INVALID + 1 ) ,
  DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY                                      =  (DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY                                      =  (DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_SOGETTARGETS_BUFFERS_EMPTY                                            =  (DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY                                      =  (DEVICE_SOGETTARGETS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY                                        =  (DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY                                         =  (DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY + 1 ) ,
  DEVICE_GENERATEMIPS_RESOURCE_INVALID                                         =  (DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY + 1 ) ,
  COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE                          =  (DEVICE_GENERATEMIPS_RESOURCE_INVALID + 1 ) ,
  COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE                               =  (COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
  COPYSUBRESOURCEREGION_INVALIDSOURCEBOX                                       =  (COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE + 1 ) ,
  COPYSUBRESOURCEREGION_INVALIDSOURCE                                          =  (COPYSUBRESOURCEREGION_INVALIDSOURCEBOX + 1 ) ,
  COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE                                =  (COPYSUBRESOURCEREGION_INVALIDSOURCE + 1 ) ,
  COPYSUBRESOURCEREGION_INVALIDSOURCESTATE                                     =  (COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE + 1 ) ,
  COPYRESOURCE_INVALIDSOURCE                                                   =  (COPYSUBRESOURCEREGION_INVALIDSOURCESTATE + 1 ) ,
  COPYRESOURCE_INVALIDDESTINATIONSTATE                                         =  (COPYRESOURCE_INVALIDSOURCE + 1 ) ,
  COPYRESOURCE_INVALIDSOURCESTATE                                              =  (COPYRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
  UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE                              =  (COPYRESOURCE_INVALIDSOURCESTATE + 1 ) ,
  UPDATESUBRESOURCE_INVALIDDESTINATIONBOX                                      =  (UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
  UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE                                    =  (UPDATESUBRESOURCE_INVALIDDESTINATIONBOX + 1 ) ,
  DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID                                =  (UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
  DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID                    =  (DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID + 1 ) ,
  DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID                                     =  (DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID + 1 ) ,
  DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID                         =  (DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID + 1 ) ,
  DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID                                     =  (DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID + 1 ) ,
  BUFFER_MAP_INVALIDMAPTYPE                                                    =  (DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID + 1 ) ,
  BUFFER_MAP_INVALIDFLAGS                                                      =  (BUFFER_MAP_INVALIDMAPTYPE + 1 ) ,
  BUFFER_MAP_ALREADYMAPPED                                                     =  (BUFFER_MAP_INVALIDFLAGS + 1 ) ,
  BUFFER_MAP_DEVICEREMOVED_RETURN                                              =  (BUFFER_MAP_ALREADYMAPPED + 1 ) ,
  BUFFER_UNMAP_NOTMAPPED                                                       =  (BUFFER_MAP_DEVICEREMOVED_RETURN + 1 ) ,
  TEXTURE1D_MAP_INVALIDMAPTYPE                                                 =  (BUFFER_UNMAP_NOTMAPPED + 1 ) ,
  TEXTURE1D_MAP_INVALIDSUBRESOURCE                                             =  (TEXTURE1D_MAP_INVALIDMAPTYPE + 1 ) ,
  TEXTURE1D_MAP_INVALIDFLAGS                                                   =  (TEXTURE1D_MAP_INVALIDSUBRESOURCE + 1 ) ,
  TEXTURE1D_MAP_ALREADYMAPPED                                                  =  (TEXTURE1D_MAP_INVALIDFLAGS + 1 ) ,
  TEXTURE1D_MAP_DEVICEREMOVED_RETURN                                           =  (TEXTURE1D_MAP_ALREADYMAPPED + 1 ) ,
  TEXTURE1D_UNMAP_INVALIDSUBRESOURCE                                           =  (TEXTURE1D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
  TEXTURE1D_UNMAP_NOTMAPPED                                                    =  (TEXTURE1D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
  TEXTURE2D_MAP_INVALIDMAPTYPE                                                 =  (TEXTURE1D_UNMAP_NOTMAPPED + 1 ) ,
  TEXTURE2D_MAP_INVALIDSUBRESOURCE                                             =  (TEXTURE2D_MAP_INVALIDMAPTYPE + 1 ) ,
  TEXTURE2D_MAP_INVALIDFLAGS                                                   =  (TEXTURE2D_MAP_INVALIDSUBRESOURCE + 1 ) ,
  TEXTURE2D_MAP_ALREADYMAPPED                                                  =  (TEXTURE2D_MAP_INVALIDFLAGS + 1 ) ,
  TEXTURE2D_MAP_DEVICEREMOVED_RETURN                                           =  (TEXTURE2D_MAP_ALREADYMAPPED + 1 ) ,
  TEXTURE2D_UNMAP_INVALIDSUBRESOURCE                                           =  (TEXTURE2D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
  TEXTURE2D_UNMAP_NOTMAPPED                                                    =  (TEXTURE2D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
  TEXTURE3D_MAP_INVALIDMAPTYPE                                                 =  (TEXTURE2D_UNMAP_NOTMAPPED + 1 ) ,
  TEXTURE3D_MAP_INVALIDSUBRESOURCE                                             =  (TEXTURE3D_MAP_INVALIDMAPTYPE + 1 ) ,
  TEXTURE3D_MAP_INVALIDFLAGS                                                   =  (TEXTURE3D_MAP_INVALIDSUBRESOURCE + 1 ) ,
  TEXTURE3D_MAP_ALREADYMAPPED                                                  =  (TEXTURE3D_MAP_INVALIDFLAGS + 1 ) ,
  TEXTURE3D_MAP_DEVICEREMOVED_RETURN                                           =  (TEXTURE3D_MAP_ALREADYMAPPED + 1 ) ,
  TEXTURE3D_UNMAP_INVALIDSUBRESOURCE                                           =  (TEXTURE3D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
  TEXTURE3D_UNMAP_NOTMAPPED                                                    =  (TEXTURE3D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
  CHECKFORMATSUPPORT_FORMAT_DEPRECATED                                         =  (TEXTURE3D_UNMAP_NOTMAPPED + 1 ) ,
  CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED                              =  (CHECKFORMATSUPPORT_FORMAT_DEPRECATED + 1 ) ,
  SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS                                           =  (CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED + 1 ) ,
  SETEXCEPTIONMODE_INVALIDARG_RETURN                                           =  (SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS + 1 ) ,
  SETEXCEPTIONMODE_DEVICEREMOVED_RETURN                                        =  (SETEXCEPTIONMODE_INVALIDARG_RETURN + 1 ) ,
  REF_SIMULATING_INFINITELY_FAST_HARDWARE                                      =  (SETEXCEPTIONMODE_DEVICEREMOVED_RETURN + 1 ) ,
  REF_THREADING_MODE                                                           =  (REF_SIMULATING_INFINITELY_FAST_HARDWARE + 1 ) ,
  REF_UMDRIVER_EXCEPTION                                                       =  (REF_THREADING_MODE + 1 ) ,
  REF_KMDRIVER_EXCEPTION                                                       =  (REF_UMDRIVER_EXCEPTION + 1 ) ,
  REF_HARDWARE_EXCEPTION                                                       =  (REF_KMDRIVER_EXCEPTION + 1 ) ,
  REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE                                    =  (REF_HARDWARE_EXCEPTION + 1 ) ,
  REF_PROBLEM_PARSING_SHADER                                                   =  (REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE + 1 ) ,
  REF_OUT_OF_MEMORY                                                            =  (REF_PROBLEM_PARSING_SHADER + 1 ) ,
  REF_INFO                                                                     =  (REF_OUT_OF_MEMORY + 1 ) ,
  DEVICE_DRAW_VERTEXPOS_OVERFLOW                                               =  (REF_INFO + 1 ) ,
  DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW                                         =  (DEVICE_DRAW_VERTEXPOS_OVERFLOW + 1 ) ,
  DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW                                      =  (DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW + 1 ) ,
  DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW                                    =  (DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW + 1 ) ,
  DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW                             =  (DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
  DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW                                =  (DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
  DEVICE_DRAW_VERTEX_SHADER_NOT_SET                                            =  (DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW + 1 ) ,
  DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND                                 =  (DEVICE_DRAW_VERTEX_SHADER_NOT_SET + 1 ) ,
  DEVICE_SHADER_LINKAGE_REGISTERINDEX                                          =  (DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND + 1 ) ,
  DEVICE_SHADER_LINKAGE_COMPONENTTYPE                                          =  (DEVICE_SHADER_LINKAGE_REGISTERINDEX + 1 ) ,
  DEVICE_SHADER_LINKAGE_REGISTERMASK                                           =  (DEVICE_SHADER_LINKAGE_COMPONENTTYPE + 1 ) ,
  DEVICE_SHADER_LINKAGE_SYSTEMVALUE                                            =  (DEVICE_SHADER_LINKAGE_REGISTERMASK + 1 ) ,
  DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS                               =  (DEVICE_SHADER_LINKAGE_SYSTEMVALUE + 1 ) ,
  DEVICE_DRAW_VERTEX_BUFFER_NOT_SET                                            =  (DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS + 1 ) ,
  DEVICE_DRAW_INPUTLAYOUT_NOT_SET                                              =  (DEVICE_DRAW_VERTEX_BUFFER_NOT_SET + 1 ) ,
  DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET                                          =  (DEVICE_DRAW_INPUTLAYOUT_NOT_SET + 1 ) ,
  DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL                                        =  (DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET + 1 ) ,
  DEVICE_DRAW_SAMPLER_NOT_SET                                                  =  (DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL + 1 ) ,
  DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET                                       =  (DEVICE_DRAW_SAMPLER_NOT_SET + 1 ) ,
  DEVICE_DRAW_VIEW_DIMENSION_MISMATCH                                          =  (DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET + 1 ) ,
  DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL                                   =  (DEVICE_DRAW_VIEW_DIMENSION_MISMATCH + 1 ) ,
  DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL                                          =  (DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL + 1 ) ,
  DEVICE_DRAW_INDEX_BUFFER_NOT_SET                                             =  (DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL + 1 ) ,
  DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID                                      =  (DEVICE_DRAW_INDEX_BUFFER_NOT_SET + 1 ) ,
  DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL                                           =  (DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID + 1 ) ,
  DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH                                      =  (DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL + 1 ) ,
  DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH                                    =  (DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH + 1 ) ,
  DEVICE_DRAW_POSITION_NOT_PRESENT                                             =  (DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH + 1 ) ,
  DEVICE_DRAW_OUTPUT_STREAM_NOT_SET                                            =  (DEVICE_DRAW_POSITION_NOT_PRESENT + 1 ) ,
  DEVICE_DRAW_BOUND_RESOURCE_MAPPED                                            =  (DEVICE_DRAW_OUTPUT_STREAM_NOT_SET + 1 ) ,
  DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY                                        =  (DEVICE_DRAW_BOUND_RESOURCE_MAPPED + 1 ) ,
  DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED                                          =  (DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY + 1 ) ,
  DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED                                          =  (DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED + 1 ) ,
  DEVICE_DRAW_INDEX_OFFSET_UNALIGNED                                           =  (DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED + 1 ) ,
  DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED                                   =  (DEVICE_DRAW_INDEX_OFFSET_UNALIGNED + 1 ) ,
  DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED                                   =  (DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED + 1 ) ,
  DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED                               =  (DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED + 1 ) ,
  DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED                             =  (DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED + 1 ) ,
  DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED                                 =  (DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED + 1 ) ,
  DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE                                  =  (DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED + 1 ) ,
  DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER                                     =  (DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE + 1 ) ,
  DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING                       =  (DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER + 1 ) ,
  DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0            =  (DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING + 1 ) ,
  DEVICE_REMOVAL_PROCESS_AT_FAULT                                              =  (DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 + 1 ) ,
  DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT                                     =  (DEVICE_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
  DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT                                          =  (DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT + 1 ) ,
  DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN                                =  (DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT + 1 ) ,
  DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN                               =  (DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN + 1 ) ,
  DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN                              =  (DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN + 1 ) ,
  DEVICE_DRAW_VIEWPORT_NOT_SET                                                 =  (DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN + 1 ) ,
  CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC                                 =  (DEVICE_DRAW_VIEWPORT_NOT_SET + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC              =  (CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
  DEVICE_RSSETVIEWPORTS_DENORMFLUSH                                            =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
  OMSETRENDERTARGETS_INVALIDVIEW                                               =  (DEVICE_RSSETVIEWPORTS_DENORMFLUSH + 1 ) ,
  DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS                                   =  (OMSETRENDERTARGETS_INVALIDVIEW + 1 ) ,
  DEVICE_DRAW_SAMPLER_MISMATCH                                                 =  (DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS + 1 ) ,
  CREATEINPUTLAYOUT_TYPE_MISMATCH                                              =  (DEVICE_DRAW_SAMPLER_MISMATCH + 1 ) ,
  BLENDSTATE_GETDESC_LEGACY                                                    =  (CREATEINPUTLAYOUT_TYPE_MISMATCH + 1 ) ,
  SHADERRESOURCEVIEW_GETDESC_LEGACY                                            =  (BLENDSTATE_GETDESC_LEGACY + 1 ) ,
  CREATEQUERY_OUTOFMEMORY_RETURN                                               =  (SHADERRESOURCEVIEW_GETDESC_LEGACY + 1 ) ,
  CREATEPREDICATE_OUTOFMEMORY_RETURN                                           =  (CREATEQUERY_OUTOFMEMORY_RETURN + 1 ) ,
  CREATECOUNTER_OUTOFRANGE_COUNTER                                             =  (CREATEPREDICATE_OUTOFMEMORY_RETURN + 1 ) ,
  CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED                         =  (CREATECOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
  CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER                                 =  (CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED + 1 ) ,
  CREATECOUNTER_OUTOFMEMORY_RETURN                                             =  (CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
  CREATECOUNTER_NONEXCLUSIVE_RETURN                                            =  (CREATECOUNTER_OUTOFMEMORY_RETURN + 1 ) ,
  CREATECOUNTER_NULLDESC                                                       =  (CREATECOUNTER_NONEXCLUSIVE_RETURN + 1 ) ,
  CHECKCOUNTER_OUTOFRANGE_COUNTER                                              =  (CREATECOUNTER_NULLDESC + 1 ) ,
  CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER                                   =  (CHECKCOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
  SETPREDICATION_INVALID_PREDICATE_STATE                                       =  (CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
  QUERY_BEGIN_UNSUPPORTED                                                      =  (SETPREDICATION_INVALID_PREDICATE_STATE + 1 ) ,
  PREDICATE_BEGIN_DURING_PREDICATION                                           =  (QUERY_BEGIN_UNSUPPORTED + 1 ) ,
  QUERY_BEGIN_DUPLICATE                                                        =  (PREDICATE_BEGIN_DURING_PREDICATION + 1 ) ,
  QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS                                      =  (QUERY_BEGIN_DUPLICATE + 1 ) ,
  PREDICATE_END_DURING_PREDICATION                                             =  (QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
  QUERY_END_ABANDONING_PREVIOUS_RESULTS                                        =  (PREDICATE_END_DURING_PREDICATION + 1 ) ,
  QUERY_END_WITHOUT_BEGIN                                                      =  (QUERY_END_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
  QUERY_GETDATA_INVALID_DATASIZE                                               =  (QUERY_END_WITHOUT_BEGIN + 1 ) ,
  QUERY_GETDATA_INVALID_FLAGS                                                  =  (QUERY_GETDATA_INVALID_DATASIZE + 1 ) ,
  QUERY_GETDATA_INVALID_CALL                                                   =  (QUERY_GETDATA_INVALID_FLAGS + 1 ) ,
  DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH                                          =  (QUERY_GETDATA_INVALID_CALL + 1 ) ,
  DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED                               =  (DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH + 1 ) ,
  DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN                        =  (DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED + 1 ) ,
  DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE                                   =  (DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN + 1 ) ,
  DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE                                       =  (DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE + 1 ) ,
  CREATEINPUTLAYOUT_EMPTY_LAYOUT                                               =  (DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE + 1 ) ,
  DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH                                   =  (CREATEINPUTLAYOUT_EMPTY_LAYOUT + 1 ) ,
  LIVE_OBJECT_SUMMARY                                                          = (DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH + 1 ),
  LIVE_BUFFER                                                                  = (LIVE_OBJECT_SUMMARY + 1 ),
  LIVE_TEXTURE1D                                                               = (LIVE_BUFFER + 1 ),
  LIVE_TEXTURE2D                                                               = (LIVE_TEXTURE1D + 1 ),
  LIVE_TEXTURE3D                                                               = (LIVE_TEXTURE2D + 1 ),
  LIVE_SHADERRESOURCEVIEW                                                      = (LIVE_TEXTURE3D + 1 ),
  LIVE_RENDERTARGETVIEW                                                        = (LIVE_SHADERRESOURCEVIEW + 1 ),
  LIVE_DEPTHSTENCILVIEW                                                        = (LIVE_RENDERTARGETVIEW + 1 ),
  LIVE_VERTEXSHADER                                                            = (LIVE_DEPTHSTENCILVIEW + 1 ),
  LIVE_GEOMETRYSHADER                                                          = (LIVE_VERTEXSHADER + 1 ),
  LIVE_PIXELSHADER                                                             = (LIVE_GEOMETRYSHADER + 1 ),
  LIVE_INPUTLAYOUT                                                             = (LIVE_PIXELSHADER + 1 ),
  LIVE_SAMPLER                                                                 = (LIVE_INPUTLAYOUT + 1 ),
  LIVE_BLENDSTATE                                                              = (LIVE_SAMPLER + 1 ),
  LIVE_DEPTHSTENCILSTATE                                                       = (LIVE_BLENDSTATE + 1 ),
  LIVE_RASTERIZERSTATE                                                         = (LIVE_DEPTHSTENCILSTATE + 1 ),
  LIVE_QUERY                                                                   = (LIVE_RASTERIZERSTATE + 1 ),
  LIVE_PREDICATE                                                               = (LIVE_QUERY + 1 ),
  LIVE_COUNTER                                                                 = (LIVE_PREDICATE + 1 ),
  LIVE_DEVICE                                                                  = (LIVE_COUNTER + 1 ),
  LIVE_SWAPCHAIN                                                               = (LIVE_DEVICE + 1 ),
  D3D10_MESSAGES_END                                                           = (LIVE_SWAPCHAIN + 1 ),
  D3D10L9_MESSAGES_START                                                       =  0x100000,
  CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED                                 =  (D3D10L9_MESSAGES_START + 1 ) ,
  CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED                           =  (CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED + 1 ) ,
  CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT                                     =  (CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED + 1 ) ,
  CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY                                      =  (CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT + 1 ) ,
  CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE                                       =  (CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY + 1 ) ,
  VSSETSAMPLERS_NOT_SUPPORTED                                                  =  (CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE + 1 ) ,
  VSSETSAMPLERS_TOO_MANY_SAMPLERS                                              =  (VSSETSAMPLERS_NOT_SUPPORTED + 1 ) ,
  PSSETSAMPLERS_TOO_MANY_SAMPLERS                                              =  (VSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
  CREATERESOURCE_NO_ARRAYS                                                     =  (PSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
  CREATERESOURCE_NO_VB_AND_IB_BIND                                             =  (CREATERESOURCE_NO_ARRAYS + 1 ) ,
  CREATERESOURCE_NO_TEXTURE_1D                                                 =  (CREATERESOURCE_NO_VB_AND_IB_BIND + 1 ) ,
  CREATERESOURCE_DIMENSION_OUT_OF_RANGE                                        =  (CREATERESOURCE_NO_TEXTURE_1D + 1 ) ,
  CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE                               =  (CREATERESOURCE_DIMENSION_OUT_OF_RANGE + 1 ) ,
  OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS                                   =  (CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE + 1 ) ,
  OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS                                   =  (OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS + 1 ) ,
  IASETVERTEXBUFFERS_BAD_BUFFER_INDEX                                          =  (OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS + 1 ) ,
  DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS                                     =  (IASETVERTEXBUFFERS_BAD_BUFFER_INDEX + 1 ) ,
  DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED                          =  (DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS + 1 ) ,
  DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS                                   =  (DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED + 1 ) ,
  COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY                              =  (DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS + 1 ) ,
  COPYRESOURCE_NO_TEXTURE_3D_READBACK                                          =  (COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY + 1 ) ,
  COPYRESOURCE_NO_TEXTURE_ONLY_READBACK                                        =  (COPYRESOURCE_NO_TEXTURE_3D_READBACK + 1 ) ,
  CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT                                         =  (COPYRESOURCE_NO_TEXTURE_ONLY_READBACK + 1 ) ,
  CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE                                        =  (CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT + 1 ) ,
  CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE                           =  (CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE + 1 ) ,
  DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE                              =  (CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE + 1 ) ,
  CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD                                 =  (DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE + 1 ) ,
  CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL                             =  (CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD + 1 ) ,
  CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX                                    =  (CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL + 1 ) ,
  CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO                        =  (CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX + 1 ) ,
  CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES                             =  (CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO + 1 ) ,
  CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET                                 =  (CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES + 1 ) ,
  CREATERESOURCE_NO_DWORD_INDEX_BUFFER                                         =  (CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET + 1 ) ,
  CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE                                =  (CREATERESOURCE_NO_DWORD_INDEX_BUFFER + 1 ) ,
  CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE                        =  (CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE + 1 ) ,
  CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE                                 =  (CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE + 1 ) ,
  CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS                                  =  (CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE + 1 ) ,
  CREATERESOURCE_NO_STREAM_OUT                                                 =  (CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS + 1 ) ,
  CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS                                        =  (CREATERESOURCE_NO_STREAM_OUT + 1 ) ,
  CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES                                        =  (CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS + 1 ) ,
  CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED                         =  (CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES + 1 ) ,
  VSSHADERRESOURCES_NOT_SUPPORTED                                              =  (CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED + 1 ) ,
  GEOMETRY_SHADER_NOT_SUPPORTED                                                =  (VSSHADERRESOURCES_NOT_SUPPORTED + 1 ) ,
  STREAM_OUT_NOT_SUPPORTED                                                     =  (GEOMETRY_SHADER_NOT_SUPPORTED + 1 ) ,
  TEXT_FILTER_NOT_SUPPORTED                                                    =  (STREAM_OUT_NOT_SUPPORTED + 1 ) ,
  CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND                                     =  (TEXT_FILTER_NOT_SUPPORTED + 1 ) ,
  CREATEBLENDSTATE_NO_MRT_BLEND                                                =  (CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND + 1 ) ,
  CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED                                     =  (CREATEBLENDSTATE_NO_MRT_BLEND + 1 ) ,
  CREATESAMPLERSTATE_NO_MIRRORONCE                                             =  (CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED + 1 ) ,
  DRAWINSTANCED_NOT_SUPPORTED                                                  =  (CREATESAMPLERSTATE_NO_MIRRORONCE + 1 ) ,
  DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3                                 =  (DRAWINSTANCED_NOT_SUPPORTED + 1 ) ,
  DRAWINDEXED_POINTLIST_UNSUPPORTED                                            =  (DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 + 1 ) ,
  SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO                                     =  (DRAWINDEXED_POINTLIST_UNSUPPORTED + 1 ) ,
  CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION                    =  (SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO + 1 ) ,
  CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED                 =  (CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION + 1 ) ,
  DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR                                     =  (CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED + 1 ) ,
  SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA                                =  (DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR + 1 ) ,
  CREATERESOURCE_NON_POW_2_MIPMAP                                              =  (SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA + 1 ) ,
  CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED                                      =  (CREATERESOURCE_NON_POW_2_MIPMAP + 1 ) ,
  OMSETRENDERTARGETS_NO_SRGB_MRT                                               =  (CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED + 1 ) ,
  D3D10L9_MESSAGES_END                                                         =  (OMSETRENDERTARGETS_NO_SRGB_MRT + 1 ) ,
  D3D11_MESSAGES_START                                                         =  0x200000,
  CREATEDEPTHSTENCILVIEW_INVALIDFLAGS                                          =  (D3D11_MESSAGES_START + 1 ) ,
  CREATEVERTEXSHADER_INVALIDCLASSLINKAGE                                       =  (CREATEDEPTHSTENCILVIEW_INVALIDFLAGS + 1 ) ,
  CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE                                     =  (CREATEVERTEXSHADER_INVALIDCLASSLINKAGE + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS                       =  (CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER               =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS                       =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE                     =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS + 1 ) ,
  CREATEPIXELSHADER_INVALIDCLASSLINKAGE                                        =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE + 1 ) ,
  CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS                               =  (CREATEPIXELSHADER_INVALIDCLASSLINKAGE + 1 ) ,
  CREATEDEFERREDCONTEXT_SINGLETHREADED                                         =  (CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS + 1 ) ,
  CREATEDEFERREDCONTEXT_INVALIDARG_RETURN                                      =  (CREATEDEFERREDCONTEXT_SINGLETHREADED + 1 ) ,
  CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN                                    =  (CREATEDEFERREDCONTEXT_INVALIDARG_RETURN + 1 ) ,
  CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN                                     =  (CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN + 1 ) ,
  FINISHDISPLAYLIST_ONIMMEDIATECONTEXT                                         =  (CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN + 1 ) ,
  FINISHDISPLAYLIST_OUTOFMEMORY_RETURN                                         =  (FINISHDISPLAYLIST_ONIMMEDIATECONTEXT + 1 ) ,
  FINISHDISPLAYLIST_INVALID_CALL_RETURN                                        =  (FINISHDISPLAYLIST_OUTOFMEMORY_RETURN + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM                           =  (FINISHDISPLAYLIST_INVALID_CALL_RETURN + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES                       =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES                       =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES + 1 ) ,
  CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES                       =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES + 1 ) ,
  DEVICE_HSSETSHADERRESOURCES_HAZARD                                           =  (CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES + 1 ) ,
  DEVICE_HSSETCONSTANTBUFFERS_HAZARD                                           =  (DEVICE_HSSETSHADERRESOURCES_HAZARD + 1 ) ,
  HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT                                    =  (DEVICE_HSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
  HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT                                    =  (HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
  CREATEHULLSHADER_INVALIDCALL                                                 =  (HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
  CREATEHULLSHADER_OUTOFMEMORY                                                 =  (CREATEHULLSHADER_INVALIDCALL + 1 ) ,
  CREATEHULLSHADER_INVALIDSHADERBYTECODE                                       =  (CREATEHULLSHADER_OUTOFMEMORY + 1 ) ,
  CREATEHULLSHADER_INVALIDSHADERTYPE                                           =  (CREATEHULLSHADER_INVALIDSHADERBYTECODE + 1 ) ,
  CREATEHULLSHADER_INVALIDCLASSLINKAGE                                         =  (CREATEHULLSHADER_INVALIDSHADERTYPE + 1 ) ,
  DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY                                      =  (CREATEHULLSHADER_INVALIDCLASSLINKAGE + 1 ) ,
  HSSETCONSTANTBUFFERS_INVALIDBUFFER                                           =  (DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (HSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
  DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY                                      =  (DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_DSSETSHADERRESOURCES_HAZARD                                           =  (DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEVICE_DSSETCONSTANTBUFFERS_HAZARD                                           =  (DEVICE_DSSETSHADERRESOURCES_HAZARD + 1 ) ,
  DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT                                    =  (DEVICE_DSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
  DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT                                    =  (DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
  CREATEDOMAINSHADER_INVALIDCALL                                               =  (DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
  CREATEDOMAINSHADER_OUTOFMEMORY                                               =  (CREATEDOMAINSHADER_INVALIDCALL + 1 ) ,
  CREATEDOMAINSHADER_INVALIDSHADERBYTECODE                                     =  (CREATEDOMAINSHADER_OUTOFMEMORY + 1 ) ,
  CREATEDOMAINSHADER_INVALIDSHADERTYPE                                         =  (CREATEDOMAINSHADER_INVALIDSHADERBYTECODE + 1 ) ,
  CREATEDOMAINSHADER_INVALIDCLASSLINKAGE                                       =  (CREATEDOMAINSHADER_INVALIDSHADERTYPE + 1 ) ,
  DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY                                      =  (CREATEDOMAINSHADER_INVALIDCLASSLINKAGE + 1 ) ,
  DSSETCONSTANTBUFFERS_INVALIDBUFFER                                           =  (DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (DSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
  DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY                                      =  (DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_DRAW_HS_XOR_DS_MISMATCH                                               =  (DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT                                    =  (DEVICE_DRAW_HS_XOR_DS_MISMATCH + 1 ) ,
  DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER                                       =  (DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
  DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED                                         =  (DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER + 1 ) ,
  DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW                                          =  (DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED + 1 ) ,
  RESOURCE_MAP_INVALIDMAPTYPE                                                  =  (DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW + 1 ) ,
  RESOURCE_MAP_INVALIDSUBRESOURCE                                              =  (RESOURCE_MAP_INVALIDMAPTYPE + 1 ) ,
  RESOURCE_MAP_INVALIDFLAGS                                                    =  (RESOURCE_MAP_INVALIDSUBRESOURCE + 1 ) ,
  RESOURCE_MAP_ALREADYMAPPED                                                   =  (RESOURCE_MAP_INVALIDFLAGS + 1 ) ,
  RESOURCE_MAP_DEVICEREMOVED_RETURN                                            =  (RESOURCE_MAP_ALREADYMAPPED + 1 ) ,
  RESOURCE_MAP_OUTOFMEMORY_RETURN                                              =  (RESOURCE_MAP_DEVICEREMOVED_RETURN + 1 ) ,
  RESOURCE_MAP_WITHOUT_INITIAL_DISCARD                                         =  (RESOURCE_MAP_OUTOFMEMORY_RETURN + 1 ) ,
  RESOURCE_UNMAP_INVALIDSUBRESOURCE                                            =  (RESOURCE_MAP_WITHOUT_INITIAL_DISCARD + 1 ) ,
  RESOURCE_UNMAP_NOTMAPPED                                                     =  (RESOURCE_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
  DEVICE_DRAW_RASTERIZING_CONTROL_POINTS                                       =  (RESOURCE_UNMAP_NOTMAPPED + 1 ) ,
  DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED                           =  (DEVICE_DRAW_RASTERIZING_CONTROL_POINTS + 1 ) ,
  DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH                                         =  (DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED + 1 ) ,
  DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH                              =  (DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH + 1 ) ,
  DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH                               =  (DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH + 1 ) ,
  DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH                                =  (DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH + 1 ) ,
  CREATE_CONTEXT                                                               =  (DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH + 1 ) ,
  LIVE_CONTEXT                                                                 =  (CREATE_CONTEXT + 1 ) ,
  DESTROY_CONTEXT                                                              =  (LIVE_CONTEXT + 1 ) ,
  CREATE_BUFFER                                                                =  (DESTROY_CONTEXT + 1 ) ,
  DESTROY_BUFFER                                                              =  (CREATE_BUFFER + 1 ) ,
  CREATE_TEXTURE1D                                                             =  (DESTROY_BUFFER + 1 ) ,
  DESTROY_TEXTURE1D                                                            =  (CREATE_TEXTURE1D + 1 ) ,
  CREATE_TEXTURE2D                                                             =  (DESTROY_TEXTURE1D + 1 ) ,
  DESTROY_TEXTURE2D                                                            =  (CREATE_TEXTURE2D + 1 ) ,
  CREATE_TEXTURE3D                                                             =  (DESTROY_TEXTURE2D + 1 ) ,
  DESTROY_TEXTURE3D                                                            =  (CREATE_TEXTURE3D + 1 ) ,
  CREATE_SHADERRESOURCEVIEW                                                    =  (DESTROY_TEXTURE3D + 1 ) ,
  DESTROY_SHADERRESOURCEVIEW                                                   =  (CREATE_SHADERRESOURCEVIEW + 1 ) ,
  CREATE_RENDERTARGETVIEW                                                      =  (DESTROY_SHADERRESOURCEVIEW + 1 ) ,
  DESTROY_RENDERTARGETVIEW                                                     =  (CREATE_RENDERTARGETVIEW + 1 ) ,
  CREATE_DEPTHSTENCILVIEW                                                      =  (DESTROY_RENDERTARGETVIEW + 1 ) ,
  DESTROY_DEPTHSTENCILVIEW                                                     =  (CREATE_DEPTHSTENCILVIEW + 1 ) ,
  CREATE_VERTEXSHADER                                                          =  (DESTROY_DEPTHSTENCILVIEW + 1 ) ,
  DESTROY_VERTEXSHADER                                                         =  (CREATE_VERTEXSHADER + 1 ) ,
  CREATE_HULLSHADER                                                            =  (DESTROY_VERTEXSHADER + 1 ) ,
  LIVE_HULLSHADER                                                              =  (CREATE_HULLSHADER + 1 ) ,
  DESTROY_HULLSHADER                                                           =  (LIVE_HULLSHADER + 1 ) ,
  CREATE_DOMAINSHADER                                                          =  (DESTROY_HULLSHADER + 1 ) ,
  LIVE_DOMAINSHADER                                                            =  (CREATE_DOMAINSHADER + 1 ) ,
  DESTROY_DOMAINSHADER                                                         =  (LIVE_DOMAINSHADER + 1 ) ,
  CREATE_GEOMETRYSHADER                                                        =  (DESTROY_DOMAINSHADER + 1 ) ,
  DESTROY_GEOMETRYSHADER                                                       =  (CREATE_GEOMETRYSHADER + 1 ) ,
  CREATE_PIXELSHADER                                                           =  (DESTROY_GEOMETRYSHADER + 1 ) ,
  DESTROY_PIXELSHADER                                                          =  (CREATE_PIXELSHADER + 1 ) ,
  CREATE_INPUTLAYOUT                                                           =  (DESTROY_PIXELSHADER + 1 ) ,
  DESTROY_INPUTLAYOUT                                                          =  (CREATE_INPUTLAYOUT + 1 ) ,
  CREATE_SAMPLER                                                               =  (DESTROY_INPUTLAYOUT + 1 ) ,
  DESTROY_SAMPLER                                                              =  (CREATE_SAMPLER + 1 ) ,
  CREATE_BLENDSTATE                                                            =  (DESTROY_SAMPLER + 1 ) ,
  DESTROY_BLENDSTATE                                                           =  (CREATE_BLENDSTATE + 1 ) ,
  CREATE_DEPTHSTENCILSTATE                                                     =  (DESTROY_BLENDSTATE + 1 ) ,
  DESTROY_DEPTHSTENCILSTATE                                                    =  (CREATE_DEPTHSTENCILSTATE + 1 ) ,
  CREATE_RASTERIZERSTATE                                                       =  (DESTROY_DEPTHSTENCILSTATE + 1 ) ,
  DESTROY_RASTERIZERSTATE                                                      =  (CREATE_RASTERIZERSTATE + 1 ) ,
  CREATE_QUERY                                                                 =  (DESTROY_RASTERIZERSTATE + 1 ) ,
  DESTROY_QUERY                                                                =  (CREATE_QUERY + 1 ) ,
  CREATE_PREDICATE                                                             =  (DESTROY_QUERY + 1 ) ,
  DESTROY_PREDICATE                                                            =  (CREATE_PREDICATE + 1 ) ,
  CREATE_COUNTER                                                               =  (DESTROY_PREDICATE + 1 ) ,
  DESTROY_COUNTER                                                              =  (CREATE_COUNTER + 1 ) ,
  CREATE_COMMANDLIST                                                           =  (DESTROY_COUNTER + 1 ) ,
  LIVE_COMMANDLIST                                                             =  (CREATE_COMMANDLIST + 1 ) ,
  DESTROY_COMMANDLIST                                                          =  (LIVE_COMMANDLIST + 1 ) ,
  CREATE_CLASSINSTANCE                                                         =  (DESTROY_COMMANDLIST + 1 ) ,
  LIVE_CLASSINSTANCE                                                           =  (CREATE_CLASSINSTANCE + 1 ) ,
  DESTROY_CLASSINSTANCE                                                        =  (LIVE_CLASSINSTANCE + 1 ) ,
  CREATE_CLASSLINKAGE                                                          =  (DESTROY_CLASSINSTANCE + 1 ) ,
  LIVE_CLASSLINKAGE                                                            =  (CREATE_CLASSLINKAGE + 1 ) ,
  DESTROY_CLASSLINKAGE                                                         =  (LIVE_CLASSLINKAGE + 1 ) ,
  CREATE_COMPUTESHADER                                                         =  (DESTROY_CLASSLINKAGE + 1 ) ,
  LIVE_COMPUTESHADER                                                           =  (CREATE_COMPUTESHADER + 1 ) ,
  DESTROY_COMPUTESHADER                                                        =  (LIVE_COMPUTESHADER + 1 ) ,
  CREATE_UNORDEREDACCESSVIEW                                                   =  (DESTROY_COMPUTESHADER + 1 ) ,
  LIVE_UNORDEREDACCESSVIEW                                                     =  (CREATE_UNORDEREDACCESSVIEW + 1 ) ,
  DESTROY_UNORDEREDACCESSVIEW                                                  =  (LIVE_UNORDEREDACCESSVIEW + 1 ) ,
  DEVICE_SETSHADER_INTERFACES_FEATURELEVEL                                     =  (DESTROY_UNORDEREDACCESSVIEW + 1 ) ,
  DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH                                    =  (DEVICE_SETSHADER_INTERFACES_FEATURELEVEL + 1 ) ,
  DEVICE_SETSHADER_INVALID_INSTANCE                                            =  (DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH + 1 ) ,
  DEVICE_SETSHADER_INVALID_INSTANCE_INDEX                                      =  (DEVICE_SETSHADER_INVALID_INSTANCE + 1 ) ,
  DEVICE_SETSHADER_INVALID_INSTANCE_TYPE                                       =  (DEVICE_SETSHADER_INVALID_INSTANCE_INDEX + 1 ) ,
  DEVICE_SETSHADER_INVALID_INSTANCE_DATA                                       =  (DEVICE_SETSHADER_INVALID_INSTANCE_TYPE + 1 ) ,
  DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA                                       =  (DEVICE_SETSHADER_INVALID_INSTANCE_DATA + 1 ) ,
  DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS                                      =  (DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA + 1 ) ,
  DEVICE_CREATESHADER_CLASSLINKAGE_FULL                                        =  (DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS + 1 ) ,
  DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE                              =  (DEVICE_CREATESHADER_CLASSLINKAGE_FULL + 1 ) ,
  DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE                              =  (DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE + 1 ) ,
  DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN                                 =  (DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE + 1 ) ,
  DEVICE_CSSETSHADERRESOURCES_HAZARD                                           =  (DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN + 1 ) ,
  DEVICE_CSSETCONSTANTBUFFERS_HAZARD                                           =  (DEVICE_CSSETSHADERRESOURCES_HAZARD + 1 ) ,
  CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT                                    =  (DEVICE_CSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
  CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT                                    =  (CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
  CREATECOMPUTESHADER_INVALIDCALL                                              =  (CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
  CREATECOMPUTESHADER_OUTOFMEMORY                                              =  (CREATECOMPUTESHADER_INVALIDCALL + 1 ) ,
  CREATECOMPUTESHADER_INVALIDSHADERBYTECODE                                    =  (CREATECOMPUTESHADER_OUTOFMEMORY + 1 ) ,
  CREATECOMPUTESHADER_INVALIDSHADERTYPE                                        =  (CREATECOMPUTESHADER_INVALIDSHADERBYTECODE + 1 ) ,
  CREATECOMPUTESHADER_INVALIDCLASSLINKAGE                                      =  (CREATECOMPUTESHADER_INVALIDSHADERTYPE + 1 ) ,
  DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY                                      =  (CREATECOMPUTESHADER_INVALIDCLASSLINKAGE + 1 ) ,
  CSSETCONSTANTBUFFERS_INVALIDBUFFER                                           =  (DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (CSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
  DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY                                      =  (DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY                                    =  (DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
  DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY                                          =  (DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
  DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED                         =  (DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
  DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED                           =  (DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
  DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED                        =  (DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
  DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED                       =  (DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
  DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED       =  (DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
  DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED                          =  (DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
  DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED                        =  (DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
  CREATEBUFFER_INVALIDSTRUCTURESTRIDE                                          =  (DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
  CREATESHADERRESOURCEVIEW_INVALIDFLAGS                                        =  (CREATEBUFFER_INVALIDSTRUCTURESTRIDE + 1 ) ,
  CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE                                    =  (CREATESHADERRESOURCEVIEW_INVALIDFLAGS + 1 ) ,
  CREATEUNORDEREDACCESSVIEW_INVALIDDESC                                        =  (CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE + 1 ) ,
  CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT                                      =  (CREATEUNORDEREDACCESSVIEW_INVALIDDESC + 1 ) ,
  CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS                                  =  (CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT + 1 ) ,
  CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT                                 =  (CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS + 1 ) ,
  DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD                      =  (CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
  DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS       =  (DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD + 1 ) ,
  DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP                       =  (DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS + 1 ) ,
  CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT                               =  (DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP + 1 ) ,
  PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT                               =  (CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT + 1 ) ,
  CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN                                  =  (PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT + 1 ) ,
  CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN                                 =  (CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN + 1 ) ,
  CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS                                     =  (CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN + 1 ) ,
  DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD                                      =  (CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS + 1 ) ,
  CLEARUNORDEREDACCESSVIEW_DENORMFLUSH                                         =  (DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD + 1 ) ,
  DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY                                     =  (CLEARUNORDEREDACCESSVIEW_DENORMFLUSH + 1 ) ,
  DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY                                     =  (DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY + 1 ) ,
  CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS                                       =  (DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY + 1 ) ,
  CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS                                    =  (CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS + 1 ) ,
  DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER                                   =  (CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
  DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED                                     =  (DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER + 1 ) ,
  DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW                                      =  (DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED + 1 ) ,
  DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT                                      =  (DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW + 1 ) ,
  DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE                                     =  (DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT + 1 ) ,
  DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD                                       =  (DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE + 1 ) ,
  DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT                                      =  (DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD + 1 ) ,
  DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE                                     =  (DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT + 1 ) ,
  OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT                                       =  (DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE + 1 ) ,
  CLEARDEPTHSTENCILVIEW_DEPTH_READONLY                                         =  (OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT + 1 ) ,
  CLEARDEPTHSTENCILVIEW_STENCIL_READONLY                                       =  (CLEARDEPTHSTENCILVIEW_DEPTH_READONLY + 1 ) ,
  CHECKFEATURESUPPORT_FORMAT_DEPRECATED                                        =  (CLEARDEPTHSTENCILVIEW_STENCIL_READONLY + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH                              =  (CHECKFEATURESUPPORT_FORMAT_DEPRECATED + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_NOT_SET                                           =  (DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH + 1 ) ,
  DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP                     =  (DEVICE_UNORDEREDACCESSVIEW_NOT_SET + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH                                =  (DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED                                =  (DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED                               =  (DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH                         =  (DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH                              =  (DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED                                   =  (DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED                             =  (DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED                          =  (DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED                            =  (DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED                    =  (DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED           =  (DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED                       =  (DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED                  =  (DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED                =  (DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED + 1 ) ,
  DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED                                        =  (DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED + 1 ) ,
  DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW                                    =  (DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED + 1 ) ,
  DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO                                        =  (DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW + 1 ) ,
  DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH                          =  (DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO + 1 ) ,
  DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH                               =  (DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH + 1 ) ,
  DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED                                    =  (DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH + 1 ) ,
  DEVICE_DISPATCH_UNSUPPORTED                                                  =  (DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED + 1 ) ,
  DEVICE_DISPATCHINDIRECT_UNSUPPORTED                                          =  (DEVICE_DISPATCH_UNSUPPORTED + 1 ) ,
  COPYSTRUCTURECOUNT_INVALIDOFFSET                                             =  (DEVICE_DISPATCHINDIRECT_UNSUPPORTED + 1 ) ,
  COPYSTRUCTURECOUNT_LARGEOFFSET                                               =  (COPYSTRUCTURECOUNT_INVALIDOFFSET + 1 ) ,
  COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE                                   =  (COPYSTRUCTURECOUNT_LARGEOFFSET + 1 ) ,
  COPYSTRUCTURECOUNT_INVALIDSOURCESTATE                                        =  (COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE + 1 ) ,
  CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED                                      =  (COPYSTRUCTURECOUNT_INVALIDSOURCESTATE + 1 ) ,
  DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW                                 =  (CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED + 1 ) ,
  DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET                               =  (DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW + 1 ) ,
  DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS                                =  (DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET + 1 ) ,
  CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT                                  =  (DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS + 1 ) ,
  DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED                               =  (CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT + 1 ) ,
  REF_WARNING                                                                  =  (DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED + 1 ) ,
  DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV                                  =  (REF_WARNING  + 1 ) ,
  SHADER_ABORT                                                                 =  (DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV  + 1 ) ,
  SHADER_MESSAGE                                                               =  (SHADER_ABORT  + 1 ) ,
  SHADER_ERROR                                                                 =  (SHADER_MESSAGE  + 1 ) ,
  OFFERRESOURCES_INVALIDRESOURCE                                               =  (SHADER_ERROR  + 1 ) ,
  HSSETSAMPLERS_UNBINDDELETINGOBJECT                                           =  (OFFERRESOURCES_INVALIDRESOURCE  + 1 ) ,
  DSSETSAMPLERS_UNBINDDELETINGOBJECT                                           =  (HSSETSAMPLERS_UNBINDDELETINGOBJECT  + 1 ) ,
  CSSETSAMPLERS_UNBINDDELETINGOBJECT                                           =  (DSSETSAMPLERS_UNBINDDELETINGOBJECT  + 1 ) ,
  HSSETSHADER_UNBINDDELETINGOBJECT                                             =  (CSSETSAMPLERS_UNBINDDELETINGOBJECT  + 1 ) ,
  DSSETSHADER_UNBINDDELETINGOBJECT                                             =  (HSSETSHADER_UNBINDDELETINGOBJECT  + 1 ) ,
  CSSETSHADER_UNBINDDELETINGOBJECT                                             =  (DSSETSHADER_UNBINDDELETINGOBJECT  + 1 ) ,
  ENQUEUESETEVENT_INVALIDARG_RETURN                                            =  (CSSETSHADER_UNBINDDELETINGOBJECT  + 1 ) ,
  ENQUEUESETEVENT_OUTOFMEMORY_RETURN                                           =  (ENQUEUESETEVENT_INVALIDARG_RETURN  + 1 ) ,
  ENQUEUESETEVENT_ACCESSDENIED_RETURN                                          =  (ENQUEUESETEVENT_OUTOFMEMORY_RETURN  + 1 ) ,
  DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE        =  (ENQUEUESETEVENT_ACCESSDENIED_RETURN  + 1 ) ,
  D3D11_MESSAGES_END                                                           =  (DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE + 1 ) ,
  D3D11_1_MESSAGES_START                                                       =  0x300000,
  CREATE_VIDEODECODER                                                          =  (D3D11_1_MESSAGES_START + 1 ) ,
  CREATE_VIDEOPROCESSORENUM                                                    =  (CREATE_VIDEODECODER + 1 ) ,
  CREATE_VIDEOPROCESSOR                                                        =  (CREATE_VIDEOPROCESSORENUM  + 1 ) ,
  CREATE_DECODEROUTPUTVIEW                                                     =  (CREATE_VIDEOPROCESSOR  + 1 ) ,
  CREATE_PROCESSORINPUTVIEW                                                    =  (CREATE_DECODEROUTPUTVIEW  + 1 ) ,
  CREATE_PROCESSOROUTPUTVIEW                                                   =  (CREATE_PROCESSORINPUTVIEW  + 1 ) ,
  CREATE_DEVICECONTEXTSTATE                                                    =  (CREATE_PROCESSOROUTPUTVIEW  + 1 ) ,
  LIVE_VIDEODECODER                                                            =  (CREATE_DEVICECONTEXTSTATE  + 1 ) ,
  LIVE_VIDEOPROCESSORENUM                                                      =  (LIVE_VIDEODECODER  + 1 ) ,
  LIVE_VIDEOPROCESSOR                                                          =  (LIVE_VIDEOPROCESSORENUM  + 1 ) ,
  LIVE_DECODEROUTPUTVIEW                                                       =  (LIVE_VIDEOPROCESSOR  + 1 ) ,
  LIVE_PROCESSORINPUTVIEW                                                      =  (LIVE_DECODEROUTPUTVIEW  + 1 ) ,
  LIVE_PROCESSOROUTPUTVIEW                                                     =  (LIVE_PROCESSORINPUTVIEW  + 1 ) ,
  LIVE_DEVICECONTEXTSTATE                                                      =  (LIVE_PROCESSOROUTPUTVIEW  + 1 ) ,
  DESTROY_VIDEODECODER                                                         =  (LIVE_DEVICECONTEXTSTATE  + 1 ) ,
  DESTROY_VIDEOPROCESSORENUM                                                   =  (DESTROY_VIDEODECODER  + 1 ) ,
  DESTROY_VIDEOPROCESSOR                                                       =  (DESTROY_VIDEOPROCESSORENUM  + 1 ) ,
  DESTROY_DECODEROUTPUTVIEW                                                    =  (DESTROY_VIDEOPROCESSOR  + 1 ) ,
  DESTROY_PROCESSORINPUTVIEW                                                   =  (DESTROY_DECODEROUTPUTVIEW  + 1 ) ,
  DESTROY_PROCESSOROUTPUTVIEW                                                  =  (DESTROY_PROCESSORINPUTVIEW  + 1 ) ,
  DESTROY_DEVICECONTEXTSTATE                                                   =  (DESTROY_PROCESSOROUTPUTVIEW  + 1 ) ,
  CREATEDEVICECONTEXTSTATE_INVALIDFLAGS                                        =  (DESTROY_DEVICECONTEXTSTATE  + 1 ) ,
  CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL                                 =  (CREATEDEVICECONTEXTSTATE_INVALIDFLAGS  + 1 ) ,
  CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED                         =  (CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL  + 1 ) ,
  CREATEDEVICECONTEXTSTATE_INVALIDREFIID                                       =  (CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED  + 1 ) ,
  DEVICE_DISCARDVIEW_INVALIDVIEW                                               =  (CREATEDEVICECONTEXTSTATE_INVALIDREFIID  + 1 ) ,
  COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS                                      =  (DEVICE_DISCARDVIEW_INVALIDVIEW  + 1 ) ,
  UPDATESUBRESOURCE1_INVALIDCOPYFLAGS                                          =  (COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS  + 1 ) ,
  CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT                               =  (UPDATESUBRESOURCE1_INVALIDCOPYFLAGS  + 1 ) ,
  CREATEVIDEODECODER_OUTOFMEMORY_RETURN                                        =  (CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT  + 1 ) ,
  CREATEVIDEODECODER_NULLPARAM                                                 =  (CREATEVIDEODECODER_OUTOFMEMORY_RETURN  + 1 ) ,
  CREATEVIDEODECODER_INVALIDFORMAT                                             =  (CREATEVIDEODECODER_NULLPARAM  + 1 ) ,
  CREATEVIDEODECODER_ZEROWIDTHHEIGHT                                           =  (CREATEVIDEODECODER_INVALIDFORMAT  + 1 ) ,
  CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE                                  =  (CREATEVIDEODECODER_ZEROWIDTHHEIGHT  + 1 ) ,
  CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE                                 =  (CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE  + 1 ) ,
  GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY                                      =  (CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE  + 1 ) ,
  GETVIDEODECODERPROFILE_NULLPARAM                                             =  (GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY  + 1 ) ,
  GETVIDEODECODERPROFILE_INVALIDINDEX                                          =  (GETVIDEODECODERPROFILE_NULLPARAM  + 1 ) ,
  GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN                                    =  (GETVIDEODECODERPROFILE_INVALIDINDEX  + 1 ) ,
  CHECKVIDEODECODERFORMAT_NULLPARAM                                            =  (GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN  + 1 ) ,
  CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN                                   =  (CHECKVIDEODECODERFORMAT_NULLPARAM  + 1 ) ,
  GETVIDEODECODERCONFIGCOUNT_NULLPARAM                                         =  (CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN  + 1 ) ,
  GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN                                =  (GETVIDEODECODERCONFIGCOUNT_NULLPARAM  + 1 ) ,
  GETVIDEODECODERCONFIG_NULLPARAM                                              =  (GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN  + 1 ) ,
  GETVIDEODECODERCONFIG_INVALIDINDEX                                           =  (GETVIDEODECODERCONFIG_NULLPARAM  + 1 ) ,
  GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN                                     =  (GETVIDEODECODERCONFIG_INVALIDINDEX  + 1 ) ,
  GETDECODERCREATIONPARAMS_NULLPARAM                                           =  (GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN  + 1 ) ,
  GETDECODERDRIVERHANDLE_NULLPARAM                                             =  (GETDECODERCREATIONPARAMS_NULLPARAM  + 1 ) ,
  GETDECODERBUFFER_NULLPARAM                                                   =  (GETDECODERDRIVERHANDLE_NULLPARAM  + 1 ) ,
  GETDECODERBUFFER_INVALIDBUFFER                                               =  (GETDECODERBUFFER_NULLPARAM  + 1 ) ,
  GETDECODERBUFFER_INVALIDTYPE                                                 =  (GETDECODERBUFFER_INVALIDBUFFER  + 1 ) ,
  GETDECODERBUFFER_LOCKED                                                      =  (GETDECODERBUFFER_INVALIDTYPE  + 1 ) ,
  RELEASEDECODERBUFFER_NULLPARAM                                               =  (GETDECODERBUFFER_LOCKED  + 1 ) ,
  RELEASEDECODERBUFFER_INVALIDTYPE                                             =  (RELEASEDECODERBUFFER_NULLPARAM  + 1 ) ,
  RELEASEDECODERBUFFER_NOTLOCKED                                               =  (RELEASEDECODERBUFFER_INVALIDTYPE  + 1 ) ,
  DECODERBEGINFRAME_NULLPARAM                                                  =  (RELEASEDECODERBUFFER_NOTLOCKED  + 1 ) ,
  DECODERBEGINFRAME_HAZARD                                                     =  (DECODERBEGINFRAME_NULLPARAM  + 1 ) ,
  DECODERENDFRAME_NULLPARAM                                                    =  (DECODERBEGINFRAME_HAZARD  + 1 ) ,
  SUBMITDECODERBUFFERS_NULLPARAM                                               =  (DECODERENDFRAME_NULLPARAM  + 1 ) ,
  SUBMITDECODERBUFFERS_INVALIDTYPE                                             =  (SUBMITDECODERBUFFERS_NULLPARAM  + 1 ) ,
  DECODEREXTENSION_NULLPARAM                                                   =  (SUBMITDECODERBUFFERS_INVALIDTYPE  + 1 ) ,
  DECODEREXTENSION_INVALIDRESOURCE                                             =  (DECODEREXTENSION_NULLPARAM  + 1 ) ,
  CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN                            =  (DECODEREXTENSION_INVALIDRESOURCE  + 1 ) ,
  CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM                                     =  (CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN  + 1 ) ,
  CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT                            =  (CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM  + 1 ) ,
  CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE                                  =  (CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT  + 1 ) ,
  CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE                         =  (CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE  + 1 ) ,
  CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE                        =  (CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE  + 1 ) ,
  CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT                            =  (CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE  + 1 ) ,
  GETVIDEOPROCESSORCONTENTDESC_NULLPARAM                                       =  (CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT  + 1 ) ,
  CHECKVIDEOPROCESSORFORMAT_NULLPARAM                                          =  (GETVIDEOPROCESSORCONTENTDESC_NULLPARAM  + 1 ) ,
  GETVIDEOPROCESSORCAPS_NULLPARAM                                              =  (CHECKVIDEOPROCESSORFORMAT_NULLPARAM  + 1 ) ,
  GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM                                =  (GETVIDEOPROCESSORCAPS_NULLPARAM  + 1 ) ,
  GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX                             =  (GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM  + 1 ) ,
  GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM                                        =  (GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX  + 1 ) ,
  GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX                                     =  (GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM  + 1 ) ,
  GETVIDEOPROCESSORFILTERRANGE_NULLPARAM                                       =  (GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX  + 1 ) ,
  GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED                                     =  (GETVIDEOPROCESSORFILTERRANGE_NULLPARAM  + 1 ) ,
  CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN                                      =  (GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED  + 1 ) ,
  CREATEVIDEOPROCESSOR_NULLPARAM                                               =  (CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM                                  =  (CREATEVIDEOPROCESSOR_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM                             =  (VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA                          =  (VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM                                  =  (VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM                               =  (VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED                             =  (VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM                           =  (VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE                         =  (VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM                                =  (VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM                                  =  (VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED                                =  (VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM                                   =  (VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED  + 1 ) ,
  VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM                                  =  (VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM                             =  (VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM                                  =  (VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM                               =  (VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM                                =  (VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED                              =  (VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE                              =  (VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED  + 1 ) ,
  VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM                                  =  (VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE  + 1 ) ,
  VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM                                   =  (VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM                                 =  (VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT                             =  (VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM                             =  (VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT  + 1 ) ,
  VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM                                  =  (VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM                              =  (VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM                                  =  (VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE                                =  (VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG                                =  (VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE  + 1 ) ,
  VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM                              =  (VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG  + 1 ) ,
  VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM                                  =  (VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM                              =  (VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT                                =  (VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM                                    =  (VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT  + 1 ) ,
  VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM                                =  (VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT                                  =  (VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM                                       =  (VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT  + 1 ) ,
  VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM                                   =  (VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA                                    =  (VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM                                     =  (VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA  + 1 ) ,
  VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM                                 =  (VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT                                  =  (VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA                                  =  (VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT  + 1 ) ,
  VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM                            =  (VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA  + 1 ) ,
  VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM                        =  (VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO                         =  (VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM                                     =  (VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO  + 1 ) ,
  VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM                                 =  (VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE                                  =  (VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED                                   =  (VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE  + 1 ) ,
  VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM                                =  (VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED  + 1 ) ,
  VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM                            =  (VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED                              =  (VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED                          =  (VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED  + 1 ) ,
  VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED                    =  (VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED  + 1 ) ,
  VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED                        =  (VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED  + 1 ) ,
  VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT                            =  (VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED  + 1 ) ,
  VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM                          =  (VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT  + 1 ) ,
  VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM                      =  (VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM                                      =  (VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM                                  =  (VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER                                  =  (VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED                                    =  (VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER  + 1 ) ,
  VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL                                   =  (VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED  + 1 ) ,
  VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM                                   =  (VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL  + 1 ) ,
  VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM                               =  (VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM                                 =  (VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM                                  =  (VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM                                  =  (VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM                                  =  (VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM                                    =  (VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM                                       =  (VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM                                     =  (VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM                            =  (VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM                                     =  (VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM                                =  (VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM                          =  (VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM                                      =  (VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM                                   =  (VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM                               =  (VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORBLT_NULLPARAM                                                  =  (VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT                                         =  (VIDEOPROCESSORBLT_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORBLT_TARGETRECT                                                 =  (VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT  + 1 ) ,
  VIDEOPROCESSORBLT_INVALIDOUTPUT                                              =  (VIDEOPROCESSORBLT_TARGETRECT  + 1 ) ,
  VIDEOPROCESSORBLT_INVALIDPASTFRAMES                                          =  (VIDEOPROCESSORBLT_INVALIDOUTPUT  + 1 ) ,
  VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES                                        =  (VIDEOPROCESSORBLT_INVALIDPASTFRAMES  + 1 ) ,
  VIDEOPROCESSORBLT_INVALIDSOURCERECT                                          =  (VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES  + 1 ) ,
  VIDEOPROCESSORBLT_INVALIDDESTRECT                                            =  (VIDEOPROCESSORBLT_INVALIDSOURCERECT  + 1 ) ,
  VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE                                       =  (VIDEOPROCESSORBLT_INVALIDDESTRECT  + 1 ) ,
  VIDEOPROCESSORBLT_INVALIDARRAYSIZE                                           =  (VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE  + 1 ) ,
  VIDEOPROCESSORBLT_INVALIDARRAY                                               =  (VIDEOPROCESSORBLT_INVALIDARRAYSIZE  + 1 ) ,
  VIDEOPROCESSORBLT_RIGHTEXPECTED                                              =  (VIDEOPROCESSORBLT_INVALIDARRAY  + 1 ) ,
  VIDEOPROCESSORBLT_RIGHTNOTEXPECTED                                           =  (VIDEOPROCESSORBLT_RIGHTEXPECTED  + 1 ) ,
  VIDEOPROCESSORBLT_STEREONOTENABLED                                           =  (VIDEOPROCESSORBLT_RIGHTNOTEXPECTED  + 1 ) ,
  VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE                                       =  (VIDEOPROCESSORBLT_STEREONOTENABLED  + 1 ) ,
  VIDEOPROCESSORBLT_NOSTEREOSTREAMS                                            =  (VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE  + 1 ) ,
  VIDEOPROCESSORBLT_INPUTHAZARD                                                =  (VIDEOPROCESSORBLT_NOSTEREOSTREAMS  + 1 ) ,
  VIDEOPROCESSORBLT_OUTPUTHAZARD                                               =  (VIDEOPROCESSORBLT_INPUTHAZARD  + 1 ) ,
  CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN                              =  (VIDEOPROCESSORBLT_OUTPUTHAZARD  + 1 ) ,
  CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM                                       =  (CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN  + 1 ) ,
  CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE                                     =  (CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM  + 1 ) ,
  CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND                                     =  (CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE  + 1 ) ,
  CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT                               =  (CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND  + 1 ) ,
  CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP                                      =  (CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT  + 1 ) ,
  CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP                                   =  (CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP  + 1 ) ,
  CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE                                =  (CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP  + 1 ) ,
  CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY                                    =  (CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE  + 1 ) ,
  CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION                                =  (CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN                             =  (CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM                                      =  (CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE                                    =  (CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND                                    =  (CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC                                    =  (CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE                                   =  (CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT                                  =  (CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC                                  =  (CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP                                     =  (CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP                                 =  (CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE                               =  (CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY                                   =  (CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE  + 1 ) ,
  CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION                               =  (CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY  + 1 ) ,
  CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN                            =  (CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION  + 1 ) ,
  CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM                                     =  (CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN  + 1 ) ,
  CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE                                   =  (CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM  + 1 ) ,
  CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND                                   =  (CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE  + 1 ) ,
  CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT                                 =  (CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND  + 1 ) ,
  CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP                                    =  (CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT  + 1 ) ,
  CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP                                =  (CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP  + 1 ) ,
  CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY                              =  (CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP  + 1 ) ,
  CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY                                  =  (CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY  + 1 ) ,
  CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION                              =  (CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY  + 1 ) ,
  DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT                               =  (CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION  + 1 ) ,
  CREATEBLENDSTATE_INVALIDLOGICOPS                                             =  (DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT  + 1 ) ,
  CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER                            =  (CREATEBLENDSTATE_INVALIDLOGICOPS  + 1 ) ,
  CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER                           =  (CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER  + 1 ) ,
  CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER                              =  (CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER  + 1 ) ,
  DEVICE_LOCKEDOUT_INTERFACE                                                   =  (CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER  + 1 ) ,
  REF_WARNING_ATOMIC_INCONSISTENT                                              =  (DEVICE_LOCKEDOUT_INTERFACE  + 1 ) ,
  REF_WARNING_READING_UNINITIALIZED_RESOURCE                                   =  (REF_WARNING_ATOMIC_INCONSISTENT  + 1 ) ,
  REF_WARNING_RAW_HAZARD                                                       =  (REF_WARNING_READING_UNINITIALIZED_RESOURCE  + 1 ) ,
  REF_WARNING_WAR_HAZARD                                                       =  (REF_WARNING_RAW_HAZARD  + 1 ) ,
  REF_WARNING_WAW_HAZARD                                                       =  (REF_WARNING_WAR_HAZARD  + 1 ) ,
  CREATECRYPTOSESSION_NULLPARAM                                                =  (REF_WARNING_WAW_HAZARD  + 1 ) ,
  CREATECRYPTOSESSION_OUTOFMEMORY_RETURN                                       =  (CREATECRYPTOSESSION_NULLPARAM  + 1 ) ,
  GETCRYPTOTYPE_NULLPARAM                                                      =  (CREATECRYPTOSESSION_OUTOFMEMORY_RETURN  + 1 ) ,
  GETDECODERPROFILE_NULLPARAM                                                  =  (GETCRYPTOTYPE_NULLPARAM  + 1 ) ,
  GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM                                    =  (GETDECODERPROFILE_NULLPARAM  + 1 ) ,
  GETCRYPTOSESSIONCERTIFICATE_NULLPARAM                                        =  (GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM  + 1 ) ,
  GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE                                        =  (GETCRYPTOSESSIONCERTIFICATE_NULLPARAM  + 1 ) ,
  GETCRYPTOSESSIONHANDLE_WRONGSIZE                                             =  (GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE  + 1 ) ,
  NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM                                  =  (GETCRYPTOSESSIONHANDLE_WRONGSIZE  + 1 ) ,
  ENCRYPTIONBLT_UNSUPPORTED                                                    =  (NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM  + 1 ) ,
  ENCRYPTIONBLT_NULLPARAM                                                      =  (ENCRYPTIONBLT_UNSUPPORTED  + 1 ) ,
  ENCRYPTIONBLT_SRC_WRONGDEVICE                                                =  (ENCRYPTIONBLT_NULLPARAM  + 1 ) ,
  ENCRYPTIONBLT_DST_WRONGDEVICE                                                =  (ENCRYPTIONBLT_SRC_WRONGDEVICE  + 1 ) ,
  ENCRYPTIONBLT_FORMAT_MISMATCH                                                =  (ENCRYPTIONBLT_DST_WRONGDEVICE  + 1 ) ,
  ENCRYPTIONBLT_SIZE_MISMATCH                                                  =  (ENCRYPTIONBLT_FORMAT_MISMATCH  + 1 ) ,
  ENCRYPTIONBLT_SRC_MULTISAMPLED                                               =  (ENCRYPTIONBLT_SIZE_MISMATCH  + 1 ) ,
  ENCRYPTIONBLT_DST_NOT_STAGING                                                =  (ENCRYPTIONBLT_SRC_MULTISAMPLED  + 1 ) ,
  ENCRYPTIONBLT_SRC_MAPPED                                                     =  (ENCRYPTIONBLT_DST_NOT_STAGING  + 1 ) ,
  ENCRYPTIONBLT_DST_MAPPED                                                     =  (ENCRYPTIONBLT_SRC_MAPPED  + 1 ) ,
  ENCRYPTIONBLT_SRC_OFFERED                                                    =  (ENCRYPTIONBLT_DST_MAPPED  + 1 ) ,
  ENCRYPTIONBLT_DST_OFFERED                                                    =  (ENCRYPTIONBLT_SRC_OFFERED  + 1 ) ,
  ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED                                          =  (ENCRYPTIONBLT_DST_OFFERED  + 1 ) ,
  DECRYPTIONBLT_UNSUPPORTED                                                    =  (ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED  + 1 ) ,
  DECRYPTIONBLT_NULLPARAM                                                      =  (DECRYPTIONBLT_UNSUPPORTED  + 1 ) ,
  DECRYPTIONBLT_SRC_WRONGDEVICE                                                =  (DECRYPTIONBLT_NULLPARAM  + 1 ) ,
  DECRYPTIONBLT_DST_WRONGDEVICE                                                =  (DECRYPTIONBLT_SRC_WRONGDEVICE  + 1 ) ,
  DECRYPTIONBLT_FORMAT_MISMATCH                                                =  (DECRYPTIONBLT_DST_WRONGDEVICE  + 1 ) ,
  DECRYPTIONBLT_SIZE_MISMATCH                                                  =  (DECRYPTIONBLT_FORMAT_MISMATCH  + 1 ) ,
  DECRYPTIONBLT_DST_MULTISAMPLED                                               =  (DECRYPTIONBLT_SIZE_MISMATCH  + 1 ) ,
  DECRYPTIONBLT_SRC_NOT_STAGING                                                =  (DECRYPTIONBLT_DST_MULTISAMPLED  + 1 ) ,
  DECRYPTIONBLT_DST_NOT_RENDER_TARGET                                          =  (DECRYPTIONBLT_SRC_NOT_STAGING  + 1 ) ,
  DECRYPTIONBLT_SRC_MAPPED                                                     =  (DECRYPTIONBLT_DST_NOT_RENDER_TARGET  + 1 ) ,
  DECRYPTIONBLT_DST_MAPPED                                                     =  (DECRYPTIONBLT_SRC_MAPPED  + 1 ) ,
  DECRYPTIONBLT_SRC_OFFERED                                                    =  (DECRYPTIONBLT_DST_MAPPED  + 1 ) ,
  DECRYPTIONBLT_DST_OFFERED                                                    =  (DECRYPTIONBLT_SRC_OFFERED  + 1 ) ,
  DECRYPTIONBLT_SRC_CONTENT_UNDEFINED                                          =  (DECRYPTIONBLT_DST_OFFERED  + 1 ) ,
  STARTSESSIONKEYREFRESH_NULLPARAM                                             =  (DECRYPTIONBLT_SRC_CONTENT_UNDEFINED  + 1 ) ,
  STARTSESSIONKEYREFRESH_INVALIDSIZE                                           =  (STARTSESSIONKEYREFRESH_NULLPARAM  + 1 ) ,
  FINISHSESSIONKEYREFRESH_NULLPARAM                                            =  (STARTSESSIONKEYREFRESH_INVALIDSIZE  + 1 ) ,
  GETENCRYPTIONBLTKEY_NULLPARAM                                                =  (FINISHSESSIONKEYREFRESH_NULLPARAM  + 1 ) ,
  GETENCRYPTIONBLTKEY_INVALIDSIZE                                              =  (GETENCRYPTIONBLTKEY_NULLPARAM  + 1 ) ,
  GETCONTENTPROTECTIONCAPS_NULLPARAM                                           =  (GETENCRYPTIONBLTKEY_INVALIDSIZE  + 1 ) ,
  CHECKCRYPTOKEYEXCHANGE_NULLPARAM                                             =  (GETCONTENTPROTECTIONCAPS_NULLPARAM  + 1 ) ,
  CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX                                          =  (CHECKCRYPTOKEYEXCHANGE_NULLPARAM  + 1 ) ,
  CREATEAUTHENTICATEDCHANNEL_NULLPARAM                                         =  (CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX  + 1 ) ,
  CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED                                       =  (CREATEAUTHENTICATEDCHANNEL_NULLPARAM  + 1 ) ,
  CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE                                       =  (CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED  + 1 ) ,
  CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN                                =  (CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE  + 1 ) ,
  GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL                        =  (CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN  + 1 ) ,
  GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM                             =  (GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL  + 1 ) ,
  GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL                            =  (GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM  + 1 ) ,
  GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM                                 =  (GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL  + 1 ) ,
  GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE                                 =  (GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM  + 1 ) ,
  NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL                      =  (GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE  + 1 ) ,
  NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM                           =  (NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL  + 1 ) ,
  QUERYAUTHENTICATEDCHANNEL_NULLPARAM                                          =  (NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM  + 1 ) ,
  QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL                                       =  (QUERYAUTHENTICATEDCHANNEL_NULLPARAM  + 1 ) ,
  QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY                                   =  (QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL  + 1 ) ,
  QUERYAUTHENTICATEDCHANNEL_WRONGSIZE                                          =  (QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY  + 1 ) ,
  QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX                                =  (QUERYAUTHENTICATEDCHANNEL_WRONGSIZE  + 1 ) ,
  CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM                                      =  (QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX  + 1 ) ,
  CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL                                   =  (CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM  + 1 ) ,
  CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE                           =  (CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL  + 1 ) ,
  CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE                                      =  (CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE  + 1 ) ,
  CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE                           =  (CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE  + 1 ) ,
  VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT                              =  (CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE  + 1 ) ,
  DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT                              =  (VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT  + 1 ) ,
  HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT                              =  (DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT  + 1 ) ,
  GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT                              =  (HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT  + 1 ) ,
  PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT                              =  (GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT  + 1 ) ,
  CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT                              =  (PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT  + 1 ) ,
  NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE                                =  (CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT  + 1 ) ,
  NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE                         =  (NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE  + 1 ) ,
  OFFERRESOURCES_INVALIDPRIORITY                                               =  (NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE  + 1 ) ,
  GETCRYPTOSESSIONHANDLE_OUTOFMEMORY                                           =  (OFFERRESOURCES_INVALIDPRIORITY  + 1 ) ,
  ACQUIREHANDLEFORCAPTURE_NULLPARAM                                            =  (GETCRYPTOSESSIONHANDLE_OUTOFMEMORY  + 1 ) ,
  ACQUIREHANDLEFORCAPTURE_INVALIDTYPE                                          =  (ACQUIREHANDLEFORCAPTURE_NULLPARAM  + 1 ) ,
  ACQUIREHANDLEFORCAPTURE_INVALIDBIND                                          =  (ACQUIREHANDLEFORCAPTURE_INVALIDTYPE  + 1 ) ,
  ACQUIREHANDLEFORCAPTURE_INVALIDARRAY                                         =  (ACQUIREHANDLEFORCAPTURE_INVALIDBIND  + 1 ) ,
  VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM                                    =  (ACQUIREHANDLEFORCAPTURE_INVALIDARRAY  + 1 ) ,
  VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM                                =  (VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMROTATION_INVALID                                      =  (VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM  + 1 ) ,
  VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED                                  =  (VIDEOPROCESSORSETSTREAMROTATION_INVALID  + 1 ) ,
  VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM                                    =  (VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED  + 1 ) ,
  DEVICE_CLEARVIEW_INVALIDVIEW                                                 =  (VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM  + 1 ) ,
  DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED                       =  (DEVICE_CLEARVIEW_INVALIDVIEW  + 1 ) ,
  DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED                       =  (DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED                         =  (DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED                         =  (DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED                       =  (DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED                       =  (DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED                     =  (DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED                     =  (DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED     =  (DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED     =  (DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED                        =  (DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED                        =  (DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED                      =  (DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED                      =  (DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED  + 1 ) ,
  DEVICE_SHADER_LINKAGE_MINPRECISION                                           =  (DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED  + 1 ) ,
  VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED                                     =  (DEVICE_SHADER_LINKAGE_MINPRECISION  + 1 ) ,
  VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED                          =  (VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED  + 1 ) ,
  DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED                                   =  (VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED  + 1 ) ,
  DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED                                     =  (DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED                                   =  (DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED                                 =  (DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED                 =  (DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED                                    =  (DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED  + 1 ) ,
  DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED                                  =  (DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED  + 1 ) ,
  DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET               =  (DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED  + 1 ) ,
  DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS                =  (DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET  + 1 ) ,
  DEVICE_CLEARVIEW_NOTSUPPORTED                                                =  (DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS  + 1 ) ,
  SWAPDEVICECONTEXTSTATE_NOTSUPPORTED                                          =  (DEVICE_CLEARVIEW_NOTSUPPORTED  + 1 ) ,
  UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1                                   =  (SWAPDEVICECONTEXTSTATE_NOTSUPPORTED  + 1 ) ,
  D3D11_1_MESSAGES_END                                                         =  (UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1  + 1 ) 
}

public enum D3D11_MESSAGE_SEVERITY : int { 
	CORRUPTION  = 0,
	ERROR       = ( CORRUPTION + 1 ),
	WARNING     = ( ERROR + 1 ),
	INFO        = ( WARNING + 1 ),
	MESSAGE     = ( INFO + 1 )
}

public enum D3D11_RLDO_FLAGS : int { 
	SUMMARY  = 0x1,
	DETAIL   = 0x2
}

public enum D3D11_SHADER_TRACKING_OPTION : int { 
	IGNORE                                        = 0,
	TRACK_UNINITIALIZED                           = 0x1,
	TRACK_RAW                                     = 0x2,
	TRACK_WAR                                     = 0x4,
	TRACK_WAW                                     = 0x8,
	ALLOW_SAME                                    = 0x10,
	TRACK_ATOMIC_CONSISTENCY                      = 0x20,
	TRACK_RAW_ACROSS_THREADGROUPS                 = 0x40,
	TRACK_WAR_ACROSS_THREADGROUPS                 = 0x80,
	TRACK_WAW_ACROSS_THREADGROUPS                 = 0x100,
	TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS  = 0x200,
	UAV_SPECIFIC_FLAGS                            = ( ( ( TRACK_RAW_ACROSS_THREADGROUPS | TRACK_WAR_ACROSS_THREADGROUPS ) | TRACK_WAW_ACROSS_THREADGROUPS ) | TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS ),
	ALL_HAZARDS                                   = ( ( ( ( ( ( ( TRACK_RAW | TRACK_WAR ) | TRACK_WAW ) | TRACK_ATOMIC_CONSISTENCY ) | TRACK_RAW_ACROSS_THREADGROUPS ) | TRACK_WAR_ACROSS_THREADGROUPS ) | TRACK_WAW_ACROSS_THREADGROUPS ) | TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS ),
	ALL_HAZARDS_ALLOWING_SAME                     = ( ALL_HAZARDS | ALLOW_SAME ),
	ALL_OPTIONS                                   = ( ALL_HAZARDS_ALLOWING_SAME | TRACK_UNINITIALIZED )
}

public enum D3D11_SHADER_TRACKING_RESOURCE_TYPE : int { 
	NONE                  = 0,
	UAV_DEVICEMEMORY      = 1,
	NON_UAV_DEVICEMEMORY  = 2,
	ALL_DEVICEMEMORY      = 3,
	GROUPSHARED_MEMORY    = 4,
	ALL_SHARED_MEMORY     = 5,
	GROUPSHARED_NON_UAV   = 6,
	ALL                   = 7
}

//
// Structures
//

public struct D3D11_INFO_QUEUE_FILTER {
	D3D11_INFO_QUEUE_FILTER_DESC AllowList;
	D3D11_INFO_QUEUE_FILTER_DESC DenyList;
}

public struct D3D11_INFO_QUEUE_FILTER_DESC {
	uint NumCategories;
	D3D11_MESSAGE_CATEGORY *pCategoryList;
	uint NumSeverities;
	D3D11_MESSAGE_SEVERITY *pSeverityList;
	uint NumIDs;
	D3D11_MESSAGE_ID *pIDList;
}

public struct D3D11_MESSAGE {
	D3D11_MESSAGE_CATEGORY Category;
	D3D11_MESSAGE_SEVERITY Severity;
	D3D11_MESSAGE_ID       ID;
	const(char)*           pDescription;
	SIZE_T                 DescriptionByteLength;
}

//
// Interfaces
//

mixin(uuid!(ID3D11Debug, "79cf2233-7536-4948-9d36-1e4692dc5760"));
public interface ID3D11Debug : IUnknown
{
extern(Windows):
	uint GetFeatureMask();
	uint GetPresentPerRenderOpDelay();
	HRESULT GetSwapChain(IDXGISwapChain *ppSwapChain);
	HRESULT ReportLiveDeviceObjects(D3D11_RLDO_FLAGS Flags);
	HRESULT SetFeatureMask(uint Mask);
	HRESULT SetPresentPerRenderOpDelay(uint Milliseconds);
	HRESULT SetSwapChain(IDXGISwapChain pSwapChain);
	HRESULT ValidateContext(ID3D11DeviceContext pContext);
	HRESULT ValidateContextForDispatch(ID3D11DeviceContext *pContext);
}

mixin(uuid!(ID3D11InfoQueue, "6543dbb6-1b48-42f5-ab82-e97ec74326f6"));
public interface ID3D11InfoQueue : IUnknown
{
extern(Windows):
	HRESULT AddApplicationMessage(D3D11_MESSAGE_SEVERITY Severity, const(char)* pDescription);
	HRESULT AddMessage(D3D11_MESSAGE_CATEGORY Category, D3D11_MESSAGE_SEVERITY Severity, D3D11_MESSAGE_ID ID, const(char)*  abstractpDescription);
	HRESULT AddRetrievalFilterEntries(D3D11_INFO_QUEUE_FILTER *pFilter);
	HRESULT AddStorageFilterEntries(D3D11_INFO_QUEUE_FILTER *pFilter);
	void ClearRetrievalFilter();
	void ClearStorageFilter();
	void ClearStoredMessages();
	bool GetBreakOnCategory(D3D11_MESSAGE_CATEGORY Category);
	bool GetBreakOnID(D3D11_MESSAGE_ID ID);
	bool GetBreakOnSeverity(D3D11_MESSAGE_SEVERITY Severity);
	HRESULT GetMessage(ulong MessageIndex, D3D11_MESSAGE *pMessage, uint *pMessageByteLength);
	ulong GetMessageCountLimit();
	bool GetMuteDebugOutput();
	ulong GetNumMessagesAllowedByStorageFilter();
	ulong GetNumMessagesDeniedByStorageFilter();
	ulong GetNumMessagesDiscardedByMessageCountLimit();
	ulong GetNumStoredMessages();
	ulong GetNumStoredMessagesAllowedByRetrievalFilter();
	HRESULT GetRetrievalFilter(D3D11_INFO_QUEUE_FILTER *pFilter, uint *pFilterByteLength);
	uint GetRetrievalFilterStackSize();
	HRESULT GetStorageFilter(D3D11_INFO_QUEUE_FILTER *pFilter, uint *pFilterByteLength);
	uint GetStorageFilterStackSize();
	void PopRetrievalFilter();
	void PopStorageFilter();
	HRESULT PushCopyOfRetrievalFilter();
	HRESULT PushCopyOfStorageFilter();
	HRESULT PushEmptyRetrievalFilter();
	HRESULT PushEmptyStorageFilter();
	HRESULT PushRetrievalFilter(D3D11_INFO_QUEUE_FILTER *pFilter);
	HRESULT PushStorageFilter(D3D11_INFO_QUEUE_FILTER *pFilter);
	HRESULT SetBreakOnCategory(D3D11_MESSAGE_CATEGORY Category, bool bEnable);
	HRESULT SetBreakOnID(D3D11_MESSAGE_ID ID, bool bEnable);
	HRESULT SetBreakOnSeverity(D3D11_MESSAGE_SEVERITY Severity, bool bEnable);
	HRESULT SetMessageCountLimit(ulong MessageCountLimit);
	void SetMuteDebugOutput(bool bMute);
}

mixin(uuid!(ID3D11SwitchToRef, "1ef337e3-58e7-4f83-a692-db221f5ed47e"));
public interface ID3D11SwitchToRef : IUnknown
{
extern(Windows):
	bool GetUseRef();
	bool SetUseRef(bool UseRef);
}

mixin(uuid!(ID3D11RefDefaultTrackingOptions, "03916615-c644-418c-9bf4-75db5be63ca0"));
public interface ID3D11RefDefaultTrackingOptions : IUnknown
{
extern(Windows):
	HRESULT SetTrackingOptions(uint ResourceTypeFlags, uint Options);
}

mixin(uuid!(ID3D11RefTrackingOptions, "193dacdf-0db2-4c05-a55c-ef06cac56fd9"));
public interface ID3D11RefTrackingOptions : IUnknown
{
extern(Windows):
	HRESULT SetTrackingOptions(uint uOptions);
}

mixin(uuid!(ID3D11TracingDevice, "1911c771-1587-413e-a7e0-fb26c3de0268"));
public interface ID3D11TracingDevice : IUnknown
{
extern(Windows):
	HRESULT SetShaderTrackingOptions(IUnknown *pShader, uint Options);
	HRESULT SetShaderTrackingOptionsByType(uint ResourceTypeFlags, uint Options);
}
